
f767-GitHub-v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007424  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f7c  08007f7c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08007f7c  08007f7c  00017f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f84  08007f84  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08007f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200000c0  0800804c  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200004c0  0800804c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016431  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fc  00000000  00000000  0003651f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00039920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac1c  00000000  00000000  0003bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d44  00000000  00000000  0006692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010234a  00000000  00000000  0007f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001819ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  00181a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800760c 	.word	0x0800760c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c4 	.word	0x200000c4
 800023c:	0800760c 	.word	0x0800760c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80005ee:	f107 020f 	add.w	r2, r7, #15
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <W25qxx_Spi+0x28>)
 80005fc:	f004 f95b 	bl	80048b6 <HAL_SPI_TransmitReceive>
	return ret;	
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000023c 	.word	0x2000023c

08000610 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4813      	ldr	r0, [pc, #76]	; (8000678 <W25qxx_ReadID+0x68>)
 800062c:	f002 fbd2 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000630:	209f      	movs	r0, #159	; 0x9f
 8000632:	f7ff ffd7 	bl	80005e4 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000636:	20a5      	movs	r0, #165	; 0xa5
 8000638:	f7ff ffd4 	bl	80005e4 <W25qxx_Spi>
 800063c:	4603      	mov	r3, r0
 800063e:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000640:	20a5      	movs	r0, #165	; 0xa5
 8000642:	f7ff ffcf 	bl	80005e4 <W25qxx_Spi>
 8000646:	4603      	mov	r3, r0
 8000648:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800064a:	20a5      	movs	r0, #165	; 0xa5
 800064c:	f7ff ffca 	bl	80005e4 <W25qxx_Spi>
 8000650:	4603      	mov	r3, r0
 8000652:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2110      	movs	r1, #16
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <W25qxx_ReadID+0x68>)
 800065a:	f002 fbbb 	bl	8002dd4 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	041a      	lsls	r2, r3, #16
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	4313      	orrs	r3, r2
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	4313      	orrs	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
  return Temp;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2110      	movs	r1, #16
 8000686:	4816      	ldr	r0, [pc, #88]	; (80006e0 <W25qxx_ReadUniqID+0x64>)
 8000688:	f002 fba4 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 800068c:	204b      	movs	r0, #75	; 0x4b
 800068e:	f7ff ffa9 	bl	80005e4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e005      	b.n	80006a4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000698:	20a5      	movs	r0, #165	; 0xa5
 800069a:	f7ff ffa3 	bl	80005e4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	3301      	adds	r3, #1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d9f6      	bls.n	8000698 <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	71bb      	strb	r3, [r7, #6]
 80006ae:	e00b      	b.n	80006c8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006b0:	79bc      	ldrb	r4, [r7, #6]
 80006b2:	20a5      	movs	r0, #165	; 0xa5
 80006b4:	f7ff ff96 	bl	80005e4 <W25qxx_Spi>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <W25qxx_ReadUniqID+0x68>)
 80006be:	4423      	add	r3, r4
 80006c0:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	3301      	adds	r3, #1
 80006c6:	71bb      	strb	r3, [r7, #6]
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d9f0      	bls.n	80006b0 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2110      	movs	r1, #16
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <W25qxx_ReadUniqID+0x64>)
 80006d4:	f002 fb7e 	bl	8002dd4 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	200000dc 	.word	0x200000dc

080006e8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2110      	movs	r1, #16
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <W25qxx_WriteEnable+0x28>)
 80006f2:	f002 fb6f 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80006f6:	2006      	movs	r0, #6
 80006f8:	f7ff ff74 	bl	80005e4 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2110      	movs	r1, #16
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <W25qxx_WriteEnable+0x28>)
 8000702:	f002 fb67 	bl	8002dd4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f001 fc1c 	bl	8001f44 <HAL_Delay>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000

08000714 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <W25qxx_ReadStatusRegister+0x84>)
 8000728:	f002 fb54 	bl	8002dd4 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d10c      	bne.n	800074c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000732:	2005      	movs	r0, #5
 8000734:	f7ff ff56 	bl	80005e4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000738:	20a5      	movs	r0, #165	; 0xa5
 800073a:	f7ff ff53 	bl	80005e4 <W25qxx_Spi>
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <W25qxx_ReadStatusRegister+0x88>)
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800074a:	e01b      	b.n	8000784 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d10c      	bne.n	800076c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000752:	2035      	movs	r0, #53	; 0x35
 8000754:	f7ff ff46 	bl	80005e4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000758:	20a5      	movs	r0, #165	; 0xa5
 800075a:	f7ff ff43 	bl	80005e4 <W25qxx_Spi>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <W25qxx_ReadStatusRegister+0x88>)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800076a:	e00b      	b.n	8000784 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800076c:	2015      	movs	r0, #21
 800076e:	f7ff ff39 	bl	80005e4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000772:	20a5      	movs	r0, #165	; 0xa5
 8000774:	f7ff ff36 	bl	80005e4 <W25qxx_Spi>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <W25qxx_ReadStatusRegister+0x88>)
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <W25qxx_ReadStatusRegister+0x84>)
 800078a:	f002 fb23 	bl	8002dd4 <HAL_GPIO_WritePin>
	return status;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	200000dc 	.word	0x200000dc

080007a0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 fbcd 	bl	8001f44 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2110      	movs	r1, #16
 80007ae:	480f      	ldr	r0, [pc, #60]	; (80007ec <W25qxx_WaitForWriteEnd+0x4c>)
 80007b0:	f002 fb10 	bl	8002dd4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80007b4:	2005      	movs	r0, #5
 80007b6:	f7ff ff15 	bl	80005e4 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80007ba:	20a5      	movs	r0, #165	; 0xa5
 80007bc:	f7ff ff12 	bl	80005e4 <W25qxx_Spi>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <W25qxx_WaitForWriteEnd+0x50>)
 80007c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fbba 	bl	8001f44 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <W25qxx_WaitForWriteEnd+0x50>)
 80007d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1ed      	bne.n	80007ba <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4802      	ldr	r0, [pc, #8]	; (80007ec <W25qxx_WaitForWriteEnd+0x4c>)
 80007e4:	f002 faf6 	bl	8002dd4 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	200000dc 	.word	0x200000dc

080007f4 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 80007fa:	4b97      	ldr	r3, [pc, #604]	; (8000a58 <W25qxx_Init+0x264>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000802:	e002      	b.n	800080a <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f001 fb9d 	bl	8001f44 <HAL_Delay>
	while(HAL_GetTick()<100)
 800080a:	f001 fb8f 	bl	8001f2c <HAL_GetTick>
 800080e:	4603      	mov	r3, r0
 8000810:	2b63      	cmp	r3, #99	; 0x63
 8000812:	d9f7      	bls.n	8000804 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2110      	movs	r1, #16
 8000818:	4890      	ldr	r0, [pc, #576]	; (8000a5c <W25qxx_Init+0x268>)
 800081a:	f002 fadb 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f001 fb90 	bl	8001f44 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
 8000824:	488e      	ldr	r0, [pc, #568]	; (8000a60 <W25qxx_Init+0x26c>)
 8000826:	f006 f853 	bl	80068d0 <puts>
	#endif
	id=W25qxx_ReadID();
 800082a:	f7ff fef1 	bl	8000610 <W25qxx_ReadID>
 800082e:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	488c      	ldr	r0, [pc, #560]	; (8000a64 <W25qxx_Init+0x270>)
 8000834:	f005 ffc6 	bl	80067c4 <iprintf>
	#endif
	switch(id&0x0000FFFF)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	b29b      	uxth	r3, r3
 800083c:	f244 021a 	movw	r2, #16410	; 0x401a
 8000840:	4293      	cmp	r3, r2
 8000842:	d821      	bhi.n	8000888 <W25qxx_Init+0x94>
 8000844:	f244 0211 	movw	r2, #16401	; 0x4011
 8000848:	4293      	cmp	r3, r2
 800084a:	f0c0 8094 	bcc.w	8000976 <W25qxx_Init+0x182>
 800084e:	4a86      	ldr	r2, [pc, #536]	; (8000a68 <W25qxx_Init+0x274>)
 8000850:	441a      	add	r2, r3
 8000852:	2a09      	cmp	r2, #9
 8000854:	f200 808f 	bhi.w	8000976 <W25qxx_Init+0x182>
 8000858:	a301      	add	r3, pc, #4	; (adr r3, 8000860 <W25qxx_Init+0x6c>)
 800085a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800085e:	bf00      	nop
 8000860:	0800094d 	.word	0x0800094d
 8000864:	08000939 	.word	0x08000939
 8000868:	08000925 	.word	0x08000925
 800086c:	08000911 	.word	0x08000911
 8000870:	080008fd 	.word	0x080008fd
 8000874:	080008e9 	.word	0x080008e9
 8000878:	080008d5 	.word	0x080008d5
 800087c:	080008bf 	.word	0x080008bf
 8000880:	080008a9 	.word	0x080008a9
 8000884:	08000893 	.word	0x08000893
 8000888:	f64b 2221 	movw	r2, #47649	; 0xba21
 800088c:	4293      	cmp	r3, r2
 800088e:	d067      	beq.n	8000960 <W25qxx_Init+0x16c>
 8000890:	e071      	b.n	8000976 <W25qxx_Init+0x182>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8000892:	4b71      	ldr	r3, [pc, #452]	; (8000a58 <W25qxx_Init+0x264>)
 8000894:	220a      	movs	r2, #10
 8000896:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8000898:	4b6f      	ldr	r3, [pc, #444]	; (8000a58 <W25qxx_Init+0x264>)
 800089a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
 80008a0:	4872      	ldr	r0, [pc, #456]	; (8000a6c <W25qxx_Init+0x278>)
 80008a2:	f006 f815 	bl	80068d0 <puts>
			#endif
		break;
 80008a6:	e06f      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80008a8:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <W25qxx_Init+0x264>)
 80008aa:	2209      	movs	r2, #9
 80008ac:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80008ae:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <W25qxx_Init+0x264>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
 80008b6:	486e      	ldr	r0, [pc, #440]	; (8000a70 <W25qxx_Init+0x27c>)
 80008b8:	f006 f80a 	bl	80068d0 <puts>
			#endif
		break;
 80008bc:	e064      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80008be:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <W25qxx_Init+0x264>)
 80008c0:	2208      	movs	r2, #8
 80008c2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80008c4:	4b64      	ldr	r3, [pc, #400]	; (8000a58 <W25qxx_Init+0x264>)
 80008c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ca:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
 80008cc:	4869      	ldr	r0, [pc, #420]	; (8000a74 <W25qxx_Init+0x280>)
 80008ce:	f005 ffff 	bl	80068d0 <puts>
			#endif
		break;
 80008d2:	e059      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80008d4:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <W25qxx_Init+0x264>)
 80008d6:	2207      	movs	r2, #7
 80008d8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80008da:	4b5f      	ldr	r3, [pc, #380]	; (8000a58 <W25qxx_Init+0x264>)
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
 80008e0:	4865      	ldr	r0, [pc, #404]	; (8000a78 <W25qxx_Init+0x284>)
 80008e2:	f005 fff5 	bl	80068d0 <puts>
			#endif
		break;
 80008e6:	e04f      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80008e8:	4b5b      	ldr	r3, [pc, #364]	; (8000a58 <W25qxx_Init+0x264>)
 80008ea:	2206      	movs	r2, #6
 80008ec:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80008ee:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <W25qxx_Init+0x264>)
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
 80008f4:	4861      	ldr	r0, [pc, #388]	; (8000a7c <W25qxx_Init+0x288>)
 80008f6:	f005 ffeb 	bl	80068d0 <puts>
			#endif
		break;
 80008fa:	e045      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80008fc:	4b56      	ldr	r3, [pc, #344]	; (8000a58 <W25qxx_Init+0x264>)
 80008fe:	2205      	movs	r2, #5
 8000900:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <W25qxx_Init+0x264>)
 8000904:	2220      	movs	r2, #32
 8000906:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
 8000908:	485d      	ldr	r0, [pc, #372]	; (8000a80 <W25qxx_Init+0x28c>)
 800090a:	f005 ffe1 	bl	80068d0 <puts>
			#endif
		break;
 800090e:	e03b      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8000910:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <W25qxx_Init+0x264>)
 8000912:	2204      	movs	r2, #4
 8000914:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8000916:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <W25qxx_Init+0x264>)
 8000918:	2210      	movs	r2, #16
 800091a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
 800091c:	4859      	ldr	r0, [pc, #356]	; (8000a84 <W25qxx_Init+0x290>)
 800091e:	f005 ffd7 	bl	80068d0 <puts>
			#endif
		break;
 8000922:	e031      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8000924:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <W25qxx_Init+0x264>)
 8000926:	2203      	movs	r2, #3
 8000928:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800092a:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <W25qxx_Init+0x264>)
 800092c:	2208      	movs	r2, #8
 800092e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
 8000930:	4855      	ldr	r0, [pc, #340]	; (8000a88 <W25qxx_Init+0x294>)
 8000932:	f005 ffcd 	bl	80068d0 <puts>
			#endif
		break;
 8000936:	e027      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8000938:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <W25qxx_Init+0x264>)
 800093a:	2202      	movs	r2, #2
 800093c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 800093e:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <W25qxx_Init+0x264>)
 8000940:	2204      	movs	r2, #4
 8000942:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
 8000944:	4851      	ldr	r0, [pc, #324]	; (8000a8c <W25qxx_Init+0x298>)
 8000946:	f005 ffc3 	bl	80068d0 <puts>
			#endif
		break;
 800094a:	e01d      	b.n	8000988 <W25qxx_Init+0x194>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <W25qxx_Init+0x264>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <W25qxx_Init+0x264>)
 8000954:	2202      	movs	r2, #2
 8000956:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
 8000958:	484d      	ldr	r0, [pc, #308]	; (8000a90 <W25qxx_Init+0x29c>)
 800095a:	f005 ffb9 	bl	80068d0 <puts>
			#endif
		break;
 800095e:	e013      	b.n	8000988 <W25qxx_Init+0x194>
		case 0xBA21:	//	N25Q128A
//			w25qxx.ID=N25Q128A;
			w25qxx.ID=W25Q128;
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <W25qxx_Init+0x264>)
 8000962:	2208      	movs	r2, #8
 8000964:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <W25qxx_Init+0x264>)
 8000968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: N25Q128A\r\n");
 800096e:	4849      	ldr	r0, [pc, #292]	; (8000a94 <W25qxx_Init+0x2a0>)
 8000970:	f005 ffae 	bl	80068d0 <puts>
			#endif
		break;
 8000974:	e008      	b.n	8000988 <W25qxx_Init+0x194>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
 8000976:	4848      	ldr	r0, [pc, #288]	; (8000a98 <W25qxx_Init+0x2a4>)
 8000978:	f005 ffaa 	bl	80068d0 <puts>
				#endif
			w25qxx.Lock=0;	
 800097c:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <W25qxx_Init+0x264>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8000984:	2300      	movs	r3, #0
 8000986:	e063      	b.n	8000a50 <W25qxx_Init+0x25c>
				
	}		
	w25qxx.PageSize=256;
 8000988:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <W25qxx_Init+0x264>)
 800098a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8000990:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <W25qxx_Init+0x264>)
 8000992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000996:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <W25qxx_Init+0x264>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <W25qxx_Init+0x264>)
 80009a0:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <W25qxx_Init+0x264>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a2c      	ldr	r2, [pc, #176]	; (8000a58 <W25qxx_Init+0x264>)
 80009a8:	6912      	ldr	r2, [r2, #16]
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	4a2a      	ldr	r2, [pc, #168]	; (8000a58 <W25qxx_Init+0x264>)
 80009b0:	8952      	ldrh	r2, [r2, #10]
 80009b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80009b6:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <W25qxx_Init+0x264>)
 80009b8:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <W25qxx_Init+0x264>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <W25qxx_Init+0x264>)
 80009c2:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <W25qxx_Init+0x264>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <W25qxx_Init+0x264>)
 80009ca:	6912      	ldr	r2, [r2, #16]
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	0a9b      	lsrs	r3, r3, #10
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <W25qxx_Init+0x264>)
 80009d4:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80009d6:	f7ff fe51 	bl	800067c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fe9a 	bl	8000714 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80009e0:	2002      	movs	r0, #2
 80009e2:	f7ff fe97 	bl	8000714 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f7ff fe94 	bl	8000714 <W25qxx_ReadStatusRegister>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Page Size: %d Bytes\r\n",w25qxx.PageSize);
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <W25qxx_Init+0x264>)
 80009ee:	895b      	ldrh	r3, [r3, #10]
 80009f0:	4619      	mov	r1, r3
 80009f2:	482a      	ldr	r0, [pc, #168]	; (8000a9c <W25qxx_Init+0x2a8>)
 80009f4:	f005 fee6 	bl	80067c4 <iprintf>
	printf("w25qxx Page Count: %d\r\n",w25qxx.PageCount);
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <W25qxx_Init+0x264>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <W25qxx_Init+0x2ac>)
 8000a00:	f005 fee0 	bl	80067c4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n",w25qxx.SectorSize);
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <W25qxx_Init+0x264>)
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <W25qxx_Init+0x2b0>)
 8000a0c:	f005 feda 	bl	80067c4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n",w25qxx.SectorCount);
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <W25qxx_Init+0x264>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <W25qxx_Init+0x2b4>)
 8000a18:	f005 fed4 	bl	80067c4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <W25qxx_Init+0x264>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <W25qxx_Init+0x2b8>)
 8000a24:	f005 fece 	bl	80067c4 <iprintf>
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <W25qxx_Init+0x264>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <W25qxx_Init+0x2bc>)
 8000a30:	f005 fec8 	bl	80067c4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <W25qxx_Init+0x264>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <W25qxx_Init+0x2c0>)
 8000a3c:	f005 fec2 	bl	80067c4 <iprintf>
	printf("w25qxx Init Done\r\n");
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <W25qxx_Init+0x2c4>)
 8000a42:	f005 ff45 	bl	80068d0 <puts>
	#endif
	w25qxx.Lock=0;	
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <W25qxx_Init+0x264>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000a4e:	2301      	movs	r3, #1
}	
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000dc 	.word	0x200000dc
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	08007624 	.word	0x08007624
 8000a64:	0800763c 	.word	0x0800763c
 8000a68:	ffffbfef 	.word	0xffffbfef
 8000a6c:	08007650 	.word	0x08007650
 8000a70:	08007668 	.word	0x08007668
 8000a74:	08007680 	.word	0x08007680
 8000a78:	08007698 	.word	0x08007698
 8000a7c:	080076b0 	.word	0x080076b0
 8000a80:	080076c8 	.word	0x080076c8
 8000a84:	080076e0 	.word	0x080076e0
 8000a88:	080076f8 	.word	0x080076f8
 8000a8c:	08007710 	.word	0x08007710
 8000a90:	08007728 	.word	0x08007728
 8000a94:	08007740 	.word	0x08007740
 8000a98:	08007758 	.word	0x08007758
 8000a9c:	0800776c 	.word	0x0800776c
 8000aa0:	0800778c 	.word	0x0800778c
 8000aa4:	080077a4 	.word	0x080077a4
 8000aa8:	080077c4 	.word	0x080077c4
 8000aac:	080077e0 	.word	0x080077e0
 8000ab0:	08007800 	.word	0x08007800
 8000ab4:	0800781c 	.word	0x0800781c
 8000ab8:	0800783c 	.word	0x0800783c

08000abc <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8000ac4:	e002      	b.n	8000acc <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f001 fa3c 	bl	8001f44 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <W25qxx_EraseBlock+0xd0>)
 8000ace:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d0f7      	beq.n	8000ac6 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <W25qxx_EraseBlock+0xd0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	482b      	ldr	r0, [pc, #172]	; (8000b90 <W25qxx_EraseBlock+0xd4>)
 8000ae2:	f005 fe6f 	bl	80067c4 <iprintf>
	W25qxx_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f001 fa2c 	bl	8001f44 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();	
 8000aec:	f001 fa1e 	bl	8001f2c <HAL_GetTick>
 8000af0:	60f8      	str	r0, [r7, #12]
	#endif
	W25qxx_WaitForWriteEnd();
 8000af2:	f7ff fe55 	bl	80007a0 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <W25qxx_EraseBlock+0xd0>)
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8000b04:	f7ff fdf0 	bl	80006e8 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4821      	ldr	r0, [pc, #132]	; (8000b94 <W25qxx_EraseBlock+0xd8>)
 8000b0e:	f002 f961 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8000b12:	20d8      	movs	r0, #216	; 0xd8
 8000b14:	f7ff fd66 	bl	80005e4 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <W25qxx_EraseBlock+0xd0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d905      	bls.n	8000b2c <W25qxx_EraseBlock+0x70>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	0e1b      	lsrs	r3, r3, #24
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd5c 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	0c1b      	lsrs	r3, r3, #16
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd56 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd50 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fd4b 	bl	80005e4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2110      	movs	r1, #16
 8000b52:	4810      	ldr	r0, [pc, #64]	; (8000b94 <W25qxx_EraseBlock+0xd8>)
 8000b54:	f002 f93e 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000b58:	f7ff fe22 	bl	80007a0 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
 8000b5c:	f001 f9e6 	bl	8001f2c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <W25qxx_EraseBlock+0xdc>)
 8000b6a:	f005 fe2b 	bl	80067c4 <iprintf>
	W25qxx_Delay(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f001 f9e8 	bl	8001f44 <HAL_Delay>
	#endif
	W25qxx_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f001 f9e5 	bl	8001f44 <HAL_Delay>
	w25qxx.Lock=0;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <W25qxx_EraseBlock+0xd0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	080078e0 	.word	0x080078e0
 8000b94:	40021000 	.word	0x40021000
 8000b98:	08007900 	.word	0x08007900

08000b9c <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <W25qxx_BlockToPage+0x28>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	fb02 f303 	mul.w	r3, r2, r3
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <W25qxx_BlockToPage+0x28>)
 8000bb0:	8952      	ldrh	r2, [r2, #10]
 8000bb2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000dc 	.word	0x200000dc

08000bc8 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000bd6:	e002      	b.n	8000bde <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f001 f9b3 	bl	8001f44 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000bde:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000be0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d0f7      	beq.n	8000bd8 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8000be8:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a4f      	ldr	r2, [pc, #316]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000bf8:	8952      	ldrh	r2, [r2, #10]
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d802      	bhi.n	8000c04 <W25qxx_WritePage+0x3c>
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d105      	bne.n	8000c10 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8000c04:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000c06:	895b      	ldrh	r3, [r3, #10]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000c18:	8952      	ldrh	r2, [r2, #10]
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d905      	bls.n	8000c2a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8000c1e:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000c20:	895b      	ldrh	r3, [r3, #10]
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	4841      	ldr	r0, [pc, #260]	; (8000d38 <W25qxx_WritePage+0x170>)
 8000c32:	f005 fdc7 	bl	80067c4 <iprintf>
	W25qxx_Delay(100);
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f001 f984 	bl	8001f44 <HAL_Delay>
	uint32_t	StartTime=HAL_GetTick();
 8000c3c:	f001 f976 	bl	8001f2c <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]
	#endif	
	W25qxx_WaitForWriteEnd();
 8000c42:	f7ff fdad 	bl	80007a0 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8000c46:	f7ff fd4f 	bl	80006e8 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	483b      	ldr	r0, [pc, #236]	; (8000d3c <W25qxx_WritePage+0x174>)
 8000c50:	f002 f8c0 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff fcc5 	bl	80005e4 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000c5c:	895b      	ldrh	r3, [r3, #10]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	fb02 f303 	mul.w	r3, r2, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8000c6c:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d905      	bls.n	8000c80 <W25qxx_WritePage+0xb8>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	0e1b      	lsrs	r3, r3, #24
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fcb2 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fcac 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fca6 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fca1 	bl	80005e4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	68f9      	ldr	r1, [r7, #12]
 8000caa:	4825      	ldr	r0, [pc, #148]	; (8000d40 <W25qxx_WritePage+0x178>)
 8000cac:	f003 fb65 	bl	800437a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	4821      	ldr	r0, [pc, #132]	; (8000d3c <W25qxx_WritePage+0x174>)
 8000cb6:	f002 f88d 	bl	8002dd4 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000cba:	f7ff fd71 	bl	80007a0 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8000cbe:	f001 f935 	bl	8001f2c <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e018      	b.n	8000d02 <W25qxx_WritePage+0x13a>
	{
		if((i%8==0)&&(i>2))
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d108      	bne.n	8000cec <W25qxx_WritePage+0x124>
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d905      	bls.n	8000cec <W25qxx_WritePage+0x124>
		{
			printf("\r\n");
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <W25qxx_WritePage+0x17c>)
 8000ce2:	f005 fdf5 	bl	80068d0 <puts>
			W25qxx_Delay(10);			
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f001 f92c 	bl	8001f44 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4814      	ldr	r0, [pc, #80]	; (8000d48 <W25qxx_WritePage+0x180>)
 8000cf8:	f005 fd64 	bl	80067c4 <iprintf>
	for(uint32_t i=0;i<NumByteToWrite_up_to_PageSize ; i++)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3e2      	bcc.n	8000cd0 <W25qxx_WritePage+0x108>
	}	
	printf("\r\n");
 8000d0a:	480e      	ldr	r0, [pc, #56]	; (8000d44 <W25qxx_WritePage+0x17c>)
 8000d0c:	f005 fde0 	bl	80068d0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <W25qxx_WritePage+0x184>)
 8000d14:	f005 fd56 	bl	80067c4 <iprintf>
	W25qxx_Delay(100);
 8000d18:	2064      	movs	r0, #100	; 0x64
 8000d1a:	f001 f913 	bl	8001f44 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f001 f910 	bl	8001f44 <HAL_Delay>
	w25qxx.Lock=0;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <W25qxx_WritePage+0x16c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200000dc 	.word	0x200000dc
 8000d38:	08007b1c 	.word	0x08007b1c
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	2000023c 	.word	0x2000023c
 8000d44:	08007b58 	.word	0x08007b58
 8000d48:	08007b5c 	.word	0x08007b5c
 8000d4c:	08007b64 	.word	0x08007b64

08000d50 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d802      	bhi.n	8000d6e <W25qxx_WriteBlock+0x1e>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 8000d6e:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	4830      	ldr	r0, [pc, #192]	; (8000e3c <W25qxx_WriteBlock+0xec>)
 8000d7c:	f005 fd22 	bl	80067c4 <iprintf>
	W25qxx_Delay(100);
 8000d80:	2064      	movs	r0, #100	; 0x64
 8000d82:	f001 f8df 	bl	8001f44 <HAL_Delay>
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d306      	bcc.n	8000d9e <W25qxx_WriteBlock+0x4e>
	{
		#if (_W25QXX_DEBUG==1)
		printf("---w25qxx WriteBlock Faild!\r\n");
 8000d90:	482b      	ldr	r0, [pc, #172]	; (8000e40 <W25qxx_WriteBlock+0xf0>)
 8000d92:	f005 fd9d 	bl	80068d0 <puts>
		W25qxx_Delay(100);
 8000d96:	2064      	movs	r0, #100	; 0x64
 8000d98:	f001 f8d4 	bl	8001f44 <HAL_Delay>
		#endif	
		return;
 8000d9c:	e048      	b.n	8000e30 <W25qxx_WriteBlock+0xe0>
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	441a      	add	r2, r3
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d905      	bls.n	8000db8 <W25qxx_WriteBlock+0x68>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000dae:	699a      	ldr	r2, [r3, #24]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	e001      	b.n	8000dbc <W25qxx_WriteBlock+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8000dbc:	68b8      	ldr	r0, [r7, #8]
 8000dbe:	f7ff feed 	bl	8000b9c <W25qxx_BlockToPage>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000dc6:	895b      	ldrh	r3, [r3, #10]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000dd6:	895b      	ldrh	r3, [r3, #10]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000de0:	fb01 f202 	mul.w	r2, r1, r2
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	69f9      	ldr	r1, [r7, #28]
 8000dee:	68f8      	ldr	r0, [r7, #12]
 8000df0:	f7ff feea 	bl	8000bc8 <W25qxx_WritePage>
		StartPage++;
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	3301      	adds	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000dfc:	895b      	ldrh	r3, [r3, #10]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	1a9a      	subs	r2, r3, r2
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	4413      	add	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <W25qxx_WriteBlock+0xe8>)
 8000e0c:	895b      	ldrh	r3, [r3, #10]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dce1      	bgt.n	8000de8 <W25qxx_WriteBlock+0x98>
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <W25qxx_WriteBlock+0xf4>)
 8000e26:	f005 fd53 	bl	80068d0 <puts>
	W25qxx_Delay(100);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f001 f88a 	bl	8001f44 <HAL_Delay>
	#endif	
}
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000dc 	.word	0x200000dc
 8000e3c:	08007c04 	.word	0x08007c04
 8000e40:	08007c44 	.word	0x08007c44
 8000e44:	08007c64 	.word	0x08007c64

08000e48 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8000e54:	e002      	b.n	8000e5c <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f001 f874 	bl	8001f44 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <W25qxx_ReadBytes+0x114>)
 8000e5e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d0f7      	beq.n	8000e56 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8000e66:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <W25qxx_ReadBytes+0x114>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
 8000e6e:	f001 f85d 	bl	8001f2c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	4839      	ldr	r0, [pc, #228]	; (8000f60 <W25qxx_ReadBytes+0x118>)
 8000e7a:	f005 fca3 	bl	80067c4 <iprintf>
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	4838      	ldr	r0, [pc, #224]	; (8000f64 <W25qxx_ReadBytes+0x11c>)
 8000e84:	f001 ffa6 	bl	8002dd4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8000e88:	200b      	movs	r0, #11
 8000e8a:	f7ff fbab 	bl	80005e4 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <W25qxx_ReadBytes+0x114>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d905      	bls.n	8000ea2 <W25qxx_ReadBytes+0x5a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0e1b      	lsrs	r3, r3, #24
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fba1 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	0c1b      	lsrs	r3, r3, #16
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb9b 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fb95 	bl	80005e4 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fb90 	bl	80005e4 <W25qxx_Spi>
	W25qxx_Spi(0);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fb8d 	bl	80005e4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ed2:	68f9      	ldr	r1, [r7, #12]
 8000ed4:	4824      	ldr	r0, [pc, #144]	; (8000f68 <W25qxx_ReadBytes+0x120>)
 8000ed6:	f003 fbbe 	bl	8004656 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2110      	movs	r1, #16
 8000ede:	4821      	ldr	r0, [pc, #132]	; (8000f64 <W25qxx_ReadBytes+0x11c>)
 8000ee0:	f001 ff78 	bl	8002dd4 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	StartTime = HAL_GetTick()-StartTime; 
 8000ee4:	f001 f822 	bl	8001f2c <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e018      	b.n	8000f28 <W25qxx_ReadBytes+0xe0>
	{
		if((i%8==0)&&(i>2))
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d108      	bne.n	8000f12 <W25qxx_ReadBytes+0xca>
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d905      	bls.n	8000f12 <W25qxx_ReadBytes+0xca>
		{
			printf("\r\n");
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <W25qxx_ReadBytes+0x124>)
 8000f08:	f005 fce2 	bl	80068d0 <puts>
			W25qxx_Delay(10);
 8000f0c:	200a      	movs	r0, #10
 8000f0e:	f001 f819 	bl	8001f44 <HAL_Delay>
		}
		printf("0x%02X,",pBuffer[i]);		
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <W25qxx_ReadBytes+0x128>)
 8000f1e:	f005 fc51 	bl	80067c4 <iprintf>
	for(uint32_t i=0;i<NumByteToRead ; i++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d3e2      	bcc.n	8000ef6 <W25qxx_ReadBytes+0xae>
	}
	printf("\r\n");
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <W25qxx_ReadBytes+0x124>)
 8000f32:	f005 fccd 	bl	80068d0 <puts>
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
 8000f36:	6939      	ldr	r1, [r7, #16]
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <W25qxx_ReadBytes+0x12c>)
 8000f3a:	f005 fc43 	bl	80067c4 <iprintf>
	W25qxx_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f001 f800 	bl	8001f44 <HAL_Delay>
	#endif	
	W25qxx_Delay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 fffd 	bl	8001f44 <HAL_Delay>
	w25qxx.Lock=0;
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <W25qxx_ReadBytes+0x114>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000dc 	.word	0x200000dc
 8000f60:	08007cd8 	.word	0x08007cd8
 8000f64:	40021000 	.word	0x40021000
 8000f68:	2000023c 	.word	0x2000023c
 8000f6c:	08007b58 	.word	0x08007b58
 8000f70:	08007b5c 	.word	0x08007b5c
 8000f74:	08007d10 	.word	0x08007d10

08000f78 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <MX_CRC_Init+0x40>)
 8000f80:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_CRC_Init+0x3c>)
 8000fa2:	f001 f905 	bl	80021b0 <HAL_CRC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fac:	f000 fa46 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000104 	.word	0x20000104
 8000fb8:	40023000 	.word	0x40023000

08000fbc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_CRC_MspInit+0x38>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_CRC_MspInit+0x3c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <HAL_CRC_MspInit+0x3c>)
 8000fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_CRC_MspInit+0x3c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023000 	.word	0x40023000
 8000ff8:	40023800 	.word	0x40023800

08000ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_DMA_Init+0x38>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <MX_DMA_Init+0x38>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_DMA_Init+0x38>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2044      	movs	r0, #68	; 0x44
 8001020:	f001 f88f 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001024:	2044      	movs	r0, #68	; 0x44
 8001026:	f001 f8a8 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <MX_GPIO_Init+0x128>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a43      	ldr	r2, [pc, #268]	; (8001160 <MX_GPIO_Init+0x128>)
 8001054:	f043 0310 	orr.w	r3, r3, #16
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <MX_GPIO_Init+0x128>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <MX_GPIO_Init+0x128>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a3d      	ldr	r2, [pc, #244]	; (8001160 <MX_GPIO_Init+0x128>)
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <MX_GPIO_Init+0x128>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <MX_GPIO_Init+0x128>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <MX_GPIO_Init+0x128>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b35      	ldr	r3, [pc, #212]	; (8001160 <MX_GPIO_Init+0x128>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <MX_GPIO_Init+0x128>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <MX_GPIO_Init+0x128>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <MX_GPIO_Init+0x128>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_GPIO_Init+0x128>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <MX_GPIO_Init+0x128>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_GPIO_Init+0x128>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_GPIO_Init+0x128>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a25      	ldr	r2, [pc, #148]	; (8001160 <MX_GPIO_Init+0x128>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <MX_GPIO_Init+0x128>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80010de:	2200      	movs	r2, #0
 80010e0:	f647 0110 	movw	r1, #30736	; 0x7810
 80010e4:	481f      	ldr	r0, [pc, #124]	; (8001164 <MX_GPIO_Init+0x12c>)
 80010e6:	f001 fe75 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2110      	movs	r1, #16
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_GPIO_Init+0x130>)
 80010f0:	f001 fe70 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80010fa:	481c      	ldr	r0, [pc, #112]	; (800116c <MX_GPIO_Init+0x134>)
 80010fc:	f001 fe6a 	bl	8002dd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001100:	f647 0310 	movw	r3, #30736	; 0x7810
 8001104:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <MX_GPIO_Init+0x12c>)
 800111a:	f001 fcaf 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111e:	2310      	movs	r3, #16
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_GPIO_Init+0x130>)
 8001136:	f001 fca1 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800113a:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800113e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_GPIO_Init+0x134>)
 8001154:	f001 fc92 	bl	8002a7c <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	; 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40021000 	.word	0x40021000
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400

08001170 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001174:	f3bf 8f4f 	dsb	sy
}
 8001178:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800117a:	f3bf 8f6f 	isb	sy
}
 800117e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <SCB_EnableICache+0x48>)
 8001182:	2200      	movs	r2, #0
 8001184:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001188:	f3bf 8f4f 	dsb	sy
}
 800118c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800118e:	f3bf 8f6f 	isb	sy
}
 8001192:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <SCB_EnableICache+0x48>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <SCB_EnableICache+0x48>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011a0:	f3bf 8f4f 	dsb	sy
}
 80011a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011a6:	f3bf 8f6f 	isb	sy
}
 80011aa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <SCB_EnableDCache+0x84>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011ca:	f3bf 8f4f 	dsb	sy
}
 80011ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <SCB_EnableDCache+0x84>)
 80011d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011d6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	0b5b      	lsrs	r3, r3, #13
 80011dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	015a      	lsls	r2, r3, #5
 80011f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80011f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011fa:	4911      	ldr	r1, [pc, #68]	; (8001240 <SCB_EnableDCache+0x84>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	60ba      	str	r2, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1ef      	bne.n	80011ec <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e5a      	subs	r2, r3, #1
 8001210:	60fa      	str	r2, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1e5      	bne.n	80011e2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001216:	f3bf 8f4f 	dsb	sy
}
 800121a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <SCB_EnableDCache+0x84>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <SCB_EnableDCache+0x84>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001228:	f3bf 8f4f 	dsb	sy
}
 800122c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800122e:	f3bf 8f6f 	isb	sy
}
 8001232:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800124c:	1d39      	adds	r1, r7, #4
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2201      	movs	r2, #1
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <__io_putchar+0x20>)
 8001256:	f004 f88b 	bl	8005370 <HAL_UART_Transmit>
return ch;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000033c 	.word	0x2000033c

08001268 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]

/* Clear the Overrun flag just before receiving the first character */
__HAL_UART_CLEAR_OREFLAG(&huart1);
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <__io_getchar+0x38>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2208      	movs	r2, #8
 8001278:	621a      	str	r2, [r3, #32]
/* Wait for reception of a character on the USART RX line and echo this

character on console */
HAL_UART_Receive (&debugPort, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800127a:	1df9      	adds	r1, r7, #7
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2201      	movs	r2, #1
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <__io_getchar+0x38>)
 8001284:	f004 f8f7 	bl	8005476 <HAL_UART_Receive>
HAL_UART_Transmit(&debugPort, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001288:	1df9      	adds	r1, r7, #7
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	2201      	movs	r2, #1
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <__io_getchar+0x38>)
 8001292:	f004 f86d 	bl	8005370 <HAL_UART_Transmit>
return ch;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000033c 	.word	0x2000033c

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80012ae:	f7ff ff5f 	bl	8001170 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80012b2:	f7ff ff83 	bl	80011bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f000 fde8 	bl	8001e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f851 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f7ff febb 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c2:	f7ff fe9b 	bl	8000ffc <MX_DMA_Init>
  MX_SPI4_Init();
 80012c6:	f000 f9e3 	bl	8001690 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 80012ca:	f000 fc79 	bl	8001bc0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80012ce:	f000 f969 	bl	80015a4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80012d2:	f000 f9a5 	bl	8001620 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 80012d6:	f000 f8b7 	bl	8001448 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 80012da:	f000 fca1 	bl	8001c20 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 80012de:	f000 fc17 	bl	8001b10 <MX_TIM14_Init>
  MX_CRC_Init();
 80012e2:	f7ff fe49 	bl	8000f78 <MX_CRC_Init>
  MX_TIM13_Init();
 80012e6:	f000 fbef 	bl	8001ac8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 80012ea:	f7ff fa83 	bl	80007f4 <W25qxx_Init>

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 80012ee:	4818      	ldr	r0, [pc, #96]	; (8001350 <main+0xac>)
 80012f0:	f005 faee 	bl	80068d0 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	char readBytes[5000]="ABC";
 80012f4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80012f8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <main+0xb0>)
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	3304      	adds	r3, #4
 8001302:	f241 3284 	movw	r2, #4996	; 0x1384
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f005 f973 	bl	80065f4 <memset>
  	W25qxx_EraseBlock(0*0x10000); HAL_Delay(1000);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fbd4 	bl	8000abc <W25qxx_EraseBlock>
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f000 fe14 	bl	8001f44 <HAL_Delay>
  	W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );	HAL_Delay(10);
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <main+0xb4>)
 800131e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001322:	f103 0308 	add.w	r3, r3, #8
 8001326:	443b      	add	r3, r7
 8001328:	2250      	movs	r2, #80	; 0x50
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fd8b 	bl	8000e48 <W25qxx_ReadBytes>
 8001332:	200a      	movs	r0, #10
 8001334:	f000 fe06 	bl	8001f44 <HAL_Delay>
  	W25qxx_WriteBlock(Target, 0*0x10000, 0, sizeof(Target)); HAL_Delay(1000);
 8001338:	2350      	movs	r3, #80	; 0x50
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <main+0xb8>)
 8001340:	f7ff fd06 	bl	8000d50 <W25qxx_WriteBlock>
 8001344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001348:	f000 fdfc 	bl	8001f44 <HAL_Delay>

  while (1)
 800134c:	e7fe      	b.n	800134c <main+0xa8>
 800134e:	bf00      	nop
 8001350:	08007e88 	.word	0x08007e88
 8001354:	00434241 	.word	0x00434241
 8001358:	ffffec78 	.word	0xffffec78
 800135c:	20000000 	.word	0x20000000

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2234      	movs	r2, #52	; 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 f940 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <SystemClock_Config+0xd4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <SystemClock_Config+0xd4>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <SystemClock_Config+0xd4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <SystemClock_Config+0xd8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a25      	ldr	r2, [pc, #148]	; (8001438 <SystemClock_Config+0xd8>)
 80013a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <SystemClock_Config+0xd8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013bc:	2310      	movs	r3, #16
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013cc:	23d8      	movs	r3, #216	; 0xd8
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d8:	2302      	movs	r3, #2
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fe23 	bl	800302c <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013ec:	f000 f826 	bl	800143c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013f0:	f001 fd0a 	bl	8002e08 <HAL_PWREx_EnableOverDrive>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013fa:	f000 f81f 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2302      	movs	r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2107      	movs	r1, #7
 800141c:	4618      	mov	r0, r3
 800141e:	f002 f8b3 	bl	8003588 <HAL_RCC_ClockConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001428:	f000 f808 	bl	800143c <Error_Handler>
  }
}
 800142c:	bf00      	nop
 800142e:	3750      	adds	r7, #80	; 0x50
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_QUADSPI_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_QUADSPI_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_QUADSPI_Init+0x50>)
 8001454:	22ff      	movs	r2, #255	; 0xff
 8001456:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_QUADSPI_Init+0x50>)
 800145a:	2201      	movs	r2, #1
 800145c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_QUADSPI_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_QUADSPI_Init+0x50>)
 8001466:	2201      	movs	r2, #1
 8001468:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_QUADSPI_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_QUADSPI_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_QUADSPI_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_QUADSPI_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_QUADSPI_Init+0x50>)
 8001484:	f001 fd10 	bl	8002ea8 <HAL_QSPI_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800148e:	f7ff ffd5 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000128 	.word	0x20000128
 800149c:	a0001000 	.word	0xa0001000

080014a0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <HAL_QSPI_MspInit+0xf4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d164      	bne.n	800158c <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	4a34      	ldr	r2, [pc, #208]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014e0:	f043 0320 	orr.w	r3, r3, #32
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a28      	ldr	r2, [pc, #160]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_QSPI_MspInit+0xf8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800150a:	23c0      	movs	r3, #192	; 0xc0
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800151a:	2309      	movs	r3, #9
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <HAL_QSPI_MspInit+0xfc>)
 8001526:	f001 faa9 	bl	8002a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800153c:	230a      	movs	r3, #10
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <HAL_QSPI_MspInit+0xfc>)
 8001548:	f001 fa98 	bl	8002a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800154c:	2304      	movs	r3, #4
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800155c:	2309      	movs	r3, #9
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <HAL_QSPI_MspInit+0x100>)
 8001568:	f001 fa88 	bl	8002a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800156c:	2340      	movs	r3, #64	; 0x40
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800157c:	230a      	movs	r3, #10
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <HAL_QSPI_MspInit+0x100>)
 8001588:	f001 fa78 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	a0001000 	.word	0xa0001000
 8001598:	40023800 	.word	0x40023800
 800159c:	40021400 	.word	0x40021400
 80015a0:	40020400 	.word	0x40020400

080015a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_SPI1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_SPI1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_SPI1_Init+0x74>)
 80015b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_SPI1_Init+0x74>)
 80015be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_SPI1_Init+0x74>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_SPI1_Init+0x74>)
 80015da:	2210      	movs	r2, #16
 80015dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_SPI1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_SPI1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_SPI1_Init+0x74>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_SPI1_Init+0x74>)
 80015fe:	2208      	movs	r2, #8
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_SPI1_Init+0x74>)
 8001604:	f002 fe0e 	bl	8004224 <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800160e:	f7ff ff15 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000174 	.word	0x20000174
 800161c:	40013000 	.word	0x40013000

08001620 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_SPI3_Init+0x68>)
 8001626:	4a19      	ldr	r2, [pc, #100]	; (800168c <MX_SPI3_Init+0x6c>)
 8001628:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_SPI3_Init+0x68>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_SPI3_Init+0x68>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_SPI3_Init+0x68>)
 8001638:	f44f 7240 	mov.w	r2, #768	; 0x300
 800163c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_SPI3_Init+0x68>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_SPI3_Init+0x68>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_SPI3_Init+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <MX_SPI3_Init+0x68>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_SPI3_Init+0x68>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_SPI3_Init+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_SPI3_Init+0x68>)
 8001664:	2207      	movs	r2, #7
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_SPI3_Init+0x68>)
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_SPI3_Init+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_SPI3_Init+0x68>)
 8001676:	f002 fdd5 	bl	8004224 <HAL_SPI_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001680:	f7ff fedc 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200001d8 	.word	0x200001d8
 800168c:	40003c00 	.word	0x40003c00

08001690 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_SPI4_Init+0x74>)
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <MX_SPI4_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_SPI4_Init+0x74>)
 800169c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_SPI4_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SPI4_Init+0x74>)
 80016aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_SPI4_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_SPI4_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI4_Init+0x74>)
 80016be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_SPI4_Init+0x74>)
 80016c6:	2228      	movs	r2, #40	; 0x28
 80016c8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI4_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI4_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_SPI4_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI4_Init+0x74>)
 80016de:	2207      	movs	r2, #7
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_SPI4_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI4_Init+0x74>)
 80016ea:	2208      	movs	r2, #8
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_SPI4_Init+0x74>)
 80016f0:	f002 fd98 	bl	8004224 <HAL_SPI_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f7ff fe9f 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000023c 	.word	0x2000023c
 8001708:	40013400 	.word	0x40013400

0800170c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a54      	ldr	r2, [pc, #336]	; (800187c <HAL_SPI_MspInit+0x170>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d128      	bne.n	8001780 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172e:	4b54      	ldr	r3, [pc, #336]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a53      	ldr	r2, [pc, #332]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_SPI_MspInit+0x174>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b4e      	ldr	r3, [pc, #312]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_SPI_MspInit+0x174>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800175e:	23e0      	movs	r3, #224	; 0xe0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176e:	2305      	movs	r3, #5
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4842      	ldr	r0, [pc, #264]	; (8001884 <HAL_SPI_MspInit+0x178>)
 800177a:	f001 f97f 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800177e:	e078      	b.n	8001872 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a40      	ldr	r2, [pc, #256]	; (8001888 <HAL_SPI_MspInit+0x17c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d146      	bne.n	8001818 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_SPI_MspInit+0x174>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a3c      	ldr	r2, [pc, #240]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_SPI_MspInit+0x174>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a36      	ldr	r2, [pc, #216]	; (8001880 <HAL_SPI_MspInit+0x174>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_SPI_MspInit+0x174>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_SPI_MspInit+0x174>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <HAL_SPI_MspInit+0x174>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_SPI_MspInit+0x174>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e4:	2306      	movs	r3, #6
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4825      	ldr	r0, [pc, #148]	; (8001884 <HAL_SPI_MspInit+0x178>)
 80017f0:	f001 f944 	bl	8002a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001806:	2306      	movs	r3, #6
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	4619      	mov	r1, r3
 8001810:	481e      	ldr	r0, [pc, #120]	; (800188c <HAL_SPI_MspInit+0x180>)
 8001812:	f001 f933 	bl	8002a7c <HAL_GPIO_Init>
}
 8001816:	e02c      	b.n	8001872 <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_SPI_MspInit+0x184>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d127      	bne.n	8001872 <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001828:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x174>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_SPI_MspInit+0x174>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001862:	2305      	movs	r3, #5
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <HAL_SPI_MspInit+0x188>)
 800186e:	f001 f905 	bl	8002a7c <HAL_GPIO_Init>
}
 8001872:	bf00      	nop
 8001874:	3738      	adds	r7, #56	; 0x38
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013000 	.word	0x40013000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000
 8001888:	40003c00 	.word	0x40003c00
 800188c:	40020800 	.word	0x40020800
 8001890:	40013400 	.word	0x40013400
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 faea 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <USART1_IRQHandler+0x10>)
 800193a:	f003 fe61 	bl	8005600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000033c 	.word	0x2000033c

08001948 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA2_Stream5_IRQHandler+0x10>)
 800194e:	f000 fe59 	bl	8002604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000044c 	.word	0x2000044c

0800195c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00a      	b.n	8001984 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196e:	f7ff fc7b 	bl	8001268 <__io_getchar>
 8001972:	4601      	mov	r1, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf0      	blt.n	800196e <_read+0x12>
	}

return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e009      	b.n	80019bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fc47 	bl	8001244 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf1      	blt.n	80019a8 <_write+0x12>
	}
	return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_close>:

int _close(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f6:	605a      	str	r2, [r3, #4]
	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_isatty>:

int _isatty(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
	return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f004 fd9a 	bl	80065a0 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20080000 	.word	0x20080000
 8001a98:	00000800 	.word	0x00000800
 8001a9c:	200002a0 	.word	0x200002a0
 8001aa0:	200004c0 	.word	0x200004c0

08001aa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001ace:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <MX_TIM13_Init+0x44>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001ad4:	224f      	movs	r2, #79	; 0x4f
 8001ad6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_TIM13_Init+0x40>)
 8001af4:	f003 faf6 	bl	80050e4 <HAL_TIM_Base_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001afe:	f7ff fc9d 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002a4 	.word	0x200002a4
 8001b0c:	40001c00 	.word	0x40001c00

08001b10 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <MX_TIM14_Init+0x44>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b1c:	224f      	movs	r2, #79	; 0x4f
 8001b1e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_TIM14_Init+0x40>)
 8001b3c:	f003 fad2 	bl	80050e4 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001b46:	f7ff fc79 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002f0 	.word	0x200002f0
 8001b54:	40002000 	.word	0x40002000

08001b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10c      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_TIM_Base_MspInit+0x60>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_TIM_Base_MspInit+0x60>)
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_TIM_Base_MspInit+0x60>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001b82:	e010      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM14)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_TIM_Base_MspInit+0x64>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_TIM_Base_MspInit+0x60>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_TIM_Base_MspInit+0x60>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_TIM_Base_MspInit+0x60>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40001c00 	.word	0x40001c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40002000 	.word	0x40002000

08001bc0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <MX_USART1_UART_Init+0x5c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001c04:	f003 fb66 	bl	80052d4 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f7ff fc15 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000033c 	.word	0x2000033c
 8001c1c:	40011000 	.word	0x40011000

08001c20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <MX_USART2_UART_Init+0x5c>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_USART2_UART_Init+0x58>)
 8001c64:	f003 fb36 	bl	80052d4 <HAL_UART_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c6e:	f7ff fbe5 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200003c4 	.word	0x200003c4
 8001c7c:	40004400 	.word	0x40004400

08001c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0b0      	sub	sp, #192	; 0xc0
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	2290      	movs	r2, #144	; 0x90
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fca7 	bl	80065f4 <memset>
  if(uartHandle->Instance==USART1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a5d      	ldr	r2, [pc, #372]	; (8001e20 <HAL_UART_MspInit+0x1a0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d173      	bne.n	8001d98 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cb0:	2340      	movs	r3, #64	; 0x40
 8001cb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fe89 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc8:	f7ff fbb8 	bl	800143c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d16:	2307      	movs	r3, #7
 8001d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d20:	4619      	mov	r1, r3
 8001d22:	4841      	ldr	r0, [pc, #260]	; (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001d24:	f000 feaa 	bl	8002a7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d2a:	4a41      	ldr	r2, [pc, #260]	; (8001e30 <HAL_UART_MspInit+0x1b0>)
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d6a:	4830      	ldr	r0, [pc, #192]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d6c:	f000 fb0a 	bl	8002384 <HAL_DMA_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001d76:	f7ff fb61 	bl	800143c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d7e:	675a      	str	r2, [r3, #116]	; 0x74
 8001d80:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_UART_MspInit+0x1ac>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2025      	movs	r0, #37	; 0x25
 8001d8c:	f000 f9d9 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d90:	2025      	movs	r0, #37	; 0x25
 8001d92:	f000 f9f2 	bl	800217a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d96:	e03f      	b.n	8001e18 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_UART_MspInit+0x1b4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d13a      	bne.n	8001e18 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fe10 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8001dba:	f7ff fb3f 	bl	800143c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_UART_MspInit+0x1a4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dee:	230c      	movs	r3, #12
 8001df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e06:	2307      	movs	r3, #7
 8001e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <HAL_UART_MspInit+0x1a8>)
 8001e14:	f000 fe32 	bl	8002a7c <HAL_GPIO_Init>
}
 8001e18:	bf00      	nop
 8001e1a:	37c0      	adds	r7, #192	; 0xc0
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40011000 	.word	0x40011000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	2000044c 	.word	0x2000044c
 8001e30:	40026488 	.word	0x40026488
 8001e34:	40004400 	.word	0x40004400

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e54:	4c0b      	ldr	r4, [pc, #44]	; (8001e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e62:	f7ff fe1f 	bl	8001aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f004 fba1 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff fa1b 	bl	80012a4 <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001e7c:	08007f8c 	.word	0x08007f8c
  ldr r2, =_sbss
 8001e80:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001e84:	200004c0 	.word	0x200004c0

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>

08001e8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f000 f94c 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 f805 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9a:	f7ff fcfd 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f967 	bl	8002196 <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f92f 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000050 	.word	0x20000050
 8001efc:	20000058 	.word	0x20000058
 8001f00:	20000054 	.word	0x20000054

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000058 	.word	0x20000058
 8001f28:	200004ac 	.word	0x200004ac

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200004ac 	.word	0x200004ac

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000058 	.word	0x20000058

08001f8c <__NVIC_SetPriorityGrouping>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <__NVIC_SetPriorityGrouping+0x40>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x40>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	05fa0000 	.word	0x05fa0000

08001fd4 <__NVIC_GetPriorityGrouping>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e054      	b.n	800226c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7f5b      	ldrb	r3, [r3, #29]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fef2 	bl	8000fbc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	791b      	ldrb	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_CRC_Init+0xc4>)
 80021ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0218 	bic.w	r2, r2, #24
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	e00c      	b.n	800221a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6899      	ldr	r1, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	461a      	mov	r2, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f834 	bl	8002278 <HAL_CRCEx_Polynomial_Set>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e028      	b.n	800226c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	795b      	ldrb	r3, [r3, #5]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f04f 32ff 	mov.w	r2, #4294967295
 800222a:	611a      	str	r2, [r3, #16]
 800222c:	e004      	b.n	8002238 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6912      	ldr	r2, [r2, #16]
 8002236:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699a      	ldr	r2, [r3, #24]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	04c11db7 	.word	0x04c11db7

08002278 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002288:	231f      	movs	r3, #31
 800228a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800228c:	bf00      	nop
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1e5a      	subs	r2, r3, #1
 8002292:	613a      	str	r2, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_CRCEx_Polynomial_Set+0x34>
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	d846      	bhi.n	8002340 <HAL_CRCEx_Polynomial_Set+0xc8>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	08002347 	.word	0x08002347
 80022bc:	08002341 	.word	0x08002341
 80022c0:	08002341 	.word	0x08002341
 80022c4:	08002341 	.word	0x08002341
 80022c8:	08002341 	.word	0x08002341
 80022cc:	08002341 	.word	0x08002341
 80022d0:	08002341 	.word	0x08002341
 80022d4:	08002341 	.word	0x08002341
 80022d8:	08002335 	.word	0x08002335
 80022dc:	08002341 	.word	0x08002341
 80022e0:	08002341 	.word	0x08002341
 80022e4:	08002341 	.word	0x08002341
 80022e8:	08002341 	.word	0x08002341
 80022ec:	08002341 	.word	0x08002341
 80022f0:	08002341 	.word	0x08002341
 80022f4:	08002341 	.word	0x08002341
 80022f8:	08002329 	.word	0x08002329
 80022fc:	08002341 	.word	0x08002341
 8002300:	08002341 	.word	0x08002341
 8002304:	08002341 	.word	0x08002341
 8002308:	08002341 	.word	0x08002341
 800230c:	08002341 	.word	0x08002341
 8002310:	08002341 	.word	0x08002341
 8002314:	08002341 	.word	0x08002341
 8002318:	0800231d 	.word	0x0800231d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d913      	bls.n	800234a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002326:	e010      	b.n	800234a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b07      	cmp	r3, #7
 800232c:	d90f      	bls.n	800234e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002332:	e00c      	b.n	800234e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	d90b      	bls.n	8002352 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800233e:	e008      	b.n	8002352 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
      break;
 8002344:	e006      	b.n	8002354 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002346:	bf00      	nop
 8002348:	e004      	b.n	8002354 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800234a:	bf00      	nop
 800234c:	e002      	b.n	8002354 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002352:	bf00      	nop
  }
  if (status == HAL_OK)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 0118 	bic.w	r1, r3, #24
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002376:	7dfb      	ldrb	r3, [r7, #23]
}
 8002378:	4618      	mov	r0, r3
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fdcc 	bl	8001f2c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e099      	b.n	80024d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c0:	e00f      	b.n	80023e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c2:	f7ff fdb3 	bl	8001f2c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d908      	bls.n	80023e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e078      	b.n	80024d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e8      	bne.n	80023c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_DMA_Init+0x158>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2b04      	cmp	r3, #4
 800243a:	d107      	bne.n	800244c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4313      	orrs	r3, r2
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 0307 	bic.w	r3, r3, #7
 8002462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2b04      	cmp	r3, #4
 8002474:	d117      	bne.n	80024a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fa7b 	bl	8002984 <DMA_CheckFifoParam>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024a2:	2301      	movs	r3, #1
 80024a4:	e016      	b.n	80024d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa32 	bl	8002918 <DMA_CalcBaseAndBitshift>
 80024b4:	4603      	mov	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	223f      	movs	r2, #63	; 0x3f
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	e010803f 	.word	0xe010803f

080024e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ee:	f7ff fd1d 	bl	8001f2c <HAL_GetTick>
 80024f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e052      	b.n	80025b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0216 	bic.w	r2, r2, #22
 8002520:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002530:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <HAL_DMA_Abort+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0208 	bic.w	r2, r2, #8
 8002550:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002562:	e013      	b.n	800258c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002564:	f7ff fce2 	bl	8001f2c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b05      	cmp	r3, #5
 8002570:	d90c      	bls.n	800258c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2203      	movs	r2, #3
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e015      	b.n	80025b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e4      	bne.n	8002564 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	223f      	movs	r2, #63	; 0x3f
 80025a0:	409a      	lsls	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d004      	beq.n	80025de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e00c      	b.n	80025f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2205      	movs	r2, #5
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002610:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_DMA_IRQHandler+0x248>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a8e      	ldr	r2, [pc, #568]	; (8002850 <HAL_DMA_IRQHandler+0x24c>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2208      	movs	r2, #8
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01a      	beq.n	8002670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0204 	bic.w	r2, r2, #4
 8002656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	2208      	movs	r2, #8
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	2201      	movs	r2, #1
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2201      	movs	r2, #1
 8002694:	409a      	lsls	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	2204      	movs	r2, #4
 80026ac:	409a      	lsls	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d012      	beq.n	80026dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2204      	movs	r2, #4
 80026ca:	409a      	lsls	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f043 0204 	orr.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2210      	movs	r2, #16
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d043      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03c      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2210      	movs	r2, #16
 8002700:	409a      	lsls	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d018      	beq.n	8002746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d024      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
 8002732:	e01f      	b.n	8002774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
 8002744:	e016      	b.n	8002774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0208 	bic.w	r2, r2, #8
 8002762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2220      	movs	r2, #32
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 808f 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8087 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2220      	movs	r2, #32
 800279c:	409a      	lsls	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d136      	bne.n	800281c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0216 	bic.w	r2, r2, #22
 80027bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_DMA_IRQHandler+0x1da>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0208 	bic.w	r2, r2, #8
 80027ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	223f      	movs	r2, #63	; 0x3f
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	2b00      	cmp	r3, #0
 8002810:	d07e      	beq.n	8002910 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
        }
        return;
 800281a:	e079      	b.n	8002910 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	2b00      	cmp	r3, #0
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
 8002848:	e02c      	b.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
 800284a:	bf00      	nop
 800284c:	20000050 	.word	0x20000050
 8002850:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d023      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e01e      	b.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10f      	bne.n	8002894 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0210 	bic.w	r2, r2, #16
 8002882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d032      	beq.n	8002912 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2205      	movs	r2, #5
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d307      	bcc.n	80028ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f2      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x2cc>
 80028ea:	e000      	b.n	80028ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
 800290e:	e000      	b.n	8002912 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002910:	bf00      	nop
    }
  }
}
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3b10      	subs	r3, #16
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <DMA_CalcBaseAndBitshift+0x60>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <DMA_CalcBaseAndBitshift+0x64>)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d908      	bls.n	8002958 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <DMA_CalcBaseAndBitshift+0x68>)
 800294e:	4013      	ands	r3, r2
 8002950:	1d1a      	adds	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	; 0x58
 8002956:	e006      	b.n	8002966 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <DMA_CalcBaseAndBitshift+0x68>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	aaaaaaab 	.word	0xaaaaaaab
 800297c:	08007edc 	.word	0x08007edc
 8002980:	fffffc00 	.word	0xfffffc00

08002984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d11f      	bne.n	80029de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d856      	bhi.n	8002a52 <DMA_CheckFifoParam+0xce>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <DMA_CheckFifoParam+0x28>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029cf 	.word	0x080029cf
 80029b4:	080029bd 	.word	0x080029bd
 80029b8:	08002a53 	.word	0x08002a53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d046      	beq.n	8002a56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029cc:	e043      	b.n	8002a56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d6:	d140      	bne.n	8002a5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029dc:	e03d      	b.n	8002a5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e6:	d121      	bne.n	8002a2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d837      	bhi.n	8002a5e <DMA_CheckFifoParam+0xda>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <DMA_CheckFifoParam+0x70>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a0b 	.word	0x08002a0b
 80029fc:	08002a05 	.word	0x08002a05
 8002a00:	08002a1d 	.word	0x08002a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e030      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d025      	beq.n	8002a62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1a:	e022      	b.n	8002a62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a24:	d11f      	bne.n	8002a66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a2a:	e01c      	b.n	8002a66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d903      	bls.n	8002a3a <DMA_CheckFifoParam+0xb6>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d003      	beq.n	8002a40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a38:	e018      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3e:	e015      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00e      	beq.n	8002a6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a50:	e00b      	b.n	8002a6a <DMA_CheckFifoParam+0xe6>
      break;
 8002a52:	bf00      	nop
 8002a54:	e00a      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e008      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e006      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e175      	b.n	8002d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f040 8164 	bne.w	8002d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d005      	beq.n	8002ad2 <HAL_GPIO_Init+0x56>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d130      	bne.n	8002b34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80be 	beq.w	8002d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <HAL_GPIO_Init+0x324>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a65      	ldr	r2, [pc, #404]	; (8002da0 <HAL_GPIO_Init+0x324>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_GPIO_Init+0x324>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c1e:	4a61      	ldr	r2, [pc, #388]	; (8002da4 <HAL_GPIO_Init+0x328>)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_GPIO_Init+0x32c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d037      	beq.n	8002cba <HAL_GPIO_Init+0x23e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a57      	ldr	r2, [pc, #348]	; (8002dac <HAL_GPIO_Init+0x330>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_GPIO_Init+0x23a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a56      	ldr	r2, [pc, #344]	; (8002db0 <HAL_GPIO_Init+0x334>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d02b      	beq.n	8002cb2 <HAL_GPIO_Init+0x236>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_GPIO_Init+0x338>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d025      	beq.n	8002cae <HAL_GPIO_Init+0x232>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a54      	ldr	r2, [pc, #336]	; (8002db8 <HAL_GPIO_Init+0x33c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01f      	beq.n	8002caa <HAL_GPIO_Init+0x22e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <HAL_GPIO_Init+0x340>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_GPIO_Init+0x22a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_GPIO_Init+0x344>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_GPIO_Init+0x226>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_GPIO_Init+0x348>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00d      	beq.n	8002c9e <HAL_GPIO_Init+0x222>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_GPIO_Init+0x34c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <HAL_GPIO_Init+0x21e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4f      	ldr	r2, [pc, #316]	; (8002dcc <HAL_GPIO_Init+0x350>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_GPIO_Init+0x21a>
 8002c92:	2309      	movs	r3, #9
 8002c94:	e012      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002c96:	230a      	movs	r3, #10
 8002c98:	e010      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	e00e      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00c      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002ca2:	2306      	movs	r3, #6
 8002ca4:	e00a      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	e008      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002caa:	2304      	movs	r3, #4
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e004      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x240>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f002 0203 	and.w	r2, r2, #3
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	4093      	lsls	r3, r2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ccc:	4935      	ldr	r1, [pc, #212]	; (8002da4 <HAL_GPIO_Init+0x328>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d28:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d2e:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <HAL_GPIO_Init+0x354>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	f67f ae86 	bls.w	8002a9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40021400 	.word	0x40021400
 8002dc0:	40021800 	.word	0x40021800
 8002dc4:	40021c00 	.word	0x40021c00
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40022400 	.word	0x40022400
 8002dd0:	40013c00 	.word	0x40013c00

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	041a      	lsls	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	619a      	str	r2, [r3, #24]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e36:	f7ff f879 	bl	8001f2c <HAL_GetTick>
 8002e3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e3c:	e009      	b.n	8002e52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e3e:	f7ff f875 	bl	8001f2c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4c:	d901      	bls.n	8002e52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e022      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7ff f85e 	bl	8001f2c <HAL_GetTick>
 8002e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e72:	e009      	b.n	8002e88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e74:	f7ff f85a 	bl	8001f2c <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e82:	d901      	bls.n	8002e88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e007      	b.n	8002e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e94:	d1ee      	bne.n	8002e74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000

08002ea8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff f83c 	bl	8001f2c <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e067      	b.n	8002f90 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe fae3 	bl	80014a0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002eda:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f85e 	bl	8002fa0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	021a      	lsls	r2, r3, #8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	2120      	movs	r1, #32
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f856 	bl	8002fbc <QSPI_WaitFlagStateUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d135      	bne.n	8002f86 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_QSPI_Init+0xf0>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	0611      	lsls	r1, r2, #24
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	69d2      	ldr	r2, [r2, #28]
 8002f34:	4311      	orrs	r1, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6a12      	ldr	r2, [r2, #32]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_QSPI_Init+0xf4>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6912      	ldr	r2, [r2, #16]
 8002f52:	0411      	lsls	r1, r2, #16
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6952      	ldr	r2, [r2, #20]
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6992      	ldr	r2, [r2, #24]
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	00ffff2f 	.word	0x00ffff2f
 8002f9c:	ffe0f8fe 	.word	0xffe0f8fe

08002fa0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002fcc:	e01a      	b.n	8003004 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d016      	beq.n	8003004 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe ffa9 	bl	8001f2c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00e      	b.n	8003022 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	429a      	cmp	r2, r3
 800301e:	d1d6      	bne.n	8002fce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003034:	2300      	movs	r3, #0
 8003036:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e29b      	b.n	800357a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8087 	beq.w	800315e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003050:	4b96      	ldr	r3, [pc, #600]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b04      	cmp	r3, #4
 800305a:	d00c      	beq.n	8003076 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305c:	4b93      	ldr	r3, [pc, #588]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d112      	bne.n	800308e <HAL_RCC_OscConfig+0x62>
 8003068:	4b90      	ldr	r3, [pc, #576]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003074:	d10b      	bne.n	800308e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003076:	4b8d      	ldr	r3, [pc, #564]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d06c      	beq.n	800315c <HAL_RCC_OscConfig+0x130>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d168      	bne.n	800315c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e275      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x7a>
 8003098:	4b84      	ldr	r3, [pc, #528]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a83      	ldr	r2, [pc, #524]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800309e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e02e      	b.n	8003104 <HAL_RCC_OscConfig+0xd8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x9c>
 80030ae:	4b7f      	ldr	r3, [pc, #508]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7e      	ldr	r2, [pc, #504]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7b      	ldr	r2, [pc, #492]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e01d      	b.n	8003104 <HAL_RCC_OscConfig+0xd8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0xc0>
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b73      	ldr	r3, [pc, #460]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a72      	ldr	r2, [pc, #456]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0xd8>
 80030ec:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6b      	ldr	r2, [pc, #428]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80030fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d013      	beq.n	8003134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe ff0e 	bl	8001f2c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003114:	f7fe ff0a 	bl	8001f2c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e229      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0xe8>
 8003132:	e014      	b.n	800315e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fefa 	bl	8001f2c <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fef6 	bl	8001f2c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e215      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	4b57      	ldr	r3, [pc, #348]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x110>
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d069      	beq.n	800323e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b08      	cmp	r3, #8
 8003180:	d11c      	bne.n	80031bc <HAL_RCC_OscConfig+0x190>
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d116      	bne.n	80031bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_RCC_OscConfig+0x17a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e1e9      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	493d      	ldr	r1, [pc, #244]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	e040      	b.n	800323e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d023      	beq.n	800320c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe feac 	bl	8001f2c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fe fea8 	bl	8001f2c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1c7      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4929      	ldr	r1, [pc, #164]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
 800320a:	e018      	b.n	800323e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a26      	ldr	r2, [pc, #152]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fe fe88 	bl	8001f2c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe fe84 	bl	8001f2c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1a3      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d038      	beq.n	80032bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d019      	beq.n	8003286 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fe fe65 	bl	8001f2c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003266:	f7fe fe61 	bl	8001f2c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e180      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x23a>
 8003284:	e01a      	b.n	80032bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 8003288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe fe4b 	bl	8001f2c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329a:	f7fe fe47 	bl	8001f2c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d903      	bls.n	80032b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e166      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
 80032ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	4b92      	ldr	r3, [pc, #584]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ee      	bne.n	800329a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a4 	beq.w	8003412 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b8c      	ldr	r3, [pc, #560]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b89      	ldr	r3, [pc, #548]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a88      	ldr	r2, [pc, #544]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b86      	ldr	r3, [pc, #536]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f2:	4b83      	ldr	r3, [pc, #524]	; (8003500 <HAL_RCC_OscConfig+0x4d4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032fe:	4b80      	ldr	r3, [pc, #512]	; (8003500 <HAL_RCC_OscConfig+0x4d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7f      	ldr	r2, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x4d4>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe fe0f 	bl	8001f2c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fe fe0b 	bl	8001f2c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e12a      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003324:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x4d4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x31a>
 8003338:	4b70      	ldr	r3, [pc, #448]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	e02d      	b.n	80033a2 <HAL_RCC_OscConfig+0x376>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x33c>
 800334e:	4b6b      	ldr	r3, [pc, #428]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a6a      	ldr	r2, [pc, #424]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	4b68      	ldr	r3, [pc, #416]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a67      	ldr	r2, [pc, #412]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	e01c      	b.n	80033a2 <HAL_RCC_OscConfig+0x376>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d10c      	bne.n	800338a <HAL_RCC_OscConfig+0x35e>
 8003370:	4b62      	ldr	r3, [pc, #392]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a61      	ldr	r2, [pc, #388]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a5e      	ldr	r2, [pc, #376]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	e00b      	b.n	80033a2 <HAL_RCC_OscConfig+0x376>
 800338a:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a5b      	ldr	r2, [pc, #364]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fdbf 	bl	8001f2c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fe fdbb 	bl	8001f2c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e0d8      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ee      	beq.n	80033b2 <HAL_RCC_OscConfig+0x386>
 80033d4:	e014      	b.n	8003400 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fda9 	bl	8001f2c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fda5 	bl	8001f2c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0c2      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ee      	bne.n	80033de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80ae 	beq.w	8003578 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800341c:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b08      	cmp	r3, #8
 8003426:	d06d      	beq.n	8003504 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d14b      	bne.n	80034c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003430:	4b32      	ldr	r3, [pc, #200]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe fd76 	bl	8001f2c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fd72 	bl	8001f2c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e091      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	071b      	lsls	r3, r3, #28
 800348e:	491b      	ldr	r1, [pc, #108]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a18      	ldr	r2, [pc, #96]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fd44 	bl	8001f2c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fd40 	bl	8001f2c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e05f      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x47c>
 80034c6:	e057      	b.n	8003578 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fd2a 	bl	8001f2c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fd26 	bl	8001f2c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e045      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b03      	ldr	r3, [pc, #12]	; (80034fc <HAL_RCC_OscConfig+0x4d0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x4b0>
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x54c>
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_RCC_OscConfig+0x558>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d030      	beq.n	8003574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d129      	bne.n	8003574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d122      	bne.n	8003574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d119      	bne.n	8003574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d10f      	bne.n	8003574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0d0      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b6a      	ldr	r3, [pc, #424]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d910      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b67      	ldr	r3, [pc, #412]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 020f 	bic.w	r2, r3, #15
 80035b6:	4965      	ldr	r1, [pc, #404]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d040      	beq.n	80036ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d115      	bne.n	800366a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e073      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4936      	ldr	r1, [pc, #216]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fe fc56 	bl	8001f2c <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fe fc52 	bl	8001f2c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e053      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d210      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 020f 	bic.w	r2, r3, #15
 80036c2:	4922      	ldr	r1, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x1cc>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1d0>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fbb2 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	08007ec4 	.word	0x08007ec4
 8003758:	20000050 	.word	0x20000050
 800375c:	20000054 	.word	0x20000054

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b094      	sub	sp, #80	; 0x50
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
 800376c:	2300      	movs	r3, #0
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003770:	2300      	movs	r3, #0
 8003772:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80e1 	bhi.w	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e0db      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b73      	ldr	r3, [pc, #460]	; (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003798:	e0db      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b73      	ldr	r3, [pc, #460]	; (8003968 <HAL_RCC_GetSysClockFreq+0x208>)
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379e:	e0d8      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037aa:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d063      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
 80037ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4621      	mov	r1, r4
 80037ec:	1a51      	subs	r1, r2, r1
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	4629      	mov	r1, r5
 80037f2:	eb63 0301 	sbc.w	r3, r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	018b      	lsls	r3, r1, #6
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800380e:	4651      	mov	r1, sl
 8003810:	018a      	lsls	r2, r1, #6
 8003812:	4651      	mov	r1, sl
 8003814:	ebb2 0801 	subs.w	r8, r2, r1
 8003818:	4659      	mov	r1, fp
 800381a:	eb63 0901 	sbc.w	r9, r3, r1
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800382a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800382e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003832:	4690      	mov	r8, r2
 8003834:	4699      	mov	r9, r3
 8003836:	4623      	mov	r3, r4
 8003838:	eb18 0303 	adds.w	r3, r8, r3
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	462b      	mov	r3, r5
 8003840:	eb49 0303 	adc.w	r3, r9, r3
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003852:	4629      	mov	r1, r5
 8003854:	024b      	lsls	r3, r1, #9
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800385c:	4621      	mov	r1, r4
 800385e:	024a      	lsls	r2, r1, #9
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003866:	2200      	movs	r2, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800386c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003870:	f7fc fd36 	bl	80002e0 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387c:	e058      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	2200      	movs	r2, #0
 8003886:	4618      	mov	r0, r3
 8003888:	4611      	mov	r1, r2
 800388a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	0159      	lsls	r1, r3, #5
 80038a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038aa:	0150      	lsls	r0, r2, #5
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4641      	mov	r1, r8
 80038b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038b6:	4649      	mov	r1, r9
 80038b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038d0:	ebb2 040a 	subs.w	r4, r2, sl
 80038d4:	eb63 050b 	sbc.w	r5, r3, fp
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	00eb      	lsls	r3, r5, #3
 80038e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038e6:	00e2      	lsls	r2, r4, #3
 80038e8:	4614      	mov	r4, r2
 80038ea:	461d      	mov	r5, r3
 80038ec:	4643      	mov	r3, r8
 80038ee:	18e3      	adds	r3, r4, r3
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	464b      	mov	r3, r9
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003906:	4629      	mov	r1, r5
 8003908:	028b      	lsls	r3, r1, #10
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003910:	4621      	mov	r1, r4
 8003912:	028a      	lsls	r2, r1, #10
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	61fa      	str	r2, [r7, #28]
 8003920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003924:	f7fc fcdc 	bl	80002e0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800394a:	e002      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003954:	4618      	mov	r0, r3
 8003956:	3750      	adds	r7, #80	; 0x50
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_GetHCLKFreq+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000050 	.word	0x20000050

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003988:	f7ff fff0 	bl	800396c <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0a9b      	lsrs	r3, r3, #10
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08007ed4 	.word	0x08007ed4

080039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039b0:	f7ff ffdc 	bl	800396c <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0b5b      	lsrs	r3, r3, #13
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	08007ed4 	.word	0x08007ed4

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d012      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039fc:	4b69      	ldr	r3, [pc, #420]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a68      	ldr	r2, [pc, #416]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a06:	6093      	str	r3, [r2, #8]
 8003a08:	4b66      	ldr	r3, [pc, #408]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	4964      	ldr	r1, [pc, #400]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d017      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	4959      	ldr	r1, [pc, #356]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d017      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	494a      	ldr	r1, [pc, #296]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a88:	d101      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 808b 	beq.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b3a      	ldr	r3, [pc, #232]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac4:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ad0:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003adc:	f7fe fa26 	bl	8001f2c <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae4:	f7fe fa22 	bl	8001f2c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e38f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003af6:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d035      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d02e      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d114      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe f9ea 	bl	8001f2c <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fe f9e6 	bl	8001f2c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e351      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ee      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b8a:	d111      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b9a:	400b      	ands	r3, r1
 8003b9c:	4901      	ldr	r1, [pc, #4]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	0ffffcff 	.word	0x0ffffcff
 8003bb0:	4bac      	ldr	r3, [pc, #688]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4aab      	ldr	r2, [pc, #684]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bba:	6093      	str	r3, [r2, #8]
 8003bbc:	4ba9      	ldr	r3, [pc, #676]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	49a6      	ldr	r1, [pc, #664]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bda:	4ba2      	ldr	r3, [pc, #648]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be0:	4aa0      	ldr	r2, [pc, #640]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bea:	4b9e      	ldr	r3, [pc, #632]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	499b      	ldr	r1, [pc, #620]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c08:	4b96      	ldr	r3, [pc, #600]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c16:	4993      	ldr	r1, [pc, #588]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c2a:	4b8e      	ldr	r3, [pc, #568]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c38:	498a      	ldr	r1, [pc, #552]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c4c:	4b85      	ldr	r3, [pc, #532]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5a:	4982      	ldr	r1, [pc, #520]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c6e:	4b7d      	ldr	r3, [pc, #500]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4979      	ldr	r1, [pc, #484]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c90:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4971      	ldr	r1, [pc, #452]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f023 020c 	bic.w	r2, r3, #12
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	4968      	ldr	r1, [pc, #416]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cd4:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	4960      	ldr	r1, [pc, #384]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cf6:	4b5b      	ldr	r3, [pc, #364]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	4957      	ldr	r1, [pc, #348]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d18:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	494f      	ldr	r1, [pc, #316]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	4946      	ldr	r1, [pc, #280]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d5c:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	493e      	ldr	r1, [pc, #248]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	4935      	ldr	r1, [pc, #212]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dae:	492d      	ldr	r1, [pc, #180]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dc2:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd0:	4924      	ldr	r1, [pc, #144]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	4914      	ldr	r1, [pc, #80]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e34:	490b      	ldr	r1, [pc, #44]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00f      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	4902      	ldr	r1, [pc, #8]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e74:	4b8a      	ldr	r3, [pc, #552]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	4986      	ldr	r1, [pc, #536]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e98:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea8:	497d      	ldr	r1, [pc, #500]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d006      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80d6 	beq.w	8004070 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ec4:	4b76      	ldr	r3, [pc, #472]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a75      	ldr	r2, [pc, #468]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed0:	f7fe f82c 	bl	8001f2c <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ed8:	f7fe f828 	bl	8001f2c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e195      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eea:	4b6d      	ldr	r3, [pc, #436]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d021      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11d      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f0a:	4b65      	ldr	r3, [pc, #404]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f18:	4b61      	ldr	r3, [pc, #388]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	0e1b      	lsrs	r3, r3, #24
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	019a      	lsls	r2, r3, #6
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	4958      	ldr	r1, [pc, #352]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02e      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d129      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f72:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f80:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f86:	0f1b      	lsrs	r3, r3, #28
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	019a      	lsls	r2, r3, #6
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	493e      	ldr	r1, [pc, #248]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fae:	4b3c      	ldr	r3, [pc, #240]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	f023 021f 	bic.w	r2, r3, #31
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	4938      	ldr	r1, [pc, #224]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01d      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	0e1b      	lsrs	r3, r3, #24
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fe0:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe6:	0f1b      	lsrs	r3, r3, #28
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	019a      	lsls	r2, r3, #6
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	071b      	lsls	r3, r3, #28
 8004006:	4926      	ldr	r1, [pc, #152]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d011      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	019a      	lsls	r2, r3, #6
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	491a      	ldr	r1, [pc, #104]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800404a:	f7fd ff6f 	bl	8001f2c <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004052:	f7fd ff6b 	bl	8001f2c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d901      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0d8      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b01      	cmp	r3, #1
 8004074:	f040 80ce 	bne.w	8004214 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004084:	f7fd ff52 	bl	8001f2c <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800408c:	f7fd ff4e 	bl	8001f2c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d904      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0bb      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040a4:	4b5e      	ldr	r3, [pc, #376]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b0:	d0ec      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02e      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d12a      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040da:	4b51      	ldr	r3, [pc, #324]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040e8:	4b4d      	ldr	r3, [pc, #308]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	0f1b      	lsrs	r3, r3, #28
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	019a      	lsls	r2, r3, #6
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	071b      	lsls	r3, r3, #28
 800410e:	4944      	ldr	r1, [pc, #272]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004116:	4b42      	ldr	r3, [pc, #264]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	493d      	ldr	r1, [pc, #244]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d022      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004144:	d11d      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004146:	4b36      	ldr	r3, [pc, #216]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	0f1b      	lsrs	r3, r3, #28
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	019a      	lsls	r2, r3, #6
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	431a      	orrs	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	061b      	lsls	r3, r3, #24
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	4929      	ldr	r1, [pc, #164]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d028      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	0e1b      	lsrs	r3, r3, #24
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	019a      	lsls	r2, r3, #6
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	071b      	lsls	r3, r3, #28
 80041c2:	4917      	ldr	r1, [pc, #92]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4911      	ldr	r1, [pc, #68]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ec:	f7fd fe9e 	bl	8001f2c <HAL_GetTick>
 80041f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041f4:	f7fd fe9a 	bl	8001f2c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e007      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800420e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004212:	d1ef      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800

08004224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e09d      	b.n	8004372 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d108      	bne.n	8004250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004246:	d009      	beq.n	800425c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
 800424e:	e005      	b.n	800425c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fa48 	bl	800170c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800429c:	d902      	bls.n	80042a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e002      	b.n	80042aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042b2:	d007      	beq.n	80042c4 <HAL_SPI_Init+0xa0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	ea42 0103 	orr.w	r1, r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	f003 0204 	and.w	r2, r3, #4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004340:	ea42 0103 	orr.w	r1, r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b088      	sub	sp, #32
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_SPI_Transmit+0x22>
 8004398:	2302      	movs	r3, #2
 800439a:	e158      	b.n	800464e <HAL_SPI_Transmit+0x2d4>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a4:	f7fd fdc2 	bl	8001f2c <HAL_GetTick>
 80043a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043be:	e13d      	b.n	800463c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0x52>
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043d0:	e134      	b.n	800463c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441c:	d10f      	bne.n	800443e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d007      	beq.n	800445c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004464:	d94b      	bls.n	80044fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_Transmit+0xfa>
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d13e      	bne.n	80044f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004498:	e02b      	b.n	80044f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d112      	bne.n	80044ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	881a      	ldrh	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044cc:	e011      	b.n	80044f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ce:	f7fd fd2d 	bl	8001f2c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d803      	bhi.n	80044e6 <HAL_SPI_Transmit+0x16c>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_Transmit+0x172>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044f0:	e0a4      	b.n	800463c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ce      	bne.n	800449a <HAL_SPI_Transmit+0x120>
 80044fc:	e07c      	b.n	80045f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_SPI_Transmit+0x192>
 8004506:	8afb      	ldrh	r3, [r7, #22]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d170      	bne.n	80045ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d912      	bls.n	800453c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	881a      	ldrh	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	1c9a      	adds	r2, r3, #2
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b02      	subs	r3, #2
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800453a:	e058      	b.n	80045ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004562:	e044      	b.n	80045ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d12b      	bne.n	80045ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d912      	bls.n	80045a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b02      	subs	r3, #2
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a0:	e025      	b.n	80045ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045c8:	e011      	b.n	80045ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ca:	f7fd fcaf 	bl	8001f2c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d803      	bhi.n	80045e2 <HAL_SPI_Transmit+0x268>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d102      	bne.n	80045e8 <HAL_SPI_Transmit+0x26e>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045ec:	e026      	b.n	800463c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1b5      	bne.n	8004564 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	6839      	ldr	r1, [r7, #0]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fd07 	bl	8005010 <SPI_EndRxTxTransaction>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2220      	movs	r2, #32
 800460c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e000      	b.n	800463c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800463a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800464c:	7ffb      	ldrb	r3, [r7, #31]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004672:	d112      	bne.n	800469a <HAL_SPI_Receive+0x44>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10e      	bne.n	800469a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2204      	movs	r2, #4
 8004680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f910 	bl	80048b6 <HAL_SPI_TransmitReceive>
 8004696:	4603      	mov	r3, r0
 8004698:	e109      	b.n	80048ae <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_SPI_Receive+0x52>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e102      	b.n	80048ae <HAL_SPI_Receive+0x258>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b0:	f7fd fc3c 	bl	8001f2c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046c6:	e0e9      	b.n	800489c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Receive+0x7e>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046d8:	e0e0      	b.n	800489c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2204      	movs	r2, #4
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004724:	d908      	bls.n	8004738 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e007      	b.n	8004748 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	d10f      	bne.n	8004772 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d007      	beq.n	8004790 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004798:	d867      	bhi.n	800486a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800479a:	e030      	b.n	80047fe <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d117      	bne.n	80047da <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f103 020c 	add.w	r2, r3, #12
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80047d8:	e011      	b.n	80047fe <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047da:	f7fd fba7 	bl	8001f2c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d803      	bhi.n	80047f2 <HAL_SPI_Receive+0x19c>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d102      	bne.n	80047f8 <HAL_SPI_Receive+0x1a2>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047fc:	e04e      	b.n	800489c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1c8      	bne.n	800479c <HAL_SPI_Receive+0x146>
 800480a:	e034      	b.n	8004876 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d115      	bne.n	8004846 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	b292      	uxth	r2, r2
 8004826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004844:	e011      	b.n	800486a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004846:	f7fd fb71 	bl	8001f2c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d803      	bhi.n	800485e <HAL_SPI_Receive+0x208>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d102      	bne.n	8004864 <HAL_SPI_Receive+0x20e>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004868:	e018      	b.n	800489c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1ca      	bne.n	800480c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fb4c 	bl	8004f18 <SPI_EndRxTransaction>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
 8004898:	e000      	b.n	800489c <HAL_SPI_Receive+0x246>
  }

error :
 800489a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08a      	sub	sp, #40	; 0x28
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048c4:	2301      	movs	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x26>
 80048d8:	2302      	movs	r3, #2
 80048da:	e1fb      	b.n	8004cd4 <HAL_SPI_TransmitReceive+0x41e>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048e4:	f7fd fb22 	bl	8001f2c <HAL_GetTick>
 80048e8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048f0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004900:	7efb      	ldrb	r3, [r7, #27]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d00e      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x6e>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800490c:	d106      	bne.n	800491c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_SPI_TransmitReceive+0x66>
 8004916:	7efb      	ldrb	r3, [r7, #27]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d003      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004922:	e1cd      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x80>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_TransmitReceive+0x80>
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800493c:	e1c0      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b04      	cmp	r3, #4
 8004948:	d003      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2205      	movs	r2, #5
 800494e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	887a      	ldrh	r2, [r7, #2]
 8004962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	887a      	ldrh	r2, [r7, #2]
 800496a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	887a      	ldrh	r2, [r7, #2]
 800497e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004994:	d802      	bhi.n	800499c <HAL_SPI_TransmitReceive+0xe6>
 8004996:	8a3b      	ldrh	r3, [r7, #16]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d908      	bls.n	80049ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	e007      	b.n	80049be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d007      	beq.n	80049dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049e4:	d97c      	bls.n	8004ae0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x13e>
 80049ee:	8a7b      	ldrh	r3, [r7, #18]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d169      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	1c9a      	adds	r2, r3, #2
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a18:	e056      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d11b      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x1aa>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_SPI_TransmitReceive+0x1aa>
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d113      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x1f2>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	b292      	uxth	r2, r2
 8004a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	1c9a      	adds	r2, r3, #2
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004aa8:	f7fd fa40 	bl	8001f2c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d807      	bhi.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d003      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ac6:	e0fb      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1a3      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x164>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d19d      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x164>
 8004ade:	e0df      	b.n	8004ca0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x23a>
 8004ae8:	8a7b      	ldrh	r3, [r7, #18]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	f040 80cb 	bne.w	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d912      	bls.n	8004b20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	881a      	ldrh	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b02      	subs	r3, #2
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b1e:	e0b2      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b46:	e09e      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d134      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x30a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02f      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x30a>
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d12c      	bne.n	8004bc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d912      	bls.n	8004b96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b02      	subs	r3, #2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b94:	e012      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d148      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x3aa>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d042      	beq.n	8004c60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d923      	bls.n	8004c2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	b292      	uxth	r2, r2
 8004bf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	1c9a      	adds	r2, r3, #2
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b02      	subs	r3, #2
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d81f      	bhi.n	8004c5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	e016      	b.n	8004c5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f103 020c 	add.w	r2, r3, #12
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c60:	f7fd f964 	bl	8001f2c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d803      	bhi.n	8004c78 <HAL_SPI_TransmitReceive+0x3c2>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x3c8>
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c84:	e01c      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f af5b 	bne.w	8004b48 <HAL_SPI_TransmitReceive+0x292>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f47f af54 	bne.w	8004b48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f9b3 	bl	8005010 <SPI_EndRxTxTransaction>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	661a      	str	r2, [r3, #96]	; 0x60
 8004cbc:	e000      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3728      	adds	r7, #40	; 0x28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cec:	f7fd f91e 	bl	8001f2c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cfc:	f7fd f916 	bl	8001f2c <HAL_GetTick>
 8004d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	0d1b      	lsrs	r3, r3, #20
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d12:	e054      	b.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d050      	beq.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d1c:	f7fd f906 	bl	8001f2c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d902      	bls.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d13d      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4a:	d111      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d54:	d004      	beq.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5e:	d107      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d78:	d10f      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e017      	b.n	8004dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	bf0c      	ite	eq
 8004dce:	2301      	moveq	r3, #1
 8004dd0:	2300      	movne	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d19b      	bne.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000050 	.word	0x20000050

08004dec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dfe:	f7fd f895 	bl	8001f2c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e0e:	f7fd f88d 	bl	8001f2c <HAL_GetTick>
 8004e12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00da      	lsls	r2, r3, #3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	0d1b      	lsrs	r3, r3, #20
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e34:	e060      	b.n	8004ef8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e3c:	d107      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d050      	beq.n	8004ef8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e56:	f7fd f869 	bl	8001f2c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d902      	bls.n	8004e6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d13d      	bne.n	8004ee8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e84:	d111      	bne.n	8004eaa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8e:	d004      	beq.n	8004e9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e98:	d107      	bne.n	8004eaa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb2:	d10f      	bne.n	8004ed4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e010      	b.n	8004f0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d196      	bne.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3728      	adds	r7, #40	; 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000050 	.word	0x20000050

08004f18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2c:	d111      	bne.n	8004f52 <SPI_EndRxTransaction+0x3a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f36:	d004      	beq.n	8004f42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d107      	bne.n	8004f52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d112      	bne.n	8004f82 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff feb8 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d021      	beq.n	8004fb6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e03d      	b.n	8004ffe <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <SPI_EndRxTransaction+0xf0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	; (800500c <SPI_EndRxTransaction+0xf4>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	0d5b      	lsrs	r3, r3, #21
 8004f8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d0f2      	beq.n	8004f98 <SPI_EndRxTransaction+0x80>
 8004fb2:	e000      	b.n	8004fb6 <SPI_EndRxTransaction+0x9e>
        break;
 8004fb4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fbe:	d11d      	bne.n	8004ffc <SPI_EndRxTransaction+0xe4>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc8:	d004      	beq.n	8004fd4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd2:	d113      	bne.n	8004ffc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff ff03 	bl	8004dec <SPI_WaitFifoStateUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000050 	.word	0x20000050
 800500c:	165e9f81 	.word	0x165e9f81

08005010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fedf 	bl	8004dec <SPI_WaitFifoStateUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e046      	b.n	80050d2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005044:	4b25      	ldr	r3, [pc, #148]	; (80050dc <SPI_EndRxTxTransaction+0xcc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <SPI_EndRxTxTransaction+0xd0>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	0d5b      	lsrs	r3, r3, #21
 8005050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005054:	fb02 f303 	mul.w	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d112      	bne.n	800508a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2200      	movs	r2, #0
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff fe34 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507e:	f043 0220 	orr.w	r2, r3, #32
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e023      	b.n	80050d2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3b01      	subs	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d0f2      	beq.n	800508a <SPI_EndRxTxTransaction+0x7a>
 80050a4:	e000      	b.n	80050a8 <SPI_EndRxTxTransaction+0x98>
        break;
 80050a6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff fe99 	bl	8004dec <SPI_WaitFifoStateUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e000      	b.n	80050d2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000050 	.word	0x20000050
 80050e0:	165e9f81 	.word	0x165e9f81

080050e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e049      	b.n	800518a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fc fd24 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f000 f836 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <TIM_Base_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d00f      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a3d      	ldr	r2, [pc, #244]	; (80052ac <TIM_Base_SetConfig+0x118>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a3c      	ldr	r2, [pc, #240]	; (80052b0 <TIM_Base_SetConfig+0x11c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3b      	ldr	r2, [pc, #236]	; (80052b4 <TIM_Base_SetConfig+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <TIM_Base_SetConfig+0x124>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <TIM_Base_SetConfig+0x114>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f4:	d027      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <TIM_Base_SetConfig+0x118>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d023      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <TIM_Base_SetConfig+0x11c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01f      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <TIM_Base_SetConfig+0x120>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <TIM_Base_SetConfig+0x124>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d017      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a28      	ldr	r2, [pc, #160]	; (80052bc <TIM_Base_SetConfig+0x128>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <TIM_Base_SetConfig+0x12c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <TIM_Base_SetConfig+0x130>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a25      	ldr	r2, [pc, #148]	; (80052c8 <TIM_Base_SetConfig+0x134>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a24      	ldr	r2, [pc, #144]	; (80052cc <TIM_Base_SetConfig+0x138>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <TIM_Base_SetConfig+0x13c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <TIM_Base_SetConfig+0x114>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0xf8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <TIM_Base_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d103      	bne.n	8005294 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	615a      	str	r2, [r3, #20]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40010400 	.word	0x40010400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800
 80052c8:	40001800 	.word	0x40001800
 80052cc:	40001c00 	.word	0x40001c00
 80052d0:	40002000 	.word	0x40002000

080052d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e040      	b.n	8005368 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fcc2 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fc86 	bl	8005c24 <UART_SetConfig>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d101      	bne.n	8005322 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e022      	b.n	8005368 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fede 	bl	80060ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 ff65 	bl	8006230 <UART_CheckIdleState>
 8005366:	4603      	mov	r3, r0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005384:	2b20      	cmp	r3, #32
 8005386:	d171      	bne.n	800546c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Transmit+0x24>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e06a      	b.n	800546e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2221      	movs	r2, #33	; 0x21
 80053a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a6:	f7fc fdc1 	bl	8001f2c <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d108      	bne.n	80053d8 <HAL_UART_Transmit+0x68>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e003      	b.n	80053e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053e0:	e02c      	b.n	800543c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2180      	movs	r1, #128	; 0x80
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 ff6c 	bl	80062ca <UART_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e038      	b.n	800546e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	3302      	adds	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e007      	b.n	800542a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1cc      	bne.n	80053e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	2140      	movs	r1, #64	; 0x40
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 ff39 	bl	80062ca <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e005      	b.n	800546e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	e000      	b.n	800546e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
  }
}
 800546e:	4618      	mov	r0, r3
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b08a      	sub	sp, #40	; 0x28
 800547a:	af02      	add	r7, sp, #8
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548c:	2b20      	cmp	r3, #32
 800548e:	f040 80b1 	bne.w	80055f4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_UART_Receive+0x28>
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0a9      	b.n	80055f6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2222      	movs	r2, #34	; 0x22
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b8:	f7fc fd38 	bl	8001f2c <HAL_GetTick>
 80054bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	d10e      	bne.n	80054f6 <HAL_UART_Receive+0x80>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <HAL_UART_Receive+0x76>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ea:	e02d      	b.n	8005548 <HAL_UART_Receive+0xd2>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	22ff      	movs	r2, #255	; 0xff
 80054f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054f4:	e028      	b.n	8005548 <HAL_UART_Receive+0xd2>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <HAL_UART_Receive+0xa4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_UART_Receive+0x9a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800550e:	e01b      	b.n	8005548 <HAL_UART_Receive+0xd2>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	227f      	movs	r2, #127	; 0x7f
 8005514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005518:	e016      	b.n	8005548 <HAL_UART_Receive+0xd2>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005522:	d10d      	bne.n	8005540 <HAL_UART_Receive+0xca>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <HAL_UART_Receive+0xc0>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	227f      	movs	r2, #127	; 0x7f
 8005530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005534:	e008      	b.n	8005548 <HAL_UART_Receive+0xd2>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	223f      	movs	r2, #63	; 0x3f
 800553a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800553e:	e003      	b.n	8005548 <HAL_UART_Receive+0xd2>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800554e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005558:	d108      	bne.n	800556c <HAL_UART_Receive+0xf6>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	e003      	b.n	8005574 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005574:	e032      	b.n	80055dc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	2120      	movs	r1, #32
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fea2 	bl	80062ca <UART_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e032      	b.n	80055f6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	b29a      	uxth	r2, r3
 800559e:	8a7b      	ldrh	r3, [r7, #18]
 80055a0:	4013      	ands	r3, r2
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	3302      	adds	r3, #2
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	e00c      	b.n	80055ca <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	8a7b      	ldrh	r3, [r7, #18]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4013      	ands	r3, r2
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3301      	adds	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1c6      	bne.n	8005576 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b0ba      	sub	sp, #232	; 0xe8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005626:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800562a:	f640 030f 	movw	r3, #2063	; 0x80f
 800562e:	4013      	ands	r3, r2
 8005630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d115      	bne.n	8005668 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00f      	beq.n	8005668 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d009      	beq.n	8005668 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 82ac 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
      }
      return;
 8005666:	e2a6      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8117 	beq.w	80058a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800567e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005682:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_UART_IRQHandler+0x298>)
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 810a 	beq.w	80058a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800568c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d011      	beq.n	80056bc <HAL_UART_IRQHandler+0xbc>
 8005698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2201      	movs	r2, #1
 80056aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d011      	beq.n	80056ec <HAL_UART_IRQHandler+0xec>
 80056c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2202      	movs	r2, #2
 80056da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e2:	f043 0204 	orr.w	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d011      	beq.n	800571c <HAL_UART_IRQHandler+0x11c>
 80056f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2204      	movs	r2, #4
 800570a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005712:	f043 0202 	orr.w	r2, r3, #2
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d017      	beq.n	8005758 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005738:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2208      	movs	r2, #8
 8005746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800574e:	f043 0208 	orr.w	r2, r3, #8
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <HAL_UART_IRQHandler+0x18a>
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005780:	f043 0220 	orr.w	r2, r3, #32
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8212 	beq.w	8005bba <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	d005      	beq.n	80057e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d04f      	beq.n	8005882 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fe37 	bl	8006456 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d141      	bne.n	800587a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800580c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800582e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800583a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1d9      	bne.n	80057f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005846:	2b00      	cmp	r3, #0
 8005848:	d013      	beq.n	8005872 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <HAL_UART_IRQHandler+0x29c>)
 8005850:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	4618      	mov	r0, r3
 8005858:	f7fc feb2 	bl	80025c0 <HAL_DMA_Abort_IT>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d017      	beq.n	8005892 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800586c:	4610      	mov	r0, r2
 800586e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00f      	b.n	8005892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9b6 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e00b      	b.n	8005892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9b2 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005880:	e007      	b.n	8005892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9ae 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005890:	e193      	b.n	8005bba <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005892:	bf00      	nop
    return;
 8005894:	e191      	b.n	8005bba <HAL_UART_IRQHandler+0x5ba>
 8005896:	bf00      	nop
 8005898:	04000120 	.word	0x04000120
 800589c:	0800651f 	.word	0x0800651f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f040 814c 	bne.w	8005b42 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 8145 	beq.w	8005b42 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 813e 	beq.w	8005b42 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2210      	movs	r2, #16
 80058cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	f040 80b6 	bne.w	8005a4a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8165 	beq.w	8005bbe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058fe:	429a      	cmp	r2, r3
 8005900:	f080 815d 	bcs.w	8005bbe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800590a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005918:	f000 8086 	beq.w	8005a28 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800594a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800595e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1da      	bne.n	800591c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800598a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800598e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800599c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e1      	bne.n	8005966 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e3      	bne.n	80059a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f8:	f023 0310 	bic.w	r3, r3, #16
 80059fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e4      	bne.n	80059e8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fc fd5c 	bl	80024e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8d8 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a48:	e0b9      	b.n	8005bbe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80ab 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a6 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e4      	bne.n	8005a76 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	623b      	str	r3, [r7, #32]
   return(result);
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e3      	bne.n	8005aac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 0310 	bic.w	r3, r3, #16
 8005b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	69b9      	ldr	r1, [r7, #24]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	617b      	str	r3, [r7, #20]
   return(result);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e4      	bne.n	8005af8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f85c 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b40:	e03f      	b.n	8005bc2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <HAL_UART_IRQHandler+0x56c>
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f853 	bl	8005c10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b6a:	e02d      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01c      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
    }
    return;
 8005b94:	e017      	b.n	8005bc6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d012      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
 8005ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fccb 	bl	800654a <UART_EndTransmit_IT>
    return;
 8005bb4:	e008      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005bb6:	bf00      	nop
 8005bb8:	e006      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005bc6:	bf00      	nop
  }

}
 8005bc8:	37e8      	adds	r7, #232	; 0xe8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4ba6      	ldr	r3, [pc, #664]	; (8005ee8 <UART_SetConfig+0x2c4>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a94      	ldr	r2, [pc, #592]	; (8005eec <UART_SetConfig+0x2c8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d120      	bne.n	8005ce2 <UART_SetConfig+0xbe>
 8005ca0:	4b93      	ldr	r3, [pc, #588]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d816      	bhi.n	8005cdc <UART_SetConfig+0xb8>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x90>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005cd1 	.word	0x08005cd1
 8005cbc:	08005ccb 	.word	0x08005ccb
 8005cc0:	08005cd7 	.word	0x08005cd7
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e150      	b.n	8005f6c <UART_SetConfig+0x348>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	77fb      	strb	r3, [r7, #31]
 8005cce:	e14d      	b.n	8005f6c <UART_SetConfig+0x348>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e14a      	b.n	8005f6c <UART_SetConfig+0x348>
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e147      	b.n	8005f6c <UART_SetConfig+0x348>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e144      	b.n	8005f6c <UART_SetConfig+0x348>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a83      	ldr	r2, [pc, #524]	; (8005ef4 <UART_SetConfig+0x2d0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d132      	bne.n	8005d52 <UART_SetConfig+0x12e>
 8005cec:	4b80      	ldr	r3, [pc, #512]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d828      	bhi.n	8005d4c <UART_SetConfig+0x128>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0xdc>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d4d 	.word	0x08005d4d
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005d4d 	.word	0x08005d4d
 8005d20:	08005d3b 	.word	0x08005d3b
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d4d 	.word	0x08005d4d
 8005d2c:	08005d4d 	.word	0x08005d4d
 8005d30:	08005d47 	.word	0x08005d47
 8005d34:	2300      	movs	r3, #0
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e118      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e115      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d40:	2304      	movs	r3, #4
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e112      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d46:	2308      	movs	r3, #8
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e10f      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e10c      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a68      	ldr	r2, [pc, #416]	; (8005ef8 <UART_SetConfig+0x2d4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d120      	bne.n	8005d9e <UART_SetConfig+0x17a>
 8005d5c:	4b64      	ldr	r3, [pc, #400]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d66:	2b30      	cmp	r3, #48	; 0x30
 8005d68:	d013      	beq.n	8005d92 <UART_SetConfig+0x16e>
 8005d6a:	2b30      	cmp	r3, #48	; 0x30
 8005d6c:	d814      	bhi.n	8005d98 <UART_SetConfig+0x174>
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d009      	beq.n	8005d86 <UART_SetConfig+0x162>
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d810      	bhi.n	8005d98 <UART_SetConfig+0x174>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <UART_SetConfig+0x15c>
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d006      	beq.n	8005d8c <UART_SetConfig+0x168>
 8005d7e:	e00b      	b.n	8005d98 <UART_SetConfig+0x174>
 8005d80:	2300      	movs	r3, #0
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e0f2      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d86:	2302      	movs	r3, #2
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e0ef      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e0ec      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d92:	2308      	movs	r3, #8
 8005d94:	77fb      	strb	r3, [r7, #31]
 8005d96:	e0e9      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e0e6      	b.n	8005f6c <UART_SetConfig+0x348>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a56      	ldr	r2, [pc, #344]	; (8005efc <UART_SetConfig+0x2d8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d120      	bne.n	8005dea <UART_SetConfig+0x1c6>
 8005da8:	4b51      	ldr	r3, [pc, #324]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005db2:	2bc0      	cmp	r3, #192	; 0xc0
 8005db4:	d013      	beq.n	8005dde <UART_SetConfig+0x1ba>
 8005db6:	2bc0      	cmp	r3, #192	; 0xc0
 8005db8:	d814      	bhi.n	8005de4 <UART_SetConfig+0x1c0>
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x1ae>
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d810      	bhi.n	8005de4 <UART_SetConfig+0x1c0>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <UART_SetConfig+0x1a8>
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d006      	beq.n	8005dd8 <UART_SetConfig+0x1b4>
 8005dca:	e00b      	b.n	8005de4 <UART_SetConfig+0x1c0>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e0cc      	b.n	8005f6c <UART_SetConfig+0x348>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e0c9      	b.n	8005f6c <UART_SetConfig+0x348>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e0c6      	b.n	8005f6c <UART_SetConfig+0x348>
 8005dde:	2308      	movs	r3, #8
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e0c3      	b.n	8005f6c <UART_SetConfig+0x348>
 8005de4:	2310      	movs	r3, #16
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e0c0      	b.n	8005f6c <UART_SetConfig+0x348>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a44      	ldr	r2, [pc, #272]	; (8005f00 <UART_SetConfig+0x2dc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d125      	bne.n	8005e40 <UART_SetConfig+0x21c>
 8005df4:	4b3e      	ldr	r3, [pc, #248]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e02:	d017      	beq.n	8005e34 <UART_SetConfig+0x210>
 8005e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e08:	d817      	bhi.n	8005e3a <UART_SetConfig+0x216>
 8005e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0e:	d00b      	beq.n	8005e28 <UART_SetConfig+0x204>
 8005e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e14:	d811      	bhi.n	8005e3a <UART_SetConfig+0x216>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <UART_SetConfig+0x1fe>
 8005e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1e:	d006      	beq.n	8005e2e <UART_SetConfig+0x20a>
 8005e20:	e00b      	b.n	8005e3a <UART_SetConfig+0x216>
 8005e22:	2300      	movs	r3, #0
 8005e24:	77fb      	strb	r3, [r7, #31]
 8005e26:	e0a1      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e09e      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e2e:	2304      	movs	r3, #4
 8005e30:	77fb      	strb	r3, [r7, #31]
 8005e32:	e09b      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e34:	2308      	movs	r3, #8
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e098      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e095      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2f      	ldr	r2, [pc, #188]	; (8005f04 <UART_SetConfig+0x2e0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d125      	bne.n	8005e96 <UART_SetConfig+0x272>
 8005e4a:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e58:	d017      	beq.n	8005e8a <UART_SetConfig+0x266>
 8005e5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e5e:	d817      	bhi.n	8005e90 <UART_SetConfig+0x26c>
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e64:	d00b      	beq.n	8005e7e <UART_SetConfig+0x25a>
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6a:	d811      	bhi.n	8005e90 <UART_SetConfig+0x26c>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <UART_SetConfig+0x254>
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d006      	beq.n	8005e84 <UART_SetConfig+0x260>
 8005e76:	e00b      	b.n	8005e90 <UART_SetConfig+0x26c>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e076      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e073      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e84:	2304      	movs	r3, #4
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e070      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e06d      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e90:	2310      	movs	r3, #16
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e06a      	b.n	8005f6c <UART_SetConfig+0x348>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <UART_SetConfig+0x2e4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d138      	bne.n	8005f12 <UART_SetConfig+0x2ee>
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <UART_SetConfig+0x2cc>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005eaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eae:	d017      	beq.n	8005ee0 <UART_SetConfig+0x2bc>
 8005eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eb4:	d82a      	bhi.n	8005f0c <UART_SetConfig+0x2e8>
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	d00b      	beq.n	8005ed4 <UART_SetConfig+0x2b0>
 8005ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec0:	d824      	bhi.n	8005f0c <UART_SetConfig+0x2e8>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <UART_SetConfig+0x2aa>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d006      	beq.n	8005eda <UART_SetConfig+0x2b6>
 8005ecc:	e01e      	b.n	8005f0c <UART_SetConfig+0x2e8>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e04b      	b.n	8005f6c <UART_SetConfig+0x348>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e048      	b.n	8005f6c <UART_SetConfig+0x348>
 8005eda:	2304      	movs	r3, #4
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e045      	b.n	8005f6c <UART_SetConfig+0x348>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e042      	b.n	8005f6c <UART_SetConfig+0x348>
 8005ee6:	bf00      	nop
 8005ee8:	efff69f3 	.word	0xefff69f3
 8005eec:	40011000 	.word	0x40011000
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40004400 	.word	0x40004400
 8005ef8:	40004800 	.word	0x40004800
 8005efc:	40004c00 	.word	0x40004c00
 8005f00:	40005000 	.word	0x40005000
 8005f04:	40011400 	.word	0x40011400
 8005f08:	40007800 	.word	0x40007800
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e02c      	b.n	8005f6c <UART_SetConfig+0x348>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a72      	ldr	r2, [pc, #456]	; (80060e0 <UART_SetConfig+0x4bc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d125      	bne.n	8005f68 <UART_SetConfig+0x344>
 8005f1c:	4b71      	ldr	r3, [pc, #452]	; (80060e4 <UART_SetConfig+0x4c0>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f2a:	d017      	beq.n	8005f5c <UART_SetConfig+0x338>
 8005f2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f30:	d817      	bhi.n	8005f62 <UART_SetConfig+0x33e>
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f36:	d00b      	beq.n	8005f50 <UART_SetConfig+0x32c>
 8005f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3c:	d811      	bhi.n	8005f62 <UART_SetConfig+0x33e>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <UART_SetConfig+0x326>
 8005f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f46:	d006      	beq.n	8005f56 <UART_SetConfig+0x332>
 8005f48:	e00b      	b.n	8005f62 <UART_SetConfig+0x33e>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e00d      	b.n	8005f6c <UART_SetConfig+0x348>
 8005f50:	2302      	movs	r3, #2
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e00a      	b.n	8005f6c <UART_SetConfig+0x348>
 8005f56:	2304      	movs	r3, #4
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e007      	b.n	8005f6c <UART_SetConfig+0x348>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e004      	b.n	8005f6c <UART_SetConfig+0x348>
 8005f62:	2310      	movs	r3, #16
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e001      	b.n	8005f6c <UART_SetConfig+0x348>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f74:	d15b      	bne.n	800602e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d828      	bhi.n	8005fce <UART_SetConfig+0x3aa>
 8005f7c:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <UART_SetConfig+0x360>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	08005fcf 	.word	0x08005fcf
 8005f94:	08005fbf 	.word	0x08005fbf
 8005f98:	08005fcf 	.word	0x08005fcf
 8005f9c:	08005fcf 	.word	0x08005fcf
 8005fa0:	08005fcf 	.word	0x08005fcf
 8005fa4:	08005fc7 	.word	0x08005fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa8:	f7fd fcec 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8005fac:	61b8      	str	r0, [r7, #24]
        break;
 8005fae:	e013      	b.n	8005fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb0:	f7fd fcfc 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8005fb4:	61b8      	str	r0, [r7, #24]
        break;
 8005fb6:	e00f      	b.n	8005fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb8:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <UART_SetConfig+0x4c4>)
 8005fba:	61bb      	str	r3, [r7, #24]
        break;
 8005fbc:	e00c      	b.n	8005fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fbe:	f7fd fbcf 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 8005fc2:	61b8      	str	r0, [r7, #24]
        break;
 8005fc4:	e008      	b.n	8005fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fca:	61bb      	str	r3, [r7, #24]
        break;
 8005fcc:	e004      	b.n	8005fd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	77bb      	strb	r3, [r7, #30]
        break;
 8005fd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d074      	beq.n	80060c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	005a      	lsls	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	441a      	add	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d916      	bls.n	8006028 <UART_SetConfig+0x404>
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006000:	d212      	bcs.n	8006028 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f023 030f 	bic.w	r3, r3, #15
 800600a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	b29b      	uxth	r3, r3
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	b29a      	uxth	r2, r3
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	4313      	orrs	r3, r2
 800601c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	89fa      	ldrh	r2, [r7, #14]
 8006024:	60da      	str	r2, [r3, #12]
 8006026:	e04f      	b.n	80060c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	77bb      	strb	r3, [r7, #30]
 800602c:	e04c      	b.n	80060c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800602e:	7ffb      	ldrb	r3, [r7, #31]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d828      	bhi.n	8006086 <UART_SetConfig+0x462>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <UART_SetConfig+0x418>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006061 	.word	0x08006061
 8006040:	08006069 	.word	0x08006069
 8006044:	08006071 	.word	0x08006071
 8006048:	08006087 	.word	0x08006087
 800604c:	08006077 	.word	0x08006077
 8006050:	08006087 	.word	0x08006087
 8006054:	08006087 	.word	0x08006087
 8006058:	08006087 	.word	0x08006087
 800605c:	0800607f 	.word	0x0800607f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006060:	f7fd fc90 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8006064:	61b8      	str	r0, [r7, #24]
        break;
 8006066:	e013      	b.n	8006090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006068:	f7fd fca0 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 800606c:	61b8      	str	r0, [r7, #24]
        break;
 800606e:	e00f      	b.n	8006090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006070:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <UART_SetConfig+0x4c4>)
 8006072:	61bb      	str	r3, [r7, #24]
        break;
 8006074:	e00c      	b.n	8006090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006076:	f7fd fb73 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800607a:	61b8      	str	r0, [r7, #24]
        break;
 800607c:	e008      	b.n	8006090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006082:	61bb      	str	r3, [r7, #24]
        break;
 8006084:	e004      	b.n	8006090 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	77bb      	strb	r3, [r7, #30]
        break;
 800608e:	bf00      	nop
    }

    if (pclk != 0U)
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d018      	beq.n	80060c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	085a      	lsrs	r2, r3, #1
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	441a      	add	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d909      	bls.n	80060c4 <UART_SetConfig+0x4a0>
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b6:	d205      	bcs.n	80060c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	e001      	b.n	80060c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40007c00 	.word	0x40007c00
 80060e4:	40023800 	.word	0x40023800
 80060e8:	00f42400 	.word	0x00f42400

080060ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01a      	beq.n	8006202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ea:	d10a      	bne.n	8006202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	605a      	str	r2, [r3, #4]
  }
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006240:	f7fb fe74 	bl	8001f2c <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b08      	cmp	r3, #8
 8006252:	d10e      	bne.n	8006272 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f831 	bl	80062ca <UART_WaitOnFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e027      	b.n	80062c2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b04      	cmp	r3, #4
 800627e:	d10e      	bne.n	800629e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f81b 	bl	80062ca <UART_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e011      	b.n	80062c2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b09c      	sub	sp, #112	; 0x70
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062da:	e0a7      	b.n	800642c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	f000 80a3 	beq.w	800642c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fb fe21 	bl	8001f2c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <UART_WaitOnFlagUntilTimeout+0x32>
 80062f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d13f      	bne.n	800637c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800630a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006310:	667b      	str	r3, [r7, #100]	; 0x64
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800631a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800631c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006320:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e6      	bne.n	80062fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	663b      	str	r3, [r7, #96]	; 0x60
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800634e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006350:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800635c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e068      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d050      	beq.n	800642c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006398:	d148      	bne.n	800642c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
 80063c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	613b      	str	r3, [r7, #16]
   return(result);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063f6:	623a      	str	r2, [r7, #32]
 80063f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	69f9      	ldr	r1, [r7, #28]
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	61bb      	str	r3, [r7, #24]
   return(result);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e010      	b.n	800644e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4013      	ands	r3, r2
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	bf0c      	ite	eq
 800643c:	2301      	moveq	r3, #1
 800643e:	2300      	movne	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	429a      	cmp	r2, r3
 8006448:	f43f af48 	beq.w	80062dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3770      	adds	r7, #112	; 0x70
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006456:	b480      	push	{r7}
 8006458:	b095      	sub	sp, #84	; 0x54
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
 800647e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d118      	bne.n	80064fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f023 0310 	bic.w	r3, r3, #16
 80064e0:	647b      	str	r3, [r7, #68]	; 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	613b      	str	r3, [r7, #16]
   return(result);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006512:	bf00      	nop
 8006514:	3754      	adds	r7, #84	; 0x54
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fb51 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b088      	sub	sp, #32
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6979      	ldr	r1, [r7, #20]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	613b      	str	r3, [r7, #16]
   return(result);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e6      	bne.n	8006552 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fb1d 	bl	8005bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006596:	bf00      	nop
 8006598:	3720      	adds	r7, #32
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <__errno>:
 80065a0:	4b01      	ldr	r3, [pc, #4]	; (80065a8 <__errno+0x8>)
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	2000005c 	.word	0x2000005c

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4d0d      	ldr	r5, [pc, #52]	; (80065e4 <__libc_init_array+0x38>)
 80065b0:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	2600      	movs	r6, #0
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	4d0b      	ldr	r5, [pc, #44]	; (80065ec <__libc_init_array+0x40>)
 80065be:	4c0c      	ldr	r4, [pc, #48]	; (80065f0 <__libc_init_array+0x44>)
 80065c0:	f001 f824 	bl	800760c <_init>
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	2600      	movs	r6, #0
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	08007f84 	.word	0x08007f84
 80065e8:	08007f84 	.word	0x08007f84
 80065ec:	08007f84 	.word	0x08007f84
 80065f0:	08007f88 	.word	0x08007f88

080065f4 <memset>:
 80065f4:	4402      	add	r2, r0
 80065f6:	4603      	mov	r3, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <_free_r>:
 8006604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006606:	2900      	cmp	r1, #0
 8006608:	d044      	beq.n	8006694 <_free_r+0x90>
 800660a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660e:	9001      	str	r0, [sp, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f1a1 0404 	sub.w	r4, r1, #4
 8006616:	bfb8      	it	lt
 8006618:	18e4      	addlt	r4, r4, r3
 800661a:	f000 fc51 	bl	8006ec0 <__malloc_lock>
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <_free_r+0x94>)
 8006620:	9801      	ldr	r0, [sp, #4]
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	b933      	cbnz	r3, 8006634 <_free_r+0x30>
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	6014      	str	r4, [r2, #0]
 800662a:	b003      	add	sp, #12
 800662c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006630:	f000 bc4c 	b.w	8006ecc <__malloc_unlock>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d908      	bls.n	800664a <_free_r+0x46>
 8006638:	6825      	ldr	r5, [r4, #0]
 800663a:	1961      	adds	r1, r4, r5
 800663c:	428b      	cmp	r3, r1
 800663e:	bf01      	itttt	eq
 8006640:	6819      	ldreq	r1, [r3, #0]
 8006642:	685b      	ldreq	r3, [r3, #4]
 8006644:	1949      	addeq	r1, r1, r5
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	e7ed      	b.n	8006626 <_free_r+0x22>
 800664a:	461a      	mov	r2, r3
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b10b      	cbz	r3, 8006654 <_free_r+0x50>
 8006650:	42a3      	cmp	r3, r4
 8006652:	d9fa      	bls.n	800664a <_free_r+0x46>
 8006654:	6811      	ldr	r1, [r2, #0]
 8006656:	1855      	adds	r5, r2, r1
 8006658:	42a5      	cmp	r5, r4
 800665a:	d10b      	bne.n	8006674 <_free_r+0x70>
 800665c:	6824      	ldr	r4, [r4, #0]
 800665e:	4421      	add	r1, r4
 8006660:	1854      	adds	r4, r2, r1
 8006662:	42a3      	cmp	r3, r4
 8006664:	6011      	str	r1, [r2, #0]
 8006666:	d1e0      	bne.n	800662a <_free_r+0x26>
 8006668:	681c      	ldr	r4, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	6053      	str	r3, [r2, #4]
 800666e:	4421      	add	r1, r4
 8006670:	6011      	str	r1, [r2, #0]
 8006672:	e7da      	b.n	800662a <_free_r+0x26>
 8006674:	d902      	bls.n	800667c <_free_r+0x78>
 8006676:	230c      	movs	r3, #12
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	e7d6      	b.n	800662a <_free_r+0x26>
 800667c:	6825      	ldr	r5, [r4, #0]
 800667e:	1961      	adds	r1, r4, r5
 8006680:	428b      	cmp	r3, r1
 8006682:	bf04      	itt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	bf04      	itt	eq
 800668c:	1949      	addeq	r1, r1, r5
 800668e:	6021      	streq	r1, [r4, #0]
 8006690:	6054      	str	r4, [r2, #4]
 8006692:	e7ca      	b.n	800662a <_free_r+0x26>
 8006694:	b003      	add	sp, #12
 8006696:	bd30      	pop	{r4, r5, pc}
 8006698:	200004b0 	.word	0x200004b0

0800669c <sbrk_aligned>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4e0e      	ldr	r6, [pc, #56]	; (80066d8 <sbrk_aligned+0x3c>)
 80066a0:	460c      	mov	r4, r1
 80066a2:	6831      	ldr	r1, [r6, #0]
 80066a4:	4605      	mov	r5, r0
 80066a6:	b911      	cbnz	r1, 80066ae <sbrk_aligned+0x12>
 80066a8:	f000 f91a 	bl	80068e0 <_sbrk_r>
 80066ac:	6030      	str	r0, [r6, #0]
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f915 	bl	80068e0 <_sbrk_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d00a      	beq.n	80066d0 <sbrk_aligned+0x34>
 80066ba:	1cc4      	adds	r4, r0, #3
 80066bc:	f024 0403 	bic.w	r4, r4, #3
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d007      	beq.n	80066d4 <sbrk_aligned+0x38>
 80066c4:	1a21      	subs	r1, r4, r0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f90a 	bl	80068e0 <_sbrk_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d101      	bne.n	80066d4 <sbrk_aligned+0x38>
 80066d0:	f04f 34ff 	mov.w	r4, #4294967295
 80066d4:	4620      	mov	r0, r4
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	200004b4 	.word	0x200004b4

080066dc <_malloc_r>:
 80066dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e0:	1ccd      	adds	r5, r1, #3
 80066e2:	f025 0503 	bic.w	r5, r5, #3
 80066e6:	3508      	adds	r5, #8
 80066e8:	2d0c      	cmp	r5, #12
 80066ea:	bf38      	it	cc
 80066ec:	250c      	movcc	r5, #12
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	4607      	mov	r7, r0
 80066f2:	db01      	blt.n	80066f8 <_malloc_r+0x1c>
 80066f4:	42a9      	cmp	r1, r5
 80066f6:	d905      	bls.n	8006704 <_malloc_r+0x28>
 80066f8:	230c      	movs	r3, #12
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	2600      	movs	r6, #0
 80066fe:	4630      	mov	r0, r6
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006704:	4e2e      	ldr	r6, [pc, #184]	; (80067c0 <_malloc_r+0xe4>)
 8006706:	f000 fbdb 	bl	8006ec0 <__malloc_lock>
 800670a:	6833      	ldr	r3, [r6, #0]
 800670c:	461c      	mov	r4, r3
 800670e:	bb34      	cbnz	r4, 800675e <_malloc_r+0x82>
 8006710:	4629      	mov	r1, r5
 8006712:	4638      	mov	r0, r7
 8006714:	f7ff ffc2 	bl	800669c <sbrk_aligned>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	4604      	mov	r4, r0
 800671c:	d14d      	bne.n	80067ba <_malloc_r+0xde>
 800671e:	6834      	ldr	r4, [r6, #0]
 8006720:	4626      	mov	r6, r4
 8006722:	2e00      	cmp	r6, #0
 8006724:	d140      	bne.n	80067a8 <_malloc_r+0xcc>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	4631      	mov	r1, r6
 800672a:	4638      	mov	r0, r7
 800672c:	eb04 0803 	add.w	r8, r4, r3
 8006730:	f000 f8d6 	bl	80068e0 <_sbrk_r>
 8006734:	4580      	cmp	r8, r0
 8006736:	d13a      	bne.n	80067ae <_malloc_r+0xd2>
 8006738:	6821      	ldr	r1, [r4, #0]
 800673a:	3503      	adds	r5, #3
 800673c:	1a6d      	subs	r5, r5, r1
 800673e:	f025 0503 	bic.w	r5, r5, #3
 8006742:	3508      	adds	r5, #8
 8006744:	2d0c      	cmp	r5, #12
 8006746:	bf38      	it	cc
 8006748:	250c      	movcc	r5, #12
 800674a:	4629      	mov	r1, r5
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff ffa5 	bl	800669c <sbrk_aligned>
 8006752:	3001      	adds	r0, #1
 8006754:	d02b      	beq.n	80067ae <_malloc_r+0xd2>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	442b      	add	r3, r5
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	e00e      	b.n	800677c <_malloc_r+0xa0>
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	1b52      	subs	r2, r2, r5
 8006762:	d41e      	bmi.n	80067a2 <_malloc_r+0xc6>
 8006764:	2a0b      	cmp	r2, #11
 8006766:	d916      	bls.n	8006796 <_malloc_r+0xba>
 8006768:	1961      	adds	r1, r4, r5
 800676a:	42a3      	cmp	r3, r4
 800676c:	6025      	str	r5, [r4, #0]
 800676e:	bf18      	it	ne
 8006770:	6059      	strne	r1, [r3, #4]
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	bf08      	it	eq
 8006776:	6031      	streq	r1, [r6, #0]
 8006778:	5162      	str	r2, [r4, r5]
 800677a:	604b      	str	r3, [r1, #4]
 800677c:	4638      	mov	r0, r7
 800677e:	f104 060b 	add.w	r6, r4, #11
 8006782:	f000 fba3 	bl	8006ecc <__malloc_unlock>
 8006786:	f026 0607 	bic.w	r6, r6, #7
 800678a:	1d23      	adds	r3, r4, #4
 800678c:	1af2      	subs	r2, r6, r3
 800678e:	d0b6      	beq.n	80066fe <_malloc_r+0x22>
 8006790:	1b9b      	subs	r3, r3, r6
 8006792:	50a3      	str	r3, [r4, r2]
 8006794:	e7b3      	b.n	80066fe <_malloc_r+0x22>
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	42a3      	cmp	r3, r4
 800679a:	bf0c      	ite	eq
 800679c:	6032      	streq	r2, [r6, #0]
 800679e:	605a      	strne	r2, [r3, #4]
 80067a0:	e7ec      	b.n	800677c <_malloc_r+0xa0>
 80067a2:	4623      	mov	r3, r4
 80067a4:	6864      	ldr	r4, [r4, #4]
 80067a6:	e7b2      	b.n	800670e <_malloc_r+0x32>
 80067a8:	4634      	mov	r4, r6
 80067aa:	6876      	ldr	r6, [r6, #4]
 80067ac:	e7b9      	b.n	8006722 <_malloc_r+0x46>
 80067ae:	230c      	movs	r3, #12
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4638      	mov	r0, r7
 80067b4:	f000 fb8a 	bl	8006ecc <__malloc_unlock>
 80067b8:	e7a1      	b.n	80066fe <_malloc_r+0x22>
 80067ba:	6025      	str	r5, [r4, #0]
 80067bc:	e7de      	b.n	800677c <_malloc_r+0xa0>
 80067be:	bf00      	nop
 80067c0:	200004b0 	.word	0x200004b0

080067c4 <iprintf>:
 80067c4:	b40f      	push	{r0, r1, r2, r3}
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <iprintf+0x2c>)
 80067c8:	b513      	push	{r0, r1, r4, lr}
 80067ca:	681c      	ldr	r4, [r3, #0]
 80067cc:	b124      	cbz	r4, 80067d8 <iprintf+0x14>
 80067ce:	69a3      	ldr	r3, [r4, #24]
 80067d0:	b913      	cbnz	r3, 80067d8 <iprintf+0x14>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fa6e 	bl	8006cb4 <__sinit>
 80067d8:	ab05      	add	r3, sp, #20
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	68a1      	ldr	r1, [r4, #8]
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 fba3 	bl	8006f2c <_vfiprintf_r>
 80067e6:	b002      	add	sp, #8
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	b004      	add	sp, #16
 80067ee:	4770      	bx	lr
 80067f0:	2000005c 	.word	0x2000005c

080067f4 <_puts_r>:
 80067f4:	b570      	push	{r4, r5, r6, lr}
 80067f6:	460e      	mov	r6, r1
 80067f8:	4605      	mov	r5, r0
 80067fa:	b118      	cbz	r0, 8006804 <_puts_r+0x10>
 80067fc:	6983      	ldr	r3, [r0, #24]
 80067fe:	b90b      	cbnz	r3, 8006804 <_puts_r+0x10>
 8006800:	f000 fa58 	bl	8006cb4 <__sinit>
 8006804:	69ab      	ldr	r3, [r5, #24]
 8006806:	68ac      	ldr	r4, [r5, #8]
 8006808:	b913      	cbnz	r3, 8006810 <_puts_r+0x1c>
 800680a:	4628      	mov	r0, r5
 800680c:	f000 fa52 	bl	8006cb4 <__sinit>
 8006810:	4b2c      	ldr	r3, [pc, #176]	; (80068c4 <_puts_r+0xd0>)
 8006812:	429c      	cmp	r4, r3
 8006814:	d120      	bne.n	8006858 <_puts_r+0x64>
 8006816:	686c      	ldr	r4, [r5, #4]
 8006818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800681a:	07db      	lsls	r3, r3, #31
 800681c:	d405      	bmi.n	800682a <_puts_r+0x36>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	0598      	lsls	r0, r3, #22
 8006822:	d402      	bmi.n	800682a <_puts_r+0x36>
 8006824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006826:	f000 fae3 	bl	8006df0 <__retarget_lock_acquire_recursive>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	0719      	lsls	r1, r3, #28
 800682e:	d51d      	bpl.n	800686c <_puts_r+0x78>
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	b1db      	cbz	r3, 800686c <_puts_r+0x78>
 8006834:	3e01      	subs	r6, #1
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800683c:	3b01      	subs	r3, #1
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	bb39      	cbnz	r1, 8006892 <_puts_r+0x9e>
 8006842:	2b00      	cmp	r3, #0
 8006844:	da38      	bge.n	80068b8 <_puts_r+0xc4>
 8006846:	4622      	mov	r2, r4
 8006848:	210a      	movs	r1, #10
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f858 	bl	8006900 <__swbuf_r>
 8006850:	3001      	adds	r0, #1
 8006852:	d011      	beq.n	8006878 <_puts_r+0x84>
 8006854:	250a      	movs	r5, #10
 8006856:	e011      	b.n	800687c <_puts_r+0x88>
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <_puts_r+0xd4>)
 800685a:	429c      	cmp	r4, r3
 800685c:	d101      	bne.n	8006862 <_puts_r+0x6e>
 800685e:	68ac      	ldr	r4, [r5, #8]
 8006860:	e7da      	b.n	8006818 <_puts_r+0x24>
 8006862:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <_puts_r+0xd8>)
 8006864:	429c      	cmp	r4, r3
 8006866:	bf08      	it	eq
 8006868:	68ec      	ldreq	r4, [r5, #12]
 800686a:	e7d5      	b.n	8006818 <_puts_r+0x24>
 800686c:	4621      	mov	r1, r4
 800686e:	4628      	mov	r0, r5
 8006870:	f000 f898 	bl	80069a4 <__swsetup_r>
 8006874:	2800      	cmp	r0, #0
 8006876:	d0dd      	beq.n	8006834 <_puts_r+0x40>
 8006878:	f04f 35ff 	mov.w	r5, #4294967295
 800687c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800687e:	07da      	lsls	r2, r3, #31
 8006880:	d405      	bmi.n	800688e <_puts_r+0x9a>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	059b      	lsls	r3, r3, #22
 8006886:	d402      	bmi.n	800688e <_puts_r+0x9a>
 8006888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688a:	f000 fab2 	bl	8006df2 <__retarget_lock_release_recursive>
 800688e:	4628      	mov	r0, r5
 8006890:	bd70      	pop	{r4, r5, r6, pc}
 8006892:	2b00      	cmp	r3, #0
 8006894:	da04      	bge.n	80068a0 <_puts_r+0xac>
 8006896:	69a2      	ldr	r2, [r4, #24]
 8006898:	429a      	cmp	r2, r3
 800689a:	dc06      	bgt.n	80068aa <_puts_r+0xb6>
 800689c:	290a      	cmp	r1, #10
 800689e:	d004      	beq.n	80068aa <_puts_r+0xb6>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	7019      	strb	r1, [r3, #0]
 80068a8:	e7c5      	b.n	8006836 <_puts_r+0x42>
 80068aa:	4622      	mov	r2, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f827 	bl	8006900 <__swbuf_r>
 80068b2:	3001      	adds	r0, #1
 80068b4:	d1bf      	bne.n	8006836 <_puts_r+0x42>
 80068b6:	e7df      	b.n	8006878 <_puts_r+0x84>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	250a      	movs	r5, #10
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	701d      	strb	r5, [r3, #0]
 80068c2:	e7db      	b.n	800687c <_puts_r+0x88>
 80068c4:	08007f08 	.word	0x08007f08
 80068c8:	08007f28 	.word	0x08007f28
 80068cc:	08007ee8 	.word	0x08007ee8

080068d0 <puts>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <puts+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f7ff bf8d 	b.w	80067f4 <_puts_r>
 80068da:	bf00      	nop
 80068dc:	2000005c 	.word	0x2000005c

080068e0 <_sbrk_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d06      	ldr	r5, [pc, #24]	; (80068fc <_sbrk_r+0x1c>)
 80068e4:	2300      	movs	r3, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fb f8a4 	bl	8001a38 <_sbrk>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_sbrk_r+0x1a>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_sbrk_r+0x1a>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	200004bc 	.word	0x200004bc

08006900 <__swbuf_r>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	460e      	mov	r6, r1
 8006904:	4614      	mov	r4, r2
 8006906:	4605      	mov	r5, r0
 8006908:	b118      	cbz	r0, 8006912 <__swbuf_r+0x12>
 800690a:	6983      	ldr	r3, [r0, #24]
 800690c:	b90b      	cbnz	r3, 8006912 <__swbuf_r+0x12>
 800690e:	f000 f9d1 	bl	8006cb4 <__sinit>
 8006912:	4b21      	ldr	r3, [pc, #132]	; (8006998 <__swbuf_r+0x98>)
 8006914:	429c      	cmp	r4, r3
 8006916:	d12b      	bne.n	8006970 <__swbuf_r+0x70>
 8006918:	686c      	ldr	r4, [r5, #4]
 800691a:	69a3      	ldr	r3, [r4, #24]
 800691c:	60a3      	str	r3, [r4, #8]
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	071a      	lsls	r2, r3, #28
 8006922:	d52f      	bpl.n	8006984 <__swbuf_r+0x84>
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	b36b      	cbz	r3, 8006984 <__swbuf_r+0x84>
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	1ac0      	subs	r0, r0, r3
 800692e:	6963      	ldr	r3, [r4, #20]
 8006930:	b2f6      	uxtb	r6, r6
 8006932:	4283      	cmp	r3, r0
 8006934:	4637      	mov	r7, r6
 8006936:	dc04      	bgt.n	8006942 <__swbuf_r+0x42>
 8006938:	4621      	mov	r1, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f926 	bl	8006b8c <_fflush_r>
 8006940:	bb30      	cbnz	r0, 8006990 <__swbuf_r+0x90>
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	3b01      	subs	r3, #1
 8006946:	60a3      	str	r3, [r4, #8]
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	701e      	strb	r6, [r3, #0]
 8006950:	6963      	ldr	r3, [r4, #20]
 8006952:	3001      	adds	r0, #1
 8006954:	4283      	cmp	r3, r0
 8006956:	d004      	beq.n	8006962 <__swbuf_r+0x62>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	07db      	lsls	r3, r3, #31
 800695c:	d506      	bpl.n	800696c <__swbuf_r+0x6c>
 800695e:	2e0a      	cmp	r6, #10
 8006960:	d104      	bne.n	800696c <__swbuf_r+0x6c>
 8006962:	4621      	mov	r1, r4
 8006964:	4628      	mov	r0, r5
 8006966:	f000 f911 	bl	8006b8c <_fflush_r>
 800696a:	b988      	cbnz	r0, 8006990 <__swbuf_r+0x90>
 800696c:	4638      	mov	r0, r7
 800696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <__swbuf_r+0x9c>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d101      	bne.n	800697a <__swbuf_r+0x7a>
 8006976:	68ac      	ldr	r4, [r5, #8]
 8006978:	e7cf      	b.n	800691a <__swbuf_r+0x1a>
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <__swbuf_r+0xa0>)
 800697c:	429c      	cmp	r4, r3
 800697e:	bf08      	it	eq
 8006980:	68ec      	ldreq	r4, [r5, #12]
 8006982:	e7ca      	b.n	800691a <__swbuf_r+0x1a>
 8006984:	4621      	mov	r1, r4
 8006986:	4628      	mov	r0, r5
 8006988:	f000 f80c 	bl	80069a4 <__swsetup_r>
 800698c:	2800      	cmp	r0, #0
 800698e:	d0cb      	beq.n	8006928 <__swbuf_r+0x28>
 8006990:	f04f 37ff 	mov.w	r7, #4294967295
 8006994:	e7ea      	b.n	800696c <__swbuf_r+0x6c>
 8006996:	bf00      	nop
 8006998:	08007f08 	.word	0x08007f08
 800699c:	08007f28 	.word	0x08007f28
 80069a0:	08007ee8 	.word	0x08007ee8

080069a4 <__swsetup_r>:
 80069a4:	4b32      	ldr	r3, [pc, #200]	; (8006a70 <__swsetup_r+0xcc>)
 80069a6:	b570      	push	{r4, r5, r6, lr}
 80069a8:	681d      	ldr	r5, [r3, #0]
 80069aa:	4606      	mov	r6, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	b125      	cbz	r5, 80069ba <__swsetup_r+0x16>
 80069b0:	69ab      	ldr	r3, [r5, #24]
 80069b2:	b913      	cbnz	r3, 80069ba <__swsetup_r+0x16>
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f97d 	bl	8006cb4 <__sinit>
 80069ba:	4b2e      	ldr	r3, [pc, #184]	; (8006a74 <__swsetup_r+0xd0>)
 80069bc:	429c      	cmp	r4, r3
 80069be:	d10f      	bne.n	80069e0 <__swsetup_r+0x3c>
 80069c0:	686c      	ldr	r4, [r5, #4]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c8:	0719      	lsls	r1, r3, #28
 80069ca:	d42c      	bmi.n	8006a26 <__swsetup_r+0x82>
 80069cc:	06dd      	lsls	r5, r3, #27
 80069ce:	d411      	bmi.n	80069f4 <__swsetup_r+0x50>
 80069d0:	2309      	movs	r3, #9
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	e03e      	b.n	8006a5e <__swsetup_r+0xba>
 80069e0:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <__swsetup_r+0xd4>)
 80069e2:	429c      	cmp	r4, r3
 80069e4:	d101      	bne.n	80069ea <__swsetup_r+0x46>
 80069e6:	68ac      	ldr	r4, [r5, #8]
 80069e8:	e7eb      	b.n	80069c2 <__swsetup_r+0x1e>
 80069ea:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <__swsetup_r+0xd8>)
 80069ec:	429c      	cmp	r4, r3
 80069ee:	bf08      	it	eq
 80069f0:	68ec      	ldreq	r4, [r5, #12]
 80069f2:	e7e6      	b.n	80069c2 <__swsetup_r+0x1e>
 80069f4:	0758      	lsls	r0, r3, #29
 80069f6:	d512      	bpl.n	8006a1e <__swsetup_r+0x7a>
 80069f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fa:	b141      	cbz	r1, 8006a0e <__swsetup_r+0x6a>
 80069fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d002      	beq.n	8006a0a <__swsetup_r+0x66>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff fdfd 	bl	8006604 <_free_r>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	b94b      	cbnz	r3, 8006a3e <__swsetup_r+0x9a>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a34:	d003      	beq.n	8006a3e <__swsetup_r+0x9a>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 fa01 	bl	8006e40 <__smakebuf_r>
 8006a3e:	89a0      	ldrh	r0, [r4, #12]
 8006a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a44:	f010 0301 	ands.w	r3, r0, #1
 8006a48:	d00a      	beq.n	8006a60 <__swsetup_r+0xbc>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	6963      	ldr	r3, [r4, #20]
 8006a50:	425b      	negs	r3, r3
 8006a52:	61a3      	str	r3, [r4, #24]
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	b943      	cbnz	r3, 8006a6a <__swsetup_r+0xc6>
 8006a58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a5c:	d1ba      	bne.n	80069d4 <__swsetup_r+0x30>
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	0781      	lsls	r1, r0, #30
 8006a62:	bf58      	it	pl
 8006a64:	6963      	ldrpl	r3, [r4, #20]
 8006a66:	60a3      	str	r3, [r4, #8]
 8006a68:	e7f4      	b.n	8006a54 <__swsetup_r+0xb0>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e7f7      	b.n	8006a5e <__swsetup_r+0xba>
 8006a6e:	bf00      	nop
 8006a70:	2000005c 	.word	0x2000005c
 8006a74:	08007f08 	.word	0x08007f08
 8006a78:	08007f28 	.word	0x08007f28
 8006a7c:	08007ee8 	.word	0x08007ee8

08006a80 <__sflush_r>:
 8006a80:	898a      	ldrh	r2, [r1, #12]
 8006a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	4605      	mov	r5, r0
 8006a88:	0710      	lsls	r0, r2, #28
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	d458      	bmi.n	8006b40 <__sflush_r+0xc0>
 8006a8e:	684b      	ldr	r3, [r1, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dc05      	bgt.n	8006aa0 <__sflush_r+0x20>
 8006a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc02      	bgt.n	8006aa0 <__sflush_r+0x20>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa2:	2e00      	cmp	r6, #0
 8006aa4:	d0f9      	beq.n	8006a9a <__sflush_r+0x1a>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006aac:	682f      	ldr	r7, [r5, #0]
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	d032      	beq.n	8006b18 <__sflush_r+0x98>
 8006ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	075a      	lsls	r2, r3, #29
 8006ab8:	d505      	bpl.n	8006ac6 <__sflush_r+0x46>
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	1ac0      	subs	r0, r0, r3
 8006abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac0:	b10b      	cbz	r3, 8006ac6 <__sflush_r+0x46>
 8006ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac4:	1ac0      	subs	r0, r0, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4602      	mov	r2, r0
 8006aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006acc:	6a21      	ldr	r1, [r4, #32]
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b0      	blx	r6
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	d106      	bne.n	8006ae6 <__sflush_r+0x66>
 8006ad8:	6829      	ldr	r1, [r5, #0]
 8006ada:	291d      	cmp	r1, #29
 8006adc:	d82c      	bhi.n	8006b38 <__sflush_r+0xb8>
 8006ade:	4a2a      	ldr	r2, [pc, #168]	; (8006b88 <__sflush_r+0x108>)
 8006ae0:	40ca      	lsrs	r2, r1
 8006ae2:	07d6      	lsls	r6, r2, #31
 8006ae4:	d528      	bpl.n	8006b38 <__sflush_r+0xb8>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	6062      	str	r2, [r4, #4]
 8006aea:	04d9      	lsls	r1, r3, #19
 8006aec:	6922      	ldr	r2, [r4, #16]
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	d504      	bpl.n	8006afc <__sflush_r+0x7c>
 8006af2:	1c42      	adds	r2, r0, #1
 8006af4:	d101      	bne.n	8006afa <__sflush_r+0x7a>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	b903      	cbnz	r3, 8006afc <__sflush_r+0x7c>
 8006afa:	6560      	str	r0, [r4, #84]	; 0x54
 8006afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006afe:	602f      	str	r7, [r5, #0]
 8006b00:	2900      	cmp	r1, #0
 8006b02:	d0ca      	beq.n	8006a9a <__sflush_r+0x1a>
 8006b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	d002      	beq.n	8006b12 <__sflush_r+0x92>
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f7ff fd79 	bl	8006604 <_free_r>
 8006b12:	2000      	movs	r0, #0
 8006b14:	6360      	str	r0, [r4, #52]	; 0x34
 8006b16:	e7c1      	b.n	8006a9c <__sflush_r+0x1c>
 8006b18:	6a21      	ldr	r1, [r4, #32]
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b0      	blx	r6
 8006b20:	1c41      	adds	r1, r0, #1
 8006b22:	d1c7      	bne.n	8006ab4 <__sflush_r+0x34>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0c4      	beq.n	8006ab4 <__sflush_r+0x34>
 8006b2a:	2b1d      	cmp	r3, #29
 8006b2c:	d001      	beq.n	8006b32 <__sflush_r+0xb2>
 8006b2e:	2b16      	cmp	r3, #22
 8006b30:	d101      	bne.n	8006b36 <__sflush_r+0xb6>
 8006b32:	602f      	str	r7, [r5, #0]
 8006b34:	e7b1      	b.n	8006a9a <__sflush_r+0x1a>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	e7ad      	b.n	8006a9c <__sflush_r+0x1c>
 8006b40:	690f      	ldr	r7, [r1, #16]
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d0a9      	beq.n	8006a9a <__sflush_r+0x1a>
 8006b46:	0793      	lsls	r3, r2, #30
 8006b48:	680e      	ldr	r6, [r1, #0]
 8006b4a:	bf08      	it	eq
 8006b4c:	694b      	ldreq	r3, [r1, #20]
 8006b4e:	600f      	str	r7, [r1, #0]
 8006b50:	bf18      	it	ne
 8006b52:	2300      	movne	r3, #0
 8006b54:	eba6 0807 	sub.w	r8, r6, r7
 8006b58:	608b      	str	r3, [r1, #8]
 8006b5a:	f1b8 0f00 	cmp.w	r8, #0
 8006b5e:	dd9c      	ble.n	8006a9a <__sflush_r+0x1a>
 8006b60:	6a21      	ldr	r1, [r4, #32]
 8006b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b64:	4643      	mov	r3, r8
 8006b66:	463a      	mov	r2, r7
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b0      	blx	r6
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dc06      	bgt.n	8006b7e <__sflush_r+0xfe>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	e78e      	b.n	8006a9c <__sflush_r+0x1c>
 8006b7e:	4407      	add	r7, r0
 8006b80:	eba8 0800 	sub.w	r8, r8, r0
 8006b84:	e7e9      	b.n	8006b5a <__sflush_r+0xda>
 8006b86:	bf00      	nop
 8006b88:	20400001 	.word	0x20400001

08006b8c <_fflush_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	4605      	mov	r5, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	b913      	cbnz	r3, 8006b9c <_fflush_r+0x10>
 8006b96:	2500      	movs	r5, #0
 8006b98:	4628      	mov	r0, r5
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	b118      	cbz	r0, 8006ba6 <_fflush_r+0x1a>
 8006b9e:	6983      	ldr	r3, [r0, #24]
 8006ba0:	b90b      	cbnz	r3, 8006ba6 <_fflush_r+0x1a>
 8006ba2:	f000 f887 	bl	8006cb4 <__sinit>
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <_fflush_r+0x6c>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	d11b      	bne.n	8006be4 <_fflush_r+0x58>
 8006bac:	686c      	ldr	r4, [r5, #4]
 8006bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ef      	beq.n	8006b96 <_fflush_r+0xa>
 8006bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bb8:	07d0      	lsls	r0, r2, #31
 8006bba:	d404      	bmi.n	8006bc6 <_fflush_r+0x3a>
 8006bbc:	0599      	lsls	r1, r3, #22
 8006bbe:	d402      	bmi.n	8006bc6 <_fflush_r+0x3a>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc2:	f000 f915 	bl	8006df0 <__retarget_lock_acquire_recursive>
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f7ff ff59 	bl	8006a80 <__sflush_r>
 8006bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd0:	07da      	lsls	r2, r3, #31
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	d4e0      	bmi.n	8006b98 <_fflush_r+0xc>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	059b      	lsls	r3, r3, #22
 8006bda:	d4dd      	bmi.n	8006b98 <_fflush_r+0xc>
 8006bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bde:	f000 f908 	bl	8006df2 <__retarget_lock_release_recursive>
 8006be2:	e7d9      	b.n	8006b98 <_fflush_r+0xc>
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <_fflush_r+0x70>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d101      	bne.n	8006bee <_fflush_r+0x62>
 8006bea:	68ac      	ldr	r4, [r5, #8]
 8006bec:	e7df      	b.n	8006bae <_fflush_r+0x22>
 8006bee:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <_fflush_r+0x74>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	bf08      	it	eq
 8006bf4:	68ec      	ldreq	r4, [r5, #12]
 8006bf6:	e7da      	b.n	8006bae <_fflush_r+0x22>
 8006bf8:	08007f08 	.word	0x08007f08
 8006bfc:	08007f28 	.word	0x08007f28
 8006c00:	08007ee8 	.word	0x08007ee8

08006c04 <std>:
 8006c04:	2300      	movs	r3, #0
 8006c06:	b510      	push	{r4, lr}
 8006c08:	4604      	mov	r4, r0
 8006c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c12:	6083      	str	r3, [r0, #8]
 8006c14:	8181      	strh	r1, [r0, #12]
 8006c16:	6643      	str	r3, [r0, #100]	; 0x64
 8006c18:	81c2      	strh	r2, [r0, #14]
 8006c1a:	6183      	str	r3, [r0, #24]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	2208      	movs	r2, #8
 8006c20:	305c      	adds	r0, #92	; 0x5c
 8006c22:	f7ff fce7 	bl	80065f4 <memset>
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <std+0x38>)
 8006c28:	6263      	str	r3, [r4, #36]	; 0x24
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <std+0x3c>)
 8006c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <std+0x40>)
 8006c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <std+0x44>)
 8006c34:	6224      	str	r4, [r4, #32]
 8006c36:	6323      	str	r3, [r4, #48]	; 0x30
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	bf00      	nop
 8006c3c:	080074b5 	.word	0x080074b5
 8006c40:	080074d7 	.word	0x080074d7
 8006c44:	0800750f 	.word	0x0800750f
 8006c48:	08007533 	.word	0x08007533

08006c4c <_cleanup_r>:
 8006c4c:	4901      	ldr	r1, [pc, #4]	; (8006c54 <_cleanup_r+0x8>)
 8006c4e:	f000 b8af 	b.w	8006db0 <_fwalk_reent>
 8006c52:	bf00      	nop
 8006c54:	08006b8d 	.word	0x08006b8d

08006c58 <__sfmoreglue>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	2268      	movs	r2, #104	; 0x68
 8006c5c:	1e4d      	subs	r5, r1, #1
 8006c5e:	4355      	muls	r5, r2
 8006c60:	460e      	mov	r6, r1
 8006c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c66:	f7ff fd39 	bl	80066dc <_malloc_r>
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	b140      	cbz	r0, 8006c80 <__sfmoreglue+0x28>
 8006c6e:	2100      	movs	r1, #0
 8006c70:	e9c0 1600 	strd	r1, r6, [r0]
 8006c74:	300c      	adds	r0, #12
 8006c76:	60a0      	str	r0, [r4, #8]
 8006c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c7c:	f7ff fcba 	bl	80065f4 <memset>
 8006c80:	4620      	mov	r0, r4
 8006c82:	bd70      	pop	{r4, r5, r6, pc}

08006c84 <__sfp_lock_acquire>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sfp_lock_acquire+0x8>)
 8006c86:	f000 b8b3 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	200004b9 	.word	0x200004b9

08006c90 <__sfp_lock_release>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sfp_lock_release+0x8>)
 8006c92:	f000 b8ae 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	200004b9 	.word	0x200004b9

08006c9c <__sinit_lock_acquire>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sinit_lock_acquire+0x8>)
 8006c9e:	f000 b8a7 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	200004ba 	.word	0x200004ba

08006ca8 <__sinit_lock_release>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__sinit_lock_release+0x8>)
 8006caa:	f000 b8a2 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200004ba 	.word	0x200004ba

08006cb4 <__sinit>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	f7ff fff0 	bl	8006c9c <__sinit_lock_acquire>
 8006cbc:	69a3      	ldr	r3, [r4, #24]
 8006cbe:	b11b      	cbz	r3, 8006cc8 <__sinit+0x14>
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc4:	f7ff bff0 	b.w	8006ca8 <__sinit_lock_release>
 8006cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <__sinit+0x68>)
 8006cd0:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <__sinit+0x6c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	bf04      	itt	eq
 8006cda:	2301      	moveq	r3, #1
 8006cdc:	61a3      	streq	r3, [r4, #24]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 f820 	bl	8006d24 <__sfp>
 8006ce4:	6060      	str	r0, [r4, #4]
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f81c 	bl	8006d24 <__sfp>
 8006cec:	60a0      	str	r0, [r4, #8]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f818 	bl	8006d24 <__sfp>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	60e0      	str	r0, [r4, #12]
 8006cf8:	2104      	movs	r1, #4
 8006cfa:	6860      	ldr	r0, [r4, #4]
 8006cfc:	f7ff ff82 	bl	8006c04 <std>
 8006d00:	68a0      	ldr	r0, [r4, #8]
 8006d02:	2201      	movs	r2, #1
 8006d04:	2109      	movs	r1, #9
 8006d06:	f7ff ff7d 	bl	8006c04 <std>
 8006d0a:	68e0      	ldr	r0, [r4, #12]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	2112      	movs	r1, #18
 8006d10:	f7ff ff78 	bl	8006c04 <std>
 8006d14:	2301      	movs	r3, #1
 8006d16:	61a3      	str	r3, [r4, #24]
 8006d18:	e7d2      	b.n	8006cc0 <__sinit+0xc>
 8006d1a:	bf00      	nop
 8006d1c:	08007ee4 	.word	0x08007ee4
 8006d20:	08006c4d 	.word	0x08006c4d

08006d24 <__sfp>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	4607      	mov	r7, r0
 8006d28:	f7ff ffac 	bl	8006c84 <__sfp_lock_acquire>
 8006d2c:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <__sfp+0x84>)
 8006d2e:	681e      	ldr	r6, [r3, #0]
 8006d30:	69b3      	ldr	r3, [r6, #24]
 8006d32:	b913      	cbnz	r3, 8006d3a <__sfp+0x16>
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffbd 	bl	8006cb4 <__sinit>
 8006d3a:	3648      	adds	r6, #72	; 0x48
 8006d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	d503      	bpl.n	8006d4c <__sfp+0x28>
 8006d44:	6833      	ldr	r3, [r6, #0]
 8006d46:	b30b      	cbz	r3, 8006d8c <__sfp+0x68>
 8006d48:	6836      	ldr	r6, [r6, #0]
 8006d4a:	e7f7      	b.n	8006d3c <__sfp+0x18>
 8006d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d50:	b9d5      	cbnz	r5, 8006d88 <__sfp+0x64>
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <__sfp+0x88>)
 8006d54:	60e3      	str	r3, [r4, #12]
 8006d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8006d5c:	f000 f847 	bl	8006dee <__retarget_lock_init_recursive>
 8006d60:	f7ff ff96 	bl	8006c90 <__sfp_lock_release>
 8006d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d6c:	6025      	str	r5, [r4, #0]
 8006d6e:	61a5      	str	r5, [r4, #24]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4629      	mov	r1, r5
 8006d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d78:	f7ff fc3c 	bl	80065f4 <memset>
 8006d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d84:	4620      	mov	r0, r4
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	3468      	adds	r4, #104	; 0x68
 8006d8a:	e7d9      	b.n	8006d40 <__sfp+0x1c>
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ff62 	bl	8006c58 <__sfmoreglue>
 8006d94:	4604      	mov	r4, r0
 8006d96:	6030      	str	r0, [r6, #0]
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1d5      	bne.n	8006d48 <__sfp+0x24>
 8006d9c:	f7ff ff78 	bl	8006c90 <__sfp_lock_release>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	e7ee      	b.n	8006d84 <__sfp+0x60>
 8006da6:	bf00      	nop
 8006da8:	08007ee4 	.word	0x08007ee4
 8006dac:	ffff0001 	.word	0xffff0001

08006db0 <_fwalk_reent>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	4606      	mov	r6, r0
 8006db6:	4688      	mov	r8, r1
 8006db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dbc:	2700      	movs	r7, #0
 8006dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc6:	d505      	bpl.n	8006dd4 <_fwalk_reent+0x24>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	2c00      	cmp	r4, #0
 8006dcc:	d1f7      	bne.n	8006dbe <_fwalk_reent+0xe>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd4:	89ab      	ldrh	r3, [r5, #12]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d907      	bls.n	8006dea <_fwalk_reent+0x3a>
 8006dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dde:	3301      	adds	r3, #1
 8006de0:	d003      	beq.n	8006dea <_fwalk_reent+0x3a>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4630      	mov	r0, r6
 8006de6:	47c0      	blx	r8
 8006de8:	4307      	orrs	r7, r0
 8006dea:	3568      	adds	r5, #104	; 0x68
 8006dec:	e7e9      	b.n	8006dc2 <_fwalk_reent+0x12>

08006dee <__retarget_lock_init_recursive>:
 8006dee:	4770      	bx	lr

08006df0 <__retarget_lock_acquire_recursive>:
 8006df0:	4770      	bx	lr

08006df2 <__retarget_lock_release_recursive>:
 8006df2:	4770      	bx	lr

08006df4 <__swhatbuf_r>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	460e      	mov	r6, r1
 8006df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	b096      	sub	sp, #88	; 0x58
 8006e00:	4614      	mov	r4, r2
 8006e02:	461d      	mov	r5, r3
 8006e04:	da08      	bge.n	8006e18 <__swhatbuf_r+0x24>
 8006e06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	602a      	str	r2, [r5, #0]
 8006e0e:	061a      	lsls	r2, r3, #24
 8006e10:	d410      	bmi.n	8006e34 <__swhatbuf_r+0x40>
 8006e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e16:	e00e      	b.n	8006e36 <__swhatbuf_r+0x42>
 8006e18:	466a      	mov	r2, sp
 8006e1a:	f000 fbb1 	bl	8007580 <_fstat_r>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	dbf1      	blt.n	8006e06 <__swhatbuf_r+0x12>
 8006e22:	9a01      	ldr	r2, [sp, #4]
 8006e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e2c:	425a      	negs	r2, r3
 8006e2e:	415a      	adcs	r2, r3
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	e7ee      	b.n	8006e12 <__swhatbuf_r+0x1e>
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	2000      	movs	r0, #0
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	b016      	add	sp, #88	; 0x58
 8006e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e40 <__smakebuf_r>:
 8006e40:	898b      	ldrh	r3, [r1, #12]
 8006e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e44:	079d      	lsls	r5, r3, #30
 8006e46:	4606      	mov	r6, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	d507      	bpl.n	8006e5c <__smakebuf_r+0x1c>
 8006e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	2301      	movs	r3, #1
 8006e56:	6163      	str	r3, [r4, #20]
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	ab01      	add	r3, sp, #4
 8006e5e:	466a      	mov	r2, sp
 8006e60:	f7ff ffc8 	bl	8006df4 <__swhatbuf_r>
 8006e64:	9900      	ldr	r1, [sp, #0]
 8006e66:	4605      	mov	r5, r0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff fc37 	bl	80066dc <_malloc_r>
 8006e6e:	b948      	cbnz	r0, 8006e84 <__smakebuf_r+0x44>
 8006e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e74:	059a      	lsls	r2, r3, #22
 8006e76:	d4ef      	bmi.n	8006e58 <__smakebuf_r+0x18>
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	e7e3      	b.n	8006e4c <__smakebuf_r+0xc>
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <__smakebuf_r+0x7c>)
 8006e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	6020      	str	r0, [r4, #0]
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	6163      	str	r3, [r4, #20]
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	6120      	str	r0, [r4, #16]
 8006e9a:	b15b      	cbz	r3, 8006eb4 <__smakebuf_r+0x74>
 8006e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f000 fb7f 	bl	80075a4 <_isatty_r>
 8006ea6:	b128      	cbz	r0, 8006eb4 <__smakebuf_r+0x74>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	89a0      	ldrh	r0, [r4, #12]
 8006eb6:	4305      	orrs	r5, r0
 8006eb8:	81a5      	strh	r5, [r4, #12]
 8006eba:	e7cd      	b.n	8006e58 <__smakebuf_r+0x18>
 8006ebc:	08006c4d 	.word	0x08006c4d

08006ec0 <__malloc_lock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__malloc_lock+0x8>)
 8006ec2:	f7ff bf95 	b.w	8006df0 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	200004b8 	.word	0x200004b8

08006ecc <__malloc_unlock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_unlock+0x8>)
 8006ece:	f7ff bf90 	b.w	8006df2 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200004b8 	.word	0x200004b8

08006ed8 <__sfputc_r>:
 8006ed8:	6893      	ldr	r3, [r2, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	b410      	push	{r4}
 8006ee0:	6093      	str	r3, [r2, #8]
 8006ee2:	da08      	bge.n	8006ef6 <__sfputc_r+0x1e>
 8006ee4:	6994      	ldr	r4, [r2, #24]
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	db01      	blt.n	8006eee <__sfputc_r+0x16>
 8006eea:	290a      	cmp	r1, #10
 8006eec:	d103      	bne.n	8006ef6 <__sfputc_r+0x1e>
 8006eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef2:	f7ff bd05 	b.w	8006900 <__swbuf_r>
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	1c58      	adds	r0, r3, #1
 8006efa:	6010      	str	r0, [r2, #0]
 8006efc:	7019      	strb	r1, [r3, #0]
 8006efe:	4608      	mov	r0, r1
 8006f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <__sfputs_r>:
 8006f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	18d5      	adds	r5, r2, r3
 8006f10:	42ac      	cmp	r4, r5
 8006f12:	d101      	bne.n	8006f18 <__sfputs_r+0x12>
 8006f14:	2000      	movs	r0, #0
 8006f16:	e007      	b.n	8006f28 <__sfputs_r+0x22>
 8006f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7ff ffda 	bl	8006ed8 <__sfputc_r>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d1f3      	bne.n	8006f10 <__sfputs_r+0xa>
 8006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f2c <_vfiprintf_r>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	460d      	mov	r5, r1
 8006f32:	b09d      	sub	sp, #116	; 0x74
 8006f34:	4614      	mov	r4, r2
 8006f36:	4698      	mov	r8, r3
 8006f38:	4606      	mov	r6, r0
 8006f3a:	b118      	cbz	r0, 8006f44 <_vfiprintf_r+0x18>
 8006f3c:	6983      	ldr	r3, [r0, #24]
 8006f3e:	b90b      	cbnz	r3, 8006f44 <_vfiprintf_r+0x18>
 8006f40:	f7ff feb8 	bl	8006cb4 <__sinit>
 8006f44:	4b89      	ldr	r3, [pc, #548]	; (800716c <_vfiprintf_r+0x240>)
 8006f46:	429d      	cmp	r5, r3
 8006f48:	d11b      	bne.n	8006f82 <_vfiprintf_r+0x56>
 8006f4a:	6875      	ldr	r5, [r6, #4]
 8006f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d405      	bmi.n	8006f5e <_vfiprintf_r+0x32>
 8006f52:	89ab      	ldrh	r3, [r5, #12]
 8006f54:	059a      	lsls	r2, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_vfiprintf_r+0x32>
 8006f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f5a:	f7ff ff49 	bl	8006df0 <__retarget_lock_acquire_recursive>
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	d501      	bpl.n	8006f68 <_vfiprintf_r+0x3c>
 8006f64:	692b      	ldr	r3, [r5, #16]
 8006f66:	b9eb      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x78>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7ff fd1a 	bl	80069a4 <__swsetup_r>
 8006f70:	b1c0      	cbz	r0, 8006fa4 <_vfiprintf_r+0x78>
 8006f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f74:	07dc      	lsls	r4, r3, #31
 8006f76:	d50e      	bpl.n	8006f96 <_vfiprintf_r+0x6a>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b01d      	add	sp, #116	; 0x74
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	4b7b      	ldr	r3, [pc, #492]	; (8007170 <_vfiprintf_r+0x244>)
 8006f84:	429d      	cmp	r5, r3
 8006f86:	d101      	bne.n	8006f8c <_vfiprintf_r+0x60>
 8006f88:	68b5      	ldr	r5, [r6, #8]
 8006f8a:	e7df      	b.n	8006f4c <_vfiprintf_r+0x20>
 8006f8c:	4b79      	ldr	r3, [pc, #484]	; (8007174 <_vfiprintf_r+0x248>)
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	bf08      	it	eq
 8006f92:	68f5      	ldreq	r5, [r6, #12]
 8006f94:	e7da      	b.n	8006f4c <_vfiprintf_r+0x20>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	0598      	lsls	r0, r3, #22
 8006f9a:	d4ed      	bmi.n	8006f78 <_vfiprintf_r+0x4c>
 8006f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f9e:	f7ff ff28 	bl	8006df2 <__retarget_lock_release_recursive>
 8006fa2:	e7e9      	b.n	8006f78 <_vfiprintf_r+0x4c>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb2:	2330      	movs	r3, #48	; 0x30
 8006fb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007178 <_vfiprintf_r+0x24c>
 8006fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fbc:	f04f 0901 	mov.w	r9, #1
 8006fc0:	4623      	mov	r3, r4
 8006fc2:	469a      	mov	sl, r3
 8006fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc8:	b10a      	cbz	r2, 8006fce <_vfiprintf_r+0xa2>
 8006fca:	2a25      	cmp	r2, #37	; 0x25
 8006fcc:	d1f9      	bne.n	8006fc2 <_vfiprintf_r+0x96>
 8006fce:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd2:	d00b      	beq.n	8006fec <_vfiprintf_r+0xc0>
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7ff ff93 	bl	8006f06 <__sfputs_r>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f000 80aa 	beq.w	800713a <_vfiprintf_r+0x20e>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe8:	445a      	add	r2, fp
 8006fea:	9209      	str	r2, [sp, #36]	; 0x24
 8006fec:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80a2 	beq.w	800713a <_vfiprintf_r+0x20e>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007000:	f10a 0a01 	add.w	sl, sl, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800700c:	931a      	str	r3, [sp, #104]	; 0x68
 800700e:	4654      	mov	r4, sl
 8007010:	2205      	movs	r2, #5
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	4858      	ldr	r0, [pc, #352]	; (8007178 <_vfiprintf_r+0x24c>)
 8007018:	f7f9 f912 	bl	8000240 <memchr>
 800701c:	9a04      	ldr	r2, [sp, #16]
 800701e:	b9d8      	cbnz	r0, 8007058 <_vfiprintf_r+0x12c>
 8007020:	06d1      	lsls	r1, r2, #27
 8007022:	bf44      	itt	mi
 8007024:	2320      	movmi	r3, #32
 8007026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800702a:	0713      	lsls	r3, r2, #28
 800702c:	bf44      	itt	mi
 800702e:	232b      	movmi	r3, #43	; 0x2b
 8007030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007034:	f89a 3000 	ldrb.w	r3, [sl]
 8007038:	2b2a      	cmp	r3, #42	; 0x2a
 800703a:	d015      	beq.n	8007068 <_vfiprintf_r+0x13c>
 800703c:	9a07      	ldr	r2, [sp, #28]
 800703e:	4654      	mov	r4, sl
 8007040:	2000      	movs	r0, #0
 8007042:	f04f 0c0a 	mov.w	ip, #10
 8007046:	4621      	mov	r1, r4
 8007048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704c:	3b30      	subs	r3, #48	; 0x30
 800704e:	2b09      	cmp	r3, #9
 8007050:	d94e      	bls.n	80070f0 <_vfiprintf_r+0x1c4>
 8007052:	b1b0      	cbz	r0, 8007082 <_vfiprintf_r+0x156>
 8007054:	9207      	str	r2, [sp, #28]
 8007056:	e014      	b.n	8007082 <_vfiprintf_r+0x156>
 8007058:	eba0 0308 	sub.w	r3, r0, r8
 800705c:	fa09 f303 	lsl.w	r3, r9, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	46a2      	mov	sl, r4
 8007066:	e7d2      	b.n	800700e <_vfiprintf_r+0xe2>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	1d19      	adds	r1, r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	9103      	str	r1, [sp, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfbb      	ittet	lt
 8007074:	425b      	neglt	r3, r3
 8007076:	f042 0202 	orrlt.w	r2, r2, #2
 800707a:	9307      	strge	r3, [sp, #28]
 800707c:	9307      	strlt	r3, [sp, #28]
 800707e:	bfb8      	it	lt
 8007080:	9204      	strlt	r2, [sp, #16]
 8007082:	7823      	ldrb	r3, [r4, #0]
 8007084:	2b2e      	cmp	r3, #46	; 0x2e
 8007086:	d10c      	bne.n	80070a2 <_vfiprintf_r+0x176>
 8007088:	7863      	ldrb	r3, [r4, #1]
 800708a:	2b2a      	cmp	r3, #42	; 0x2a
 800708c:	d135      	bne.n	80070fa <_vfiprintf_r+0x1ce>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9203      	str	r2, [sp, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfb8      	it	lt
 800709a:	f04f 33ff 	movlt.w	r3, #4294967295
 800709e:	3402      	adds	r4, #2
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007188 <_vfiprintf_r+0x25c>
 80070a6:	7821      	ldrb	r1, [r4, #0]
 80070a8:	2203      	movs	r2, #3
 80070aa:	4650      	mov	r0, sl
 80070ac:	f7f9 f8c8 	bl	8000240 <memchr>
 80070b0:	b140      	cbz	r0, 80070c4 <_vfiprintf_r+0x198>
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	eba0 000a 	sub.w	r0, r0, sl
 80070b8:	fa03 f000 	lsl.w	r0, r3, r0
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	4303      	orrs	r3, r0
 80070c0:	3401      	adds	r4, #1
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	482c      	ldr	r0, [pc, #176]	; (800717c <_vfiprintf_r+0x250>)
 80070ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ce:	2206      	movs	r2, #6
 80070d0:	f7f9 f8b6 	bl	8000240 <memchr>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d03f      	beq.n	8007158 <_vfiprintf_r+0x22c>
 80070d8:	4b29      	ldr	r3, [pc, #164]	; (8007180 <_vfiprintf_r+0x254>)
 80070da:	bb1b      	cbnz	r3, 8007124 <_vfiprintf_r+0x1f8>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	3307      	adds	r3, #7
 80070e0:	f023 0307 	bic.w	r3, r3, #7
 80070e4:	3308      	adds	r3, #8
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ea:	443b      	add	r3, r7
 80070ec:	9309      	str	r3, [sp, #36]	; 0x24
 80070ee:	e767      	b.n	8006fc0 <_vfiprintf_r+0x94>
 80070f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80070f4:	460c      	mov	r4, r1
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7a5      	b.n	8007046 <_vfiprintf_r+0x11a>
 80070fa:	2300      	movs	r3, #0
 80070fc:	3401      	adds	r4, #1
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	4619      	mov	r1, r3
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	4620      	mov	r0, r4
 8007108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800710c:	3a30      	subs	r2, #48	; 0x30
 800710e:	2a09      	cmp	r2, #9
 8007110:	d903      	bls.n	800711a <_vfiprintf_r+0x1ee>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0c5      	beq.n	80070a2 <_vfiprintf_r+0x176>
 8007116:	9105      	str	r1, [sp, #20]
 8007118:	e7c3      	b.n	80070a2 <_vfiprintf_r+0x176>
 800711a:	fb0c 2101 	mla	r1, ip, r1, r2
 800711e:	4604      	mov	r4, r0
 8007120:	2301      	movs	r3, #1
 8007122:	e7f0      	b.n	8007106 <_vfiprintf_r+0x1da>
 8007124:	ab03      	add	r3, sp, #12
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	462a      	mov	r2, r5
 800712a:	4b16      	ldr	r3, [pc, #88]	; (8007184 <_vfiprintf_r+0x258>)
 800712c:	a904      	add	r1, sp, #16
 800712e:	4630      	mov	r0, r6
 8007130:	f3af 8000 	nop.w
 8007134:	4607      	mov	r7, r0
 8007136:	1c78      	adds	r0, r7, #1
 8007138:	d1d6      	bne.n	80070e8 <_vfiprintf_r+0x1bc>
 800713a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800713c:	07d9      	lsls	r1, r3, #31
 800713e:	d405      	bmi.n	800714c <_vfiprintf_r+0x220>
 8007140:	89ab      	ldrh	r3, [r5, #12]
 8007142:	059a      	lsls	r2, r3, #22
 8007144:	d402      	bmi.n	800714c <_vfiprintf_r+0x220>
 8007146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007148:	f7ff fe53 	bl	8006df2 <__retarget_lock_release_recursive>
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	065b      	lsls	r3, r3, #25
 8007150:	f53f af12 	bmi.w	8006f78 <_vfiprintf_r+0x4c>
 8007154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007156:	e711      	b.n	8006f7c <_vfiprintf_r+0x50>
 8007158:	ab03      	add	r3, sp, #12
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	462a      	mov	r2, r5
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <_vfiprintf_r+0x258>)
 8007160:	a904      	add	r1, sp, #16
 8007162:	4630      	mov	r0, r6
 8007164:	f000 f880 	bl	8007268 <_printf_i>
 8007168:	e7e4      	b.n	8007134 <_vfiprintf_r+0x208>
 800716a:	bf00      	nop
 800716c:	08007f08 	.word	0x08007f08
 8007170:	08007f28 	.word	0x08007f28
 8007174:	08007ee8 	.word	0x08007ee8
 8007178:	08007f48 	.word	0x08007f48
 800717c:	08007f52 	.word	0x08007f52
 8007180:	00000000 	.word	0x00000000
 8007184:	08006f07 	.word	0x08006f07
 8007188:	08007f4e 	.word	0x08007f4e

0800718c <_printf_common>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	4616      	mov	r6, r2
 8007192:	4699      	mov	r9, r3
 8007194:	688a      	ldr	r2, [r1, #8]
 8007196:	690b      	ldr	r3, [r1, #16]
 8007198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800719c:	4293      	cmp	r3, r2
 800719e:	bfb8      	it	lt
 80071a0:	4613      	movlt	r3, r2
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071a8:	4607      	mov	r7, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	b10a      	cbz	r2, 80071b2 <_printf_common+0x26>
 80071ae:	3301      	adds	r3, #1
 80071b0:	6033      	str	r3, [r6, #0]
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	0699      	lsls	r1, r3, #26
 80071b6:	bf42      	ittt	mi
 80071b8:	6833      	ldrmi	r3, [r6, #0]
 80071ba:	3302      	addmi	r3, #2
 80071bc:	6033      	strmi	r3, [r6, #0]
 80071be:	6825      	ldr	r5, [r4, #0]
 80071c0:	f015 0506 	ands.w	r5, r5, #6
 80071c4:	d106      	bne.n	80071d4 <_printf_common+0x48>
 80071c6:	f104 0a19 	add.w	sl, r4, #25
 80071ca:	68e3      	ldr	r3, [r4, #12]
 80071cc:	6832      	ldr	r2, [r6, #0]
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	42ab      	cmp	r3, r5
 80071d2:	dc26      	bgt.n	8007222 <_printf_common+0x96>
 80071d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071d8:	1e13      	subs	r3, r2, #0
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	bf18      	it	ne
 80071de:	2301      	movne	r3, #1
 80071e0:	0692      	lsls	r2, r2, #26
 80071e2:	d42b      	bmi.n	800723c <_printf_common+0xb0>
 80071e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071e8:	4649      	mov	r1, r9
 80071ea:	4638      	mov	r0, r7
 80071ec:	47c0      	blx	r8
 80071ee:	3001      	adds	r0, #1
 80071f0:	d01e      	beq.n	8007230 <_printf_common+0xa4>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	68e5      	ldr	r5, [r4, #12]
 80071f6:	6832      	ldr	r2, [r6, #0]
 80071f8:	f003 0306 	and.w	r3, r3, #6
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	bf08      	it	eq
 8007200:	1aad      	subeq	r5, r5, r2
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	bf0c      	ite	eq
 8007208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800720c:	2500      	movne	r5, #0
 800720e:	4293      	cmp	r3, r2
 8007210:	bfc4      	itt	gt
 8007212:	1a9b      	subgt	r3, r3, r2
 8007214:	18ed      	addgt	r5, r5, r3
 8007216:	2600      	movs	r6, #0
 8007218:	341a      	adds	r4, #26
 800721a:	42b5      	cmp	r5, r6
 800721c:	d11a      	bne.n	8007254 <_printf_common+0xc8>
 800721e:	2000      	movs	r0, #0
 8007220:	e008      	b.n	8007234 <_printf_common+0xa8>
 8007222:	2301      	movs	r3, #1
 8007224:	4652      	mov	r2, sl
 8007226:	4649      	mov	r1, r9
 8007228:	4638      	mov	r0, r7
 800722a:	47c0      	blx	r8
 800722c:	3001      	adds	r0, #1
 800722e:	d103      	bne.n	8007238 <_printf_common+0xac>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	3501      	adds	r5, #1
 800723a:	e7c6      	b.n	80071ca <_printf_common+0x3e>
 800723c:	18e1      	adds	r1, r4, r3
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	2030      	movs	r0, #48	; 0x30
 8007242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007246:	4422      	add	r2, r4
 8007248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800724c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007250:	3302      	adds	r3, #2
 8007252:	e7c7      	b.n	80071e4 <_printf_common+0x58>
 8007254:	2301      	movs	r3, #1
 8007256:	4622      	mov	r2, r4
 8007258:	4649      	mov	r1, r9
 800725a:	4638      	mov	r0, r7
 800725c:	47c0      	blx	r8
 800725e:	3001      	adds	r0, #1
 8007260:	d0e6      	beq.n	8007230 <_printf_common+0xa4>
 8007262:	3601      	adds	r6, #1
 8007264:	e7d9      	b.n	800721a <_printf_common+0x8e>
	...

08007268 <_printf_i>:
 8007268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	7e0f      	ldrb	r7, [r1, #24]
 800726e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007270:	2f78      	cmp	r7, #120	; 0x78
 8007272:	4691      	mov	r9, r2
 8007274:	4680      	mov	r8, r0
 8007276:	460c      	mov	r4, r1
 8007278:	469a      	mov	sl, r3
 800727a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800727e:	d807      	bhi.n	8007290 <_printf_i+0x28>
 8007280:	2f62      	cmp	r7, #98	; 0x62
 8007282:	d80a      	bhi.n	800729a <_printf_i+0x32>
 8007284:	2f00      	cmp	r7, #0
 8007286:	f000 80d8 	beq.w	800743a <_printf_i+0x1d2>
 800728a:	2f58      	cmp	r7, #88	; 0x58
 800728c:	f000 80a3 	beq.w	80073d6 <_printf_i+0x16e>
 8007290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007298:	e03a      	b.n	8007310 <_printf_i+0xa8>
 800729a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800729e:	2b15      	cmp	r3, #21
 80072a0:	d8f6      	bhi.n	8007290 <_printf_i+0x28>
 80072a2:	a101      	add	r1, pc, #4	; (adr r1, 80072a8 <_printf_i+0x40>)
 80072a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072a8:	08007301 	.word	0x08007301
 80072ac:	08007315 	.word	0x08007315
 80072b0:	08007291 	.word	0x08007291
 80072b4:	08007291 	.word	0x08007291
 80072b8:	08007291 	.word	0x08007291
 80072bc:	08007291 	.word	0x08007291
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007291 	.word	0x08007291
 80072c8:	08007291 	.word	0x08007291
 80072cc:	08007291 	.word	0x08007291
 80072d0:	08007291 	.word	0x08007291
 80072d4:	08007421 	.word	0x08007421
 80072d8:	08007345 	.word	0x08007345
 80072dc:	08007403 	.word	0x08007403
 80072e0:	08007291 	.word	0x08007291
 80072e4:	08007291 	.word	0x08007291
 80072e8:	08007443 	.word	0x08007443
 80072ec:	08007291 	.word	0x08007291
 80072f0:	08007345 	.word	0x08007345
 80072f4:	08007291 	.word	0x08007291
 80072f8:	08007291 	.word	0x08007291
 80072fc:	0800740b 	.word	0x0800740b
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	602a      	str	r2, [r5, #0]
 8007308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800730c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007310:	2301      	movs	r3, #1
 8007312:	e0a3      	b.n	800745c <_printf_i+0x1f4>
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	6829      	ldr	r1, [r5, #0]
 8007318:	0606      	lsls	r6, r0, #24
 800731a:	f101 0304 	add.w	r3, r1, #4
 800731e:	d50a      	bpl.n	8007336 <_printf_i+0xce>
 8007320:	680e      	ldr	r6, [r1, #0]
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	2e00      	cmp	r6, #0
 8007326:	da03      	bge.n	8007330 <_printf_i+0xc8>
 8007328:	232d      	movs	r3, #45	; 0x2d
 800732a:	4276      	negs	r6, r6
 800732c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007330:	485e      	ldr	r0, [pc, #376]	; (80074ac <_printf_i+0x244>)
 8007332:	230a      	movs	r3, #10
 8007334:	e019      	b.n	800736a <_printf_i+0x102>
 8007336:	680e      	ldr	r6, [r1, #0]
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800733e:	bf18      	it	ne
 8007340:	b236      	sxthne	r6, r6
 8007342:	e7ef      	b.n	8007324 <_printf_i+0xbc>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	6820      	ldr	r0, [r4, #0]
 8007348:	1d19      	adds	r1, r3, #4
 800734a:	6029      	str	r1, [r5, #0]
 800734c:	0601      	lsls	r1, r0, #24
 800734e:	d501      	bpl.n	8007354 <_printf_i+0xec>
 8007350:	681e      	ldr	r6, [r3, #0]
 8007352:	e002      	b.n	800735a <_printf_i+0xf2>
 8007354:	0646      	lsls	r6, r0, #25
 8007356:	d5fb      	bpl.n	8007350 <_printf_i+0xe8>
 8007358:	881e      	ldrh	r6, [r3, #0]
 800735a:	4854      	ldr	r0, [pc, #336]	; (80074ac <_printf_i+0x244>)
 800735c:	2f6f      	cmp	r7, #111	; 0x6f
 800735e:	bf0c      	ite	eq
 8007360:	2308      	moveq	r3, #8
 8007362:	230a      	movne	r3, #10
 8007364:	2100      	movs	r1, #0
 8007366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800736a:	6865      	ldr	r5, [r4, #4]
 800736c:	60a5      	str	r5, [r4, #8]
 800736e:	2d00      	cmp	r5, #0
 8007370:	bfa2      	ittt	ge
 8007372:	6821      	ldrge	r1, [r4, #0]
 8007374:	f021 0104 	bicge.w	r1, r1, #4
 8007378:	6021      	strge	r1, [r4, #0]
 800737a:	b90e      	cbnz	r6, 8007380 <_printf_i+0x118>
 800737c:	2d00      	cmp	r5, #0
 800737e:	d04d      	beq.n	800741c <_printf_i+0x1b4>
 8007380:	4615      	mov	r5, r2
 8007382:	fbb6 f1f3 	udiv	r1, r6, r3
 8007386:	fb03 6711 	mls	r7, r3, r1, r6
 800738a:	5dc7      	ldrb	r7, [r0, r7]
 800738c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007390:	4637      	mov	r7, r6
 8007392:	42bb      	cmp	r3, r7
 8007394:	460e      	mov	r6, r1
 8007396:	d9f4      	bls.n	8007382 <_printf_i+0x11a>
 8007398:	2b08      	cmp	r3, #8
 800739a:	d10b      	bne.n	80073b4 <_printf_i+0x14c>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	07de      	lsls	r6, r3, #31
 80073a0:	d508      	bpl.n	80073b4 <_printf_i+0x14c>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	6861      	ldr	r1, [r4, #4]
 80073a6:	4299      	cmp	r1, r3
 80073a8:	bfde      	ittt	le
 80073aa:	2330      	movle	r3, #48	; 0x30
 80073ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073b4:	1b52      	subs	r2, r2, r5
 80073b6:	6122      	str	r2, [r4, #16]
 80073b8:	f8cd a000 	str.w	sl, [sp]
 80073bc:	464b      	mov	r3, r9
 80073be:	aa03      	add	r2, sp, #12
 80073c0:	4621      	mov	r1, r4
 80073c2:	4640      	mov	r0, r8
 80073c4:	f7ff fee2 	bl	800718c <_printf_common>
 80073c8:	3001      	adds	r0, #1
 80073ca:	d14c      	bne.n	8007466 <_printf_i+0x1fe>
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	b004      	add	sp, #16
 80073d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d6:	4835      	ldr	r0, [pc, #212]	; (80074ac <_printf_i+0x244>)
 80073d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073dc:	6829      	ldr	r1, [r5, #0]
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073e4:	6029      	str	r1, [r5, #0]
 80073e6:	061d      	lsls	r5, r3, #24
 80073e8:	d514      	bpl.n	8007414 <_printf_i+0x1ac>
 80073ea:	07df      	lsls	r7, r3, #31
 80073ec:	bf44      	itt	mi
 80073ee:	f043 0320 	orrmi.w	r3, r3, #32
 80073f2:	6023      	strmi	r3, [r4, #0]
 80073f4:	b91e      	cbnz	r6, 80073fe <_printf_i+0x196>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	f023 0320 	bic.w	r3, r3, #32
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	2310      	movs	r3, #16
 8007400:	e7b0      	b.n	8007364 <_printf_i+0xfc>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	f043 0320 	orr.w	r3, r3, #32
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	2378      	movs	r3, #120	; 0x78
 800740c:	4828      	ldr	r0, [pc, #160]	; (80074b0 <_printf_i+0x248>)
 800740e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007412:	e7e3      	b.n	80073dc <_printf_i+0x174>
 8007414:	0659      	lsls	r1, r3, #25
 8007416:	bf48      	it	mi
 8007418:	b2b6      	uxthmi	r6, r6
 800741a:	e7e6      	b.n	80073ea <_printf_i+0x182>
 800741c:	4615      	mov	r5, r2
 800741e:	e7bb      	b.n	8007398 <_printf_i+0x130>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	6826      	ldr	r6, [r4, #0]
 8007424:	6961      	ldr	r1, [r4, #20]
 8007426:	1d18      	adds	r0, r3, #4
 8007428:	6028      	str	r0, [r5, #0]
 800742a:	0635      	lsls	r5, r6, #24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	d501      	bpl.n	8007434 <_printf_i+0x1cc>
 8007430:	6019      	str	r1, [r3, #0]
 8007432:	e002      	b.n	800743a <_printf_i+0x1d2>
 8007434:	0670      	lsls	r0, r6, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0x1c8>
 8007438:	8019      	strh	r1, [r3, #0]
 800743a:	2300      	movs	r3, #0
 800743c:	6123      	str	r3, [r4, #16]
 800743e:	4615      	mov	r5, r2
 8007440:	e7ba      	b.n	80073b8 <_printf_i+0x150>
 8007442:	682b      	ldr	r3, [r5, #0]
 8007444:	1d1a      	adds	r2, r3, #4
 8007446:	602a      	str	r2, [r5, #0]
 8007448:	681d      	ldr	r5, [r3, #0]
 800744a:	6862      	ldr	r2, [r4, #4]
 800744c:	2100      	movs	r1, #0
 800744e:	4628      	mov	r0, r5
 8007450:	f7f8 fef6 	bl	8000240 <memchr>
 8007454:	b108      	cbz	r0, 800745a <_printf_i+0x1f2>
 8007456:	1b40      	subs	r0, r0, r5
 8007458:	6060      	str	r0, [r4, #4]
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	2300      	movs	r3, #0
 8007460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007464:	e7a8      	b.n	80073b8 <_printf_i+0x150>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	462a      	mov	r2, r5
 800746a:	4649      	mov	r1, r9
 800746c:	4640      	mov	r0, r8
 800746e:	47d0      	blx	sl
 8007470:	3001      	adds	r0, #1
 8007472:	d0ab      	beq.n	80073cc <_printf_i+0x164>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	079b      	lsls	r3, r3, #30
 8007478:	d413      	bmi.n	80074a2 <_printf_i+0x23a>
 800747a:	68e0      	ldr	r0, [r4, #12]
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	4298      	cmp	r0, r3
 8007480:	bfb8      	it	lt
 8007482:	4618      	movlt	r0, r3
 8007484:	e7a4      	b.n	80073d0 <_printf_i+0x168>
 8007486:	2301      	movs	r3, #1
 8007488:	4632      	mov	r2, r6
 800748a:	4649      	mov	r1, r9
 800748c:	4640      	mov	r0, r8
 800748e:	47d0      	blx	sl
 8007490:	3001      	adds	r0, #1
 8007492:	d09b      	beq.n	80073cc <_printf_i+0x164>
 8007494:	3501      	adds	r5, #1
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	9903      	ldr	r1, [sp, #12]
 800749a:	1a5b      	subs	r3, r3, r1
 800749c:	42ab      	cmp	r3, r5
 800749e:	dcf2      	bgt.n	8007486 <_printf_i+0x21e>
 80074a0:	e7eb      	b.n	800747a <_printf_i+0x212>
 80074a2:	2500      	movs	r5, #0
 80074a4:	f104 0619 	add.w	r6, r4, #25
 80074a8:	e7f5      	b.n	8007496 <_printf_i+0x22e>
 80074aa:	bf00      	nop
 80074ac:	08007f59 	.word	0x08007f59
 80074b0:	08007f6a 	.word	0x08007f6a

080074b4 <__sread>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	460c      	mov	r4, r1
 80074b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074bc:	f000 f894 	bl	80075e8 <_read_r>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	bfab      	itete	ge
 80074c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074c6:	89a3      	ldrhlt	r3, [r4, #12]
 80074c8:	181b      	addge	r3, r3, r0
 80074ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ce:	bfac      	ite	ge
 80074d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074d2:	81a3      	strhlt	r3, [r4, #12]
 80074d4:	bd10      	pop	{r4, pc}

080074d6 <__swrite>:
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	461f      	mov	r7, r3
 80074dc:	898b      	ldrh	r3, [r1, #12]
 80074de:	05db      	lsls	r3, r3, #23
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	4616      	mov	r6, r2
 80074e6:	d505      	bpl.n	80074f4 <__swrite+0x1e>
 80074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ec:	2302      	movs	r3, #2
 80074ee:	2200      	movs	r2, #0
 80074f0:	f000 f868 	bl	80075c4 <_lseek_r>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	4628      	mov	r0, r5
 8007506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	f000 b817 	b.w	800753c <_write_r>

0800750e <__sseek>:
 800750e:	b510      	push	{r4, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007516:	f000 f855 	bl	80075c4 <_lseek_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	bf15      	itete	ne
 8007520:	6560      	strne	r0, [r4, #84]	; 0x54
 8007522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800752a:	81a3      	strheq	r3, [r4, #12]
 800752c:	bf18      	it	ne
 800752e:	81a3      	strhne	r3, [r4, #12]
 8007530:	bd10      	pop	{r4, pc}

08007532 <__sclose>:
 8007532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007536:	f000 b813 	b.w	8007560 <_close_r>
	...

0800753c <_write_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	; (800755c <_write_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7fa fa23 	bl	8001996 <_write>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_write_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_write_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	200004bc 	.word	0x200004bc

08007560 <_close_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	; (800757c <_close_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7fa fa2f 	bl	80019ce <_close>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_close_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_close_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200004bc 	.word	0x200004bc

08007580 <_fstat_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4d07      	ldr	r5, [pc, #28]	; (80075a0 <_fstat_r+0x20>)
 8007584:	2300      	movs	r3, #0
 8007586:	4604      	mov	r4, r0
 8007588:	4608      	mov	r0, r1
 800758a:	4611      	mov	r1, r2
 800758c:	602b      	str	r3, [r5, #0]
 800758e:	f7fa fa2a 	bl	80019e6 <_fstat>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	d102      	bne.n	800759c <_fstat_r+0x1c>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	b103      	cbz	r3, 800759c <_fstat_r+0x1c>
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	bd38      	pop	{r3, r4, r5, pc}
 800759e:	bf00      	nop
 80075a0:	200004bc 	.word	0x200004bc

080075a4 <_isatty_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d06      	ldr	r5, [pc, #24]	; (80075c0 <_isatty_r+0x1c>)
 80075a8:	2300      	movs	r3, #0
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	602b      	str	r3, [r5, #0]
 80075b0:	f7fa fa29 	bl	8001a06 <_isatty>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_isatty_r+0x1a>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_isatty_r+0x1a>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	200004bc 	.word	0x200004bc

080075c4 <_lseek_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d07      	ldr	r5, [pc, #28]	; (80075e4 <_lseek_r+0x20>)
 80075c8:	4604      	mov	r4, r0
 80075ca:	4608      	mov	r0, r1
 80075cc:	4611      	mov	r1, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	602a      	str	r2, [r5, #0]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f7fa fa22 	bl	8001a1c <_lseek>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_lseek_r+0x1e>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_lseek_r+0x1e>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	200004bc 	.word	0x200004bc

080075e8 <_read_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_read_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7fa f9b0 	bl	800195c <_read>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_read_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_read_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	200004bc 	.word	0x200004bc

0800760c <_init>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr

08007618 <_fini>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr
