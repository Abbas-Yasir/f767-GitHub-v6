
f767-GitHub-v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011928  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001508  08011b28  08011b28  00021b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013030  08013030  00031394  2**0
                  CONTENTS
  4 .ARM          00000008  08013030  08013030  00023030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013038  08013038  00031394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013038  08013038  00023038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801303c  0801303c  0002303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001394  20000000  08013040  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20001394  080143d4  00031394  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200018ec  080143d4  000318ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b511  00000000  00000000  000313c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7c  00000000  00000000  0004c8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00050650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  00051a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cba3  00000000  00000000  00052cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c067  00000000  00000000  0007f893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eb46  00000000  00000000  0009b8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  001aa440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000626c  00000000  00000000  001aa50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001394 	.word	0x20001394
 800021c:	00000000 	.word	0x00000000
 8000220:	08011b10 	.word	0x08011b10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001398 	.word	0x20001398
 800023c:	08011b10 	.word	0x08011b10

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b9a8 	b.w	8000658 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f83a 	bl	8000388 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__aeabi_f2lz>:
 8000320:	ee07 0a90 	vmov	s15, r0
 8000324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800032c:	d401      	bmi.n	8000332 <__aeabi_f2lz+0x12>
 800032e:	f000 b80b 	b.w	8000348 <__aeabi_f2ulz>
 8000332:	eef1 7a67 	vneg.f32	s15, s15
 8000336:	b508      	push	{r3, lr}
 8000338:	ee17 0a90 	vmov	r0, s15
 800033c:	f000 f804 	bl	8000348 <__aeabi_f2ulz>
 8000340:	4240      	negs	r0, r0
 8000342:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000346:	bd08      	pop	{r3, pc}

08000348 <__aeabi_f2ulz>:
 8000348:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000378 <__aeabi_f2ulz+0x30>
 800034c:	ee07 0a90 	vmov	s15, r0
 8000350:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000380 <__aeabi_f2ulz+0x38>
 8000354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800035c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000360:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000364:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000368:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800036c:	ee16 1a10 	vmov	r1, s12
 8000370:	ee17 0a90 	vmov	r0, s15
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	00000000 	.word	0x00000000
 800037c:	3df00000 	.word	0x3df00000
 8000380:	00000000 	.word	0x00000000
 8000384:	41f00000 	.word	0x41f00000

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	4604      	mov	r4, r0
 8000390:	468e      	mov	lr, r1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d14d      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000396:	428a      	cmp	r2, r1
 8000398:	4694      	mov	ip, r2
 800039a:	d969      	bls.n	8000470 <__udivmoddi4+0xe8>
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	b152      	cbz	r2, 80003b8 <__udivmoddi4+0x30>
 80003a2:	fa01 f302 	lsl.w	r3, r1, r2
 80003a6:	f1c2 0120 	rsb	r1, r2, #32
 80003aa:	fa20 f101 	lsr.w	r1, r0, r1
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	ea41 0e03 	orr.w	lr, r1, r3
 80003b6:	4094      	lsls	r4, r2
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	0c21      	lsrs	r1, r4, #16
 80003be:	fbbe f6f8 	udiv	r6, lr, r8
 80003c2:	fa1f f78c 	uxth.w	r7, ip
 80003c6:	fb08 e316 	mls	r3, r8, r6, lr
 80003ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ce:	fb06 f107 	mul.w	r1, r6, r7
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f106 30ff 	add.w	r0, r6, #4294967295
 80003de:	f080 811f 	bcs.w	8000620 <__udivmoddi4+0x298>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 811c 	bls.w	8000620 <__udivmoddi4+0x298>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	42a7      	cmp	r7, r4
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x92>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	f080 810a 	bcs.w	8000624 <__udivmoddi4+0x29c>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f240 8107 	bls.w	8000624 <__udivmoddi4+0x29c>
 8000416:	4464      	add	r4, ip
 8000418:	3802      	subs	r0, #2
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	2600      	movs	r6, #0
 8000422:	b11d      	cbz	r5, 800042c <__udivmoddi4+0xa4>
 8000424:	40d4      	lsrs	r4, r2
 8000426:	2300      	movs	r3, #0
 8000428:	e9c5 4300 	strd	r4, r3, [r5]
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0xc2>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80ef 	beq.w	800061a <__udivmoddi4+0x292>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x160>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xd4>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80f9 	bhi.w	800064e <__udivmoddi4+0x2c6>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0303 	sbc.w	r3, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	469e      	mov	lr, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0e0      	beq.n	800042c <__udivmoddi4+0xa4>
 800046a:	e9c5 4e00 	strd	r4, lr, [r5]
 800046e:	e7dd      	b.n	800042c <__udivmoddi4+0xa4>
 8000470:	b902      	cbnz	r2, 8000474 <__udivmoddi4+0xec>
 8000472:	deff      	udf	#255	; 0xff
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 8092 	bne.w	80005a2 <__udivmoddi4+0x21a>
 800047e:	eba1 010c 	sub.w	r1, r1, ip
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2601      	movs	r6, #1
 800048c:	0c20      	lsrs	r0, r4, #16
 800048e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000492:	fb07 1113 	mls	r1, r7, r3, r1
 8000496:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049a:	fb0e f003 	mul.w	r0, lr, r3
 800049e:	4288      	cmp	r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x12c>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x12a>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2c0>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1110 	mls	r1, r7, r0, r1
 80004c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x156>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x154>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2ca>
 80004dc:	4608      	mov	r0, r1
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x9a>
 80004e8:	f1c6 0720 	rsb	r7, r6, #32
 80004ec:	40b3      	lsls	r3, r6
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa20 f407 	lsr.w	r4, r0, r7
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	431c      	orrs	r4, r3
 8000500:	40f9      	lsrs	r1, r7
 8000502:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000506:	fa00 f306 	lsl.w	r3, r0, r6
 800050a:	fbb1 f8f9 	udiv	r8, r1, r9
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fb09 1118 	mls	r1, r9, r8, r1
 8000518:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800051c:	fb08 f00e 	mul.w	r0, r8, lr
 8000520:	4288      	cmp	r0, r1
 8000522:	fa02 f206 	lsl.w	r2, r2, r6
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b8>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2bc>
 8000534:	4288      	cmp	r0, r1
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2bc>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4461      	add	r1, ip
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f9 	udiv	r0, r1, r9
 8000548:	fb09 1110 	mls	r1, r9, r0, r1
 800054c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000550:	fb00 fe0e 	mul.w	lr, r0, lr
 8000554:	458e      	cmp	lr, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1e2>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2b4>
 8000562:	458e      	cmp	lr, r1
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2b4>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800056e:	fba0 9402 	umull	r9, r4, r0, r2
 8000572:	eba1 010e 	sub.w	r1, r1, lr
 8000576:	42a1      	cmp	r1, r4
 8000578:	46c8      	mov	r8, r9
 800057a:	46a6      	mov	lr, r4
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x2a4>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x2a0>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x212>
 8000582:	ebb3 0208 	subs.w	r2, r3, r8
 8000586:	eb61 010e 	sbc.w	r1, r1, lr
 800058a:	fa01 f707 	lsl.w	r7, r1, r7
 800058e:	fa22 f306 	lsr.w	r3, r2, r6
 8000592:	40f1      	lsrs	r1, r6
 8000594:	431f      	orrs	r7, r3
 8000596:	e9c5 7100 	strd	r7, r1, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
 80005b0:	4091      	lsls	r1, r2
 80005b2:	4301      	orrs	r1, r0
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c0:	fb07 3610 	mls	r6, r7, r0, r3
 80005c4:	0c0b      	lsrs	r3, r1, #16
 80005c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005ca:	fb00 f60e 	mul.w	r6, r0, lr
 80005ce:	429e      	cmp	r6, r3
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x260>
 80005d6:	eb1c 0303 	adds.w	r3, ip, r3
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b8>
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b8>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	1b9b      	subs	r3, r3, r6
 80005ea:	b289      	uxth	r1, r1
 80005ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f0:	fb07 3316 	mls	r3, r7, r6, r3
 80005f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f8:	fb06 f30e 	mul.w	r3, r6, lr
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x28a>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f106 38ff 	add.w	r8, r6, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2b0>
 800060a:	428b      	cmp	r3, r1
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2b0>
 800060e:	3e02      	subs	r6, #2
 8000610:	4461      	add	r1, ip
 8000612:	1ac9      	subs	r1, r1, r3
 8000614:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0x104>
 800061a:	462e      	mov	r6, r5
 800061c:	4628      	mov	r0, r5
 800061e:	e705      	b.n	800042c <__udivmoddi4+0xa4>
 8000620:	4606      	mov	r6, r0
 8000622:	e6e3      	b.n	80003ec <__udivmoddi4+0x64>
 8000624:	4618      	mov	r0, r3
 8000626:	e6f8      	b.n	800041a <__udivmoddi4+0x92>
 8000628:	454b      	cmp	r3, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f8>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000634:	3801      	subs	r0, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f8>
 8000638:	4646      	mov	r6, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x28a>
 800063c:	4620      	mov	r0, r4
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1e2>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x260>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b8>
 8000648:	3b02      	subs	r3, #2
 800064a:	4461      	add	r1, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x12c>
 800064e:	4630      	mov	r0, r6
 8000650:	e709      	b.n	8000466 <__udivmoddi4+0xde>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x156>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000666:	f107 020f 	add.w	r2, r7, #15
 800066a:	1df9      	adds	r1, r7, #7
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <W25qxx_Spi+0x28>)
 8000674:	f006 f9e9 	bl	8006a4a <HAL_SPI_TransmitReceive>
	return ret;	
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20001558 	.word	0x20001558

08000688 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <W25qxx_ReadID+0x68>)
 80006a4:	f004 fc60 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80006a8:	209f      	movs	r0, #159	; 0x9f
 80006aa:	f7ff ffd7 	bl	800065c <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006ae:	20a5      	movs	r0, #165	; 0xa5
 80006b0:	f7ff ffd4 	bl	800065c <W25qxx_Spi>
 80006b4:	4603      	mov	r3, r0
 80006b6:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006b8:	20a5      	movs	r0, #165	; 0xa5
 80006ba:	f7ff ffcf 	bl	800065c <W25qxx_Spi>
 80006be:	4603      	mov	r3, r0
 80006c0:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006c2:	20a5      	movs	r0, #165	; 0xa5
 80006c4:	f7ff ffca 	bl	800065c <W25qxx_Spi>
 80006c8:	4603      	mov	r3, r0
 80006ca:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <W25qxx_ReadID+0x68>)
 80006d2:	f004 fc49 	bl	8004f68 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	041a      	lsls	r2, r3, #16
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	4313      	orrs	r3, r2
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  return Temp;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2110      	movs	r1, #16
 80006fe:	4816      	ldr	r0, [pc, #88]	; (8000758 <W25qxx_ReadUniqID+0x64>)
 8000700:	f004 fc32 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8000704:	204b      	movs	r0, #75	; 0x4b
 8000706:	f7ff ffa9 	bl	800065c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800070a:	2300      	movs	r3, #0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	e005      	b.n	800071c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000710:	20a5      	movs	r0, #165	; 0xa5
 8000712:	f7ff ffa3 	bl	800065c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3301      	adds	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d9f6      	bls.n	8000710 <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8000722:	2300      	movs	r3, #0
 8000724:	71bb      	strb	r3, [r7, #6]
 8000726:	e00b      	b.n	8000740 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000728:	79bc      	ldrb	r4, [r7, #6]
 800072a:	20a5      	movs	r0, #165	; 0xa5
 800072c:	f7ff ff96 	bl	800065c <W25qxx_Spi>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <W25qxx_ReadUniqID+0x68>)
 8000736:	4423      	add	r3, r4
 8000738:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	71bb      	strb	r3, [r7, #6]
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d9f0      	bls.n	8000728 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2110      	movs	r1, #16
 800074a:	4803      	ldr	r0, [pc, #12]	; (8000758 <W25qxx_ReadUniqID+0x64>)
 800074c:	f004 fc0c 	bl	8004f68 <HAL_GPIO_WritePin>
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	200013b0 	.word	0x200013b0

08000760 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2110      	movs	r1, #16
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <W25qxx_WriteEnable+0x28>)
 800076a:	f004 fbfd 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 800076e:	2006      	movs	r0, #6
 8000770:	f7ff ff74 	bl	800065c <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2110      	movs	r1, #16
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <W25qxx_WriteEnable+0x28>)
 800077a:	f004 fbf5 	bl	8004f68 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f003 fcaa 	bl	80040d8 <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000

0800078c <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <W25qxx_ReadStatusRegister+0x84>)
 80007a0:	f004 fbe2 	bl	8004f68 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d10c      	bne.n	80007c4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80007aa:	2005      	movs	r0, #5
 80007ac:	f7ff ff56 	bl	800065c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80007b0:	20a5      	movs	r0, #165	; 0xa5
 80007b2:	f7ff ff53 	bl	800065c <W25qxx_Spi>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <W25qxx_ReadStatusRegister+0x88>)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80007c2:	e01b      	b.n	80007fc <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d10c      	bne.n	80007e4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80007ca:	2035      	movs	r0, #53	; 0x35
 80007cc:	f7ff ff46 	bl	800065c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80007d0:	20a5      	movs	r0, #165	; 0xa5
 80007d2:	f7ff ff43 	bl	800065c <W25qxx_Spi>
 80007d6:	4603      	mov	r3, r0
 80007d8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <W25qxx_ReadStatusRegister+0x88>)
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80007e2:	e00b      	b.n	80007fc <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80007e4:	2015      	movs	r0, #21
 80007e6:	f7ff ff39 	bl	800065c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80007ea:	20a5      	movs	r0, #165	; 0xa5
 80007ec:	f7ff ff36 	bl	800065c <W25qxx_Spi>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <W25qxx_ReadStatusRegister+0x88>)
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <W25qxx_ReadStatusRegister+0x84>)
 8000802:	f004 fbb1 	bl	8004f68 <HAL_GPIO_WritePin>
	return status;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	200013b0 	.word	0x200013b0

08000818 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f003 fc5b 	bl	80040d8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2110      	movs	r1, #16
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <W25qxx_WaitForWriteEnd+0x4c>)
 8000828:	f004 fb9e 	bl	8004f68 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800082c:	2005      	movs	r0, #5
 800082e:	f7ff ff15 	bl	800065c <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000832:	20a5      	movs	r0, #165	; 0xa5
 8000834:	f7ff ff12 	bl	800065c <W25qxx_Spi>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <W25qxx_WaitForWriteEnd+0x50>)
 800083e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f003 fc48 	bl	80040d8 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <W25qxx_WaitForWriteEnd+0x50>)
 800084a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ed      	bne.n	8000832 <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2110      	movs	r1, #16
 800085a:	4802      	ldr	r0, [pc, #8]	; (8000864 <W25qxx_WaitForWriteEnd+0x4c>)
 800085c:	f004 fb84 	bl	8004f68 <HAL_GPIO_WritePin>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	200013b0 	.word	0x200013b0

0800086c <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8000872:	4b6a      	ldr	r3, [pc, #424]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000874:	2201      	movs	r2, #1
 8000876:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 800087a:	e002      	b.n	8000882 <W25qxx_Init+0x16>
		W25qxx_Delay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f003 fc2b 	bl	80040d8 <HAL_Delay>
	while(HAL_GetTick()<100)
 8000882:	f003 fc1d 	bl	80040c0 <HAL_GetTick>
 8000886:	4603      	mov	r3, r0
 8000888:	2b63      	cmp	r3, #99	; 0x63
 800088a:	d9f7      	bls.n	800087c <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2110      	movs	r1, #16
 8000890:	4863      	ldr	r0, [pc, #396]	; (8000a20 <W25qxx_Init+0x1b4>)
 8000892:	f004 fb69 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f003 fc1e 	bl	80040d8 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800089c:	f7ff fef4 	bl	8000688 <W25qxx_ReadID>
 80008a0:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	f244 021a 	movw	r2, #16410	; 0x401a
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d81e      	bhi.n	80008ec <W25qxx_Init+0x80>
 80008ae:	f244 0211 	movw	r2, #16401	; 0x4011
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d370      	bcc.n	8000998 <W25qxx_Init+0x12c>
 80008b6:	4a5b      	ldr	r2, [pc, #364]	; (8000a24 <W25qxx_Init+0x1b8>)
 80008b8:	441a      	add	r2, r3
 80008ba:	2a09      	cmp	r2, #9
 80008bc:	d86c      	bhi.n	8000998 <W25qxx_Init+0x12c>
 80008be:	a301      	add	r3, pc, #4	; (adr r3, 80008c4 <W25qxx_Init+0x58>)
 80008c0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80008c4:	0800097b 	.word	0x0800097b
 80008c8:	0800096d 	.word	0x0800096d
 80008cc:	0800095f 	.word	0x0800095f
 80008d0:	08000951 	.word	0x08000951
 80008d4:	08000943 	.word	0x08000943
 80008d8:	08000935 	.word	0x08000935
 80008dc:	08000927 	.word	0x08000927
 80008e0:	08000917 	.word	0x08000917
 80008e4:	08000907 	.word	0x08000907
 80008e8:	080008f7 	.word	0x080008f7
 80008ec:	f64b 2221 	movw	r2, #47649	; 0xba21
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d049      	beq.n	8000988 <W25qxx_Init+0x11c>
 80008f4:	e050      	b.n	8000998 <W25qxx_Init+0x12c>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <W25qxx_Init+0x1b0>)
 80008f8:	220a      	movs	r2, #10
 80008fa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80008fc:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <W25qxx_Init+0x1b0>)
 80008fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000902:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8000904:	e04e      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000908:	2209      	movs	r2, #9
 800090a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <W25qxx_Init+0x1b0>)
 800090e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000912:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8000914:	e046      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000918:	2208      	movs	r2, #8
 800091a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <W25qxx_Init+0x1b0>)
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8000924:	e03e      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8000926:	4b3d      	ldr	r3, [pc, #244]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000928:	2207      	movs	r2, #7
 800092a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 800092c:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <W25qxx_Init+0x1b0>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8000932:	e037      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8000934:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000936:	2206      	movs	r2, #6
 8000938:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <W25qxx_Init+0x1b0>)
 800093c:	2240      	movs	r2, #64	; 0x40
 800093e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8000940:	e030      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000944:	2205      	movs	r2, #5
 8000946:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <W25qxx_Init+0x1b0>)
 800094a:	2220      	movs	r2, #32
 800094c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 800094e:	e029      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000952:	2204      	movs	r2, #4
 8000954:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000958:	2210      	movs	r2, #16
 800095a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 800095c:	e022      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000960:	2203      	movs	r2, #3
 8000962:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000966:	2208      	movs	r2, #8
 8000968:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 800096a:	e01b      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <W25qxx_Init+0x1b0>)
 800096e:	2202      	movs	r2, #2
 8000970:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000974:	2204      	movs	r2, #4
 8000976:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8000978:	e014      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <W25qxx_Init+0x1b0>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000982:	2202      	movs	r2, #2
 8000984:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8000986:	e00d      	b.n	80009a4 <W25qxx_Init+0x138>
		case 0xBA21:	//	N25Q128A
//			w25qxx.ID=N25Q128A;
			w25qxx.ID=W25Q128;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <W25qxx_Init+0x1b0>)
 800098a:	2208      	movs	r2, #8
 800098c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000994:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: N25Q128A\r\n");
			#endif
		break;
 8000996:	e005      	b.n	80009a4 <W25qxx_Init+0x138>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <W25qxx_Init+0x1b0>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e036      	b.n	8000a12 <W25qxx_Init+0x1a6>
				
	}		
	w25qxx.PageSize=256;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009aa:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b2:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009bc:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009c4:	6912      	ldr	r2, [r2, #16]
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009cc:	8952      	ldrh	r2, [r2, #10]
 80009ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009d4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009de:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009e6:	6912      	ldr	r2, [r2, #16]
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	0a9b      	lsrs	r3, r3, #10
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <W25qxx_Init+0x1b0>)
 80009f0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80009f2:	f7ff fe7f 	bl	80006f4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fec8 	bl	800078c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fec5 	bl	800078c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000a02:	2003      	movs	r0, #3
 8000a04:	f7ff fec2 	bl	800078c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <W25qxx_Init+0x1b0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000a10:	2301      	movs	r3, #1
}	
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200013b0 	.word	0x200013b0
 8000a20:	40021000 	.word	0x40021000
 8000a24:	ffffbfef 	.word	0xffffbfef

08000a28 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8000a30:	e002      	b.n	8000a38 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f003 fb50 	bl	80040d8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <W25qxx_EraseBlock+0xa4>)
 8000a3a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d0f7      	beq.n	8000a32 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <W25qxx_EraseBlock+0xa4>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();	
	#endif
	W25qxx_WaitForWriteEnd();
 8000a4a:	f7ff fee5 	bl	8000818 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <W25qxx_EraseBlock+0xa4>)
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8000a5c:	f7ff fe80 	bl	8000760 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2110      	movs	r1, #16
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <W25qxx_EraseBlock+0xa8>)
 8000a66:	f004 fa7f 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8000a6a:	20d8      	movs	r0, #216	; 0xd8
 8000a6c:	f7ff fdf6 	bl	800065c <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <W25qxx_EraseBlock+0xa4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d905      	bls.n	8000a84 <W25qxx_EraseBlock+0x5c>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0e1b      	lsrs	r3, r3, #24
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdec 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	0c1b      	lsrs	r3, r3, #16
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fde6 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fde0 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fddb 	bl	800065c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <W25qxx_EraseBlock+0xa8>)
 8000aac:	f004 fa5c 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000ab0:	f7ff feb2 	bl	8000818 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f003 fb0f 	bl	80040d8 <HAL_Delay>
	w25qxx.Lock=0;
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <W25qxx_EraseBlock+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200013b0 	.word	0x200013b0
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <W25qxx_BlockToPage>:
{
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
}
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <W25qxx_BlockToPage+0x28>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <W25qxx_BlockToPage+0x28>)
 8000ae8:	8952      	ldrh	r2, [r2, #10]
 8000aea:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200013b0 	.word	0x200013b0

08000b00 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000b0e:	e002      	b.n	8000b16 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f003 fae1 	bl	80040d8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000b16:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b18:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d0f7      	beq.n	8000b10 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b30:	8952      	ldrh	r2, [r2, #10]
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d802      	bhi.n	8000b3c <W25qxx_WritePage+0x3c>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d105      	bne.n	8000b48 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b3e:	895b      	ldrh	r3, [r3, #10]
 8000b40:	461a      	mov	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b50:	8952      	ldrh	r2, [r2, #10]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d905      	bls.n	8000b62 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b58:	895b      	ldrh	r3, [r3, #10]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8000b62:	f7ff fe59 	bl	8000818 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8000b66:	f7ff fdfb 	bl	8000760 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <W25qxx_WritePage+0xf8>)
 8000b70:	f004 f9fa 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8000b74:	2002      	movs	r0, #2
 8000b76:	f7ff fd71 	bl	800065c <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b7c:	895b      	ldrh	r3, [r3, #10]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d905      	bls.n	8000ba0 <W25qxx_WritePage+0xa0>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	0e1b      	lsrs	r3, r3, #24
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fd5e 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	0c1b      	lsrs	r3, r3, #16
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fd58 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd52 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd4d 	bl	800065c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	2364      	movs	r3, #100	; 0x64
 8000bc8:	68f9      	ldr	r1, [r7, #12]
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <W25qxx_WritePage+0xfc>)
 8000bcc:	f005 fc9f 	bl	800650e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <W25qxx_WritePage+0xf8>)
 8000bd6:	f004 f9c7 	bl	8004f68 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000bda:	f7ff fe1d 	bl	8000818 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f003 fa7a 	bl	80040d8 <HAL_Delay>
	w25qxx.Lock=0;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <W25qxx_WritePage+0xf4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200013b0 	.word	0x200013b0
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20001558 	.word	0x20001558

08000c00 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
	#endif	
}
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d802      	bhi.n	8000c1e <W25qxx_WriteBlock+0x1e>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d243      	bcs.n	8000cb6 <W25qxx_WriteBlock+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	441a      	add	r2, r3
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d905      	bls.n	8000c48 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	e001      	b.n	8000c4c <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f7ff ff41 	bl	8000ad4 <W25qxx_BlockToPage>
 8000c52:	4602      	mov	r2, r0
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c56:	895b      	ldrh	r3, [r3, #10]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c60:	4413      	add	r3, r2
 8000c62:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c66:	895b      	ldrh	r3, [r3, #10]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c70:	fb01 f202 	mul.w	r2, r1, r2
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	69f9      	ldr	r1, [r7, #28]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ff3e 	bl	8000b00 <W25qxx_WritePage>
		StartPage++;
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	3301      	adds	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c8c:	895b      	ldrh	r3, [r3, #10]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	1a9a      	subs	r2, r3, r2
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	4413      	add	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <W25qxx_WriteBlock+0xc0>)
 8000c9c:	895b      	ldrh	r3, [r3, #10]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dce1      	bgt.n	8000c78 <W25qxx_WriteBlock+0x78>
 8000cb4:	e000      	b.n	8000cb8 <W25qxx_WriteBlock+0xb8>
		return;
 8000cb6:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200013b0 	.word	0x200013b0

08000cc4 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8000cd0:	e002      	b.n	8000cd8 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f003 fa00 	bl	80040d8 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <W25qxx_ReadBytes+0xa4>)
 8000cda:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d0f7      	beq.n	8000cd2 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <W25qxx_ReadBytes+0xa4>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	481f      	ldr	r0, [pc, #124]	; (8000d6c <W25qxx_ReadBytes+0xa8>)
 8000cf0:	f004 f93a 	bl	8004f68 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f7ff fcb1 	bl	800065c <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <W25qxx_ReadBytes+0xa4>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d905      	bls.n	8000d0e <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	0e1b      	lsrs	r3, r3, #24
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fca7 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	0c1b      	lsrs	r3, r3, #16
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fca1 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc9b 	bl	800065c <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fc96 	bl	800065c <W25qxx_Spi>
	W25qxx_Spi(0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fc93 	bl	800065c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <W25qxx_ReadBytes+0xac>)
 8000d42:	f005 fd52 	bl	80067ea <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2110      	movs	r1, #16
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <W25qxx_ReadBytes+0xa8>)
 8000d4c:	f004 f90c 	bl	8004f68 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f003 f9c1 	bl	80040d8 <HAL_Delay>
	w25qxx.Lock=0;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <W25qxx_ReadBytes+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200013b0 	.word	0x200013b0
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20001558 	.word	0x20001558

08000d74 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <MX_CRC_Init+0x40>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_CRC_Init+0x3c>)
 8000d9e:	f003 fad1 	bl	8004344 <HAL_CRC_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000da8:	f000 ff84 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200013d8 	.word	0x200013d8
 8000db4:	40023000 	.word	0x40023000

08000db8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_CRC_MspInit+0x38>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10b      	bne.n	8000de2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_CRC_MspInit+0x3c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_CRC_MspInit+0x3c>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_CRC_MspInit+0x3c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023000 	.word	0x40023000
 8000df4:	40023800 	.word	0x40023800

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_DMA_Init+0x38>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <MX_DMA_Init+0x38>)
 8000e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_DMA_Init+0x38>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2044      	movs	r0, #68	; 0x44
 8000e1c:	f003 fa5b 	bl	80042d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000e20:	2044      	movs	r0, #68	; 0x44
 8000e22:	f003 fa74 	bl	800430e <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_GPIO_Init+0x128>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000eda:	2200      	movs	r2, #0
 8000edc:	f647 0110 	movw	r1, #30736	; 0x7810
 8000ee0:	481f      	ldr	r0, [pc, #124]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000ee2:	f004 f841 	bl	8004f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2110      	movs	r1, #16
 8000eea:	481e      	ldr	r0, [pc, #120]	; (8000f64 <MX_GPIO_Init+0x130>)
 8000eec:	f004 f83c 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000ef6:	481c      	ldr	r0, [pc, #112]	; (8000f68 <MX_GPIO_Init+0x134>)
 8000ef8:	f004 f836 	bl	8004f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE4 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000efc:	f647 0310 	movw	r3, #30736	; 0x7810
 8000f00:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4812      	ldr	r0, [pc, #72]	; (8000f60 <MX_GPIO_Init+0x12c>)
 8000f16:	f003 fe7b 	bl	8004c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_GPIO_Init+0x130>)
 8000f32:	f003 fe6d 	bl	8004c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000f36:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000f3a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_GPIO_Init+0x134>)
 8000f50:	f003 fe5e 	bl	8004c10 <HAL_GPIO_Init>

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400

08000f6c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f70:	f3bf 8f4f 	dsb	sy
}
 8000f74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f76:	f3bf 8f6f 	isb	sy
}
 8000f7a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <SCB_EnableICache+0x48>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f8a:	f3bf 8f6f 	isb	sy
}
 8000f8e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <SCB_EnableICache+0x48>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <SCB_EnableICache+0x48>)
 8000f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
}
 8000fa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa2:	f3bf 8f6f 	isb	sy
}
 8000fa6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <SCB_EnableDCache+0x84>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc6:	f3bf 8f4f 	dsb	sy
}
 8000fca:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <SCB_EnableDCache+0x84>)
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	0b5b      	lsrs	r3, r3, #13
 8000fd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fe6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	015a      	lsls	r2, r3, #5
 8000fec:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ff0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ff6:	4911      	ldr	r1, [pc, #68]	; (800103c <SCB_EnableDCache+0x84>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ef      	bne.n	8000fe8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	60fa      	str	r2, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1e5      	bne.n	8000fde <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001012:	f3bf 8f4f 	dsb	sy
}
 8001016:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <SCB_EnableDCache+0x84>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <SCB_EnableDCache+0x84>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001024:	f3bf 8f4f 	dsb	sy
}
 8001028:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800102a:	f3bf 8f6f 	isb	sy
}
 800102e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001048:	1d39      	adds	r1, r7, #4
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2201      	movs	r2, #1
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <__io_putchar+0x20>)
 8001052:	f006 fa57 	bl	8007504 <HAL_UART_Transmit>
return ch;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20001658 	.word	0x20001658

08001064 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
uint8_t ch = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]

/* Clear the Overrun flag just before receiving the first character */
__HAL_UART_CLEAR_OREFLAG(&huart1);
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <__io_getchar+0x38>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2208      	movs	r2, #8
 8001074:	621a      	str	r2, [r3, #32]
/* Wait for reception of a character on the USART RX line and echo this

character on console */
HAL_UART_Receive (&debugPort, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001076:	1df9      	adds	r1, r7, #7
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2201      	movs	r2, #1
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <__io_getchar+0x38>)
 8001080:	f006 fac3 	bl	800760a <HAL_UART_Receive>
HAL_UART_Transmit(&debugPort, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001084:	1df9      	adds	r1, r7, #7
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2201      	movs	r2, #1
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <__io_getchar+0x38>)
 800108e:	f006 fa39 	bl	8007504 <HAL_UART_Transmit>
return ch;
 8001092:	79fb      	ldrb	r3, [r7, #7]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20001658 	.word	0x20001658

080010a0 <in_func>:
    uint8_t *fbuf;     																								/* Pointer to the frame buffer for output function */
    uint16_t wfbuf;    																								/* Width of the frame buffer [pix] */
} IODEV;

uint16_t in_func (JDEC* jd, uint8_t* buff, uint16_t nbyte)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	4613      	mov	r3, r2
 80010ac:	80fb      	strh	r3, [r7, #6]
    IODEV *dev = (IODEV*)jd->device;   																				/* Device identifier for the session (5th argument of jd_prepare function) */
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010b2:	617b      	str	r3, [r7, #20]
    int i;

    if (buff) {
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d027      	beq.n	800110a <in_func+0x6a>
    	W25qxx_ReadBytes( buff, dev->fp, nbyte );
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	88fa      	ldrh	r2, [r7, #6]
 80010c0:	4619      	mov	r1, r3
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f7ff fdfe 	bl	8000cc4 <W25qxx_ReadBytes>

    	dev->fp += nbyte;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	441a      	add	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]

    	StringLength=sprintf(txString,"Value from FM %02X and Address %04u \r\n",*(buff+nbyte-1),dev->fp-1);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <in_func+0x80>)
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <in_func+0x84>)
 80010ea:	f00e f9ed 	bl	800f4c8 <siprintf>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <in_func+0x88>)
 80010f4:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <in_func+0x88>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	4909      	ldr	r1, [pc, #36]	; (8001124 <in_func+0x84>)
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <in_func+0x8c>)
 8001102:	f006 f9ff 	bl	8007504 <HAL_UART_Transmit>

        return nbyte;
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	e006      	b.n	8001118 <in_func+0x78>
    } else {
    	/* Remove bytes from input stream */
    	dev->fp += nbyte;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	441a      	add	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	601a      	str	r2, [r3, #0]
        return nbyte;
 8001116:	88fb      	ldrh	r3, [r7, #6]
    }
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	08011b28 	.word	0x08011b28
 8001124:	20001404 	.word	0x20001404
 8001128:	20001400 	.word	0x20001400
 800112c:	20001658 	.word	0x20001658

08001130 <out_func>:

uint16_t out_func (JDEC* jd, void* bitmap, JRECT* rect)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
    IODEV *dev = (IODEV*)jd->device;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001140:	61bb      	str	r3, [r7, #24]
    uint8_t *src, *dst;
    uint16_t y, bws, bwd;


    /* Copy the decompressed RGB rectangular to the frame buffer (assuming RGB888 cfg) */
    src = (uint8_t*)bitmap;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    dst = dev->fbuf + N_BPP * (rect->top * dev->wfbuf + rect->left);  													/* Left-top of destination rectangular */
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	8892      	ldrh	r2, [r2, #4]
 800114e:	4611      	mov	r1, r2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	8912      	ldrh	r2, [r2, #8]
 8001154:	fb01 f202 	mul.w	r2, r1, r2
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	8809      	ldrh	r1, [r1, #0]
 800115c:	440a      	add	r2, r1
 800115e:	4413      	add	r3, r2
 8001160:	623b      	str	r3, [r7, #32]
    bws = N_BPP * (rect->right - rect->left + 1);     																	/* Width of source rectangular [byte] */
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	885a      	ldrh	r2, [r3, #2]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b29b      	uxth	r3, r3
 800116e:	3301      	adds	r3, #1
 8001170:	82fb      	strh	r3, [r7, #22]
    bwd = N_BPP * dev->wfbuf;                         																	/* Width of frame buffer [byte] */
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	891b      	ldrh	r3, [r3, #8]
 8001176:	82bb      	strh	r3, [r7, #20]
    for (y = rect->top; y <= rect->bottom; y++) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	83fb      	strh	r3, [r7, #30]
 800117e:	e010      	b.n	80011a2 <out_func+0x72>
        memcpy(dst, src, bws);   																					/* Copy a line */
 8001180:	8afb      	ldrh	r3, [r7, #22]
 8001182:	461a      	mov	r2, r3
 8001184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001186:	6a38      	ldr	r0, [r7, #32]
 8001188:	f00d fbde 	bl	800e948 <memcpy>
        src += bws; dst += bwd;  																					/* Next line */
 800118c:	8afb      	ldrh	r3, [r7, #22]
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	4413      	add	r3, r2
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	8abb      	ldrh	r3, [r7, #20]
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	4413      	add	r3, r2
 800119a:	623b      	str	r3, [r7, #32]
    for (y = rect->top; y <= rect->bottom; y++) {
 800119c:	8bfb      	ldrh	r3, [r7, #30]
 800119e:	3301      	adds	r3, #1
 80011a0:	83fb      	strh	r3, [r7, #30]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	88db      	ldrh	r3, [r3, #6]
 80011a6:	8bfa      	ldrh	r2, [r7, #30]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d9e9      	bls.n	8001180 <out_func+0x50>
    }

    return 1;    																									/* Continue to decompress */
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	f5ad 3da1 	sub.w	sp, sp, #82432	; 0x14200
 80011be:	b09c      	sub	sp, #112	; 0x70
 80011c0:	af02      	add	r7, sp, #8
	  void *work;       																								/* Pointer to the decompressor work area */
	  JDEC jdec;        																								/* Decompression object */
	  JRESULT res;      																								/* Result code of TJpgDec API */
	  IODEV devid;      																								/* User defined device identifier */
	  int i;
	  int image_size = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	4ab8      	ldr	r2, [pc, #736]	; (80014a8 <main+0x2f0>)
 80011c6:	443a      	add	r2, r7
 80011c8:	6013      	str	r3, [r2, #0]

	  double predict;
	  uint8_t SR = 0x24;
 80011ca:	2324      	movs	r3, #36	; 0x24
 80011cc:	4ab7      	ldr	r2, [pc, #732]	; (80014ac <main+0x2f4>)
 80011ce:	443a      	add	r2, r7
 80011d0:	7013      	strb	r3, [r2, #0]

	  size_t sz_work = 5100;
 80011d2:	f241 33ec 	movw	r3, #5100	; 0x13ec
 80011d6:	4ab6      	ldr	r2, [pc, #728]	; (80014b0 <main+0x2f8>)
 80011d8:	443a      	add	r2, r7
 80011da:	6013      	str	r3, [r2, #0]

	  char buf[50];
	  int buf_len = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	4ab5      	ldr	r2, [pc, #724]	; (80014b4 <main+0x2fc>)
 80011e0:	443a      	add	r2, r7
 80011e2:	6013      	str	r3, [r2, #0]
	  ai_i32 nbatch_ICU;

	  uint32_t timestamp;
	  uint32_t timestamp_ICU;

	  uint8_t prediction = 0xFF;
 80011e4:	23ff      	movs	r3, #255	; 0xff
 80011e6:	4ab4      	ldr	r2, [pc, #720]	; (80014b8 <main+0x300>)
 80011e8:	443a      	add	r2, r7
 80011ea:	7013      	strb	r3, [r2, #0]
	  // Buffers used to store input and output tensors
	  ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	  ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model = AI_HANDLE_NULL;
 80011ec:	4bb3      	ldr	r3, [pc, #716]	; (80014bc <main+0x304>)
 80011ee:	443b      	add	r3, r7
 80011f0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 80011f8:	4bb0      	ldr	r3, [pc, #704]	; (80014bc <main+0x304>)
 80011fa:	443b      	add	r3, r7
 80011fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001200:	4aaf      	ldr	r2, [pc, #700]	; (80014c0 <main+0x308>)
 8001202:	461c      	mov	r4, r3
 8001204:	4615      	mov	r5, r2
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800120e:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8001212:	4baa      	ldr	r3, [pc, #680]	; (80014bc <main+0x304>)
 8001214:	443b      	add	r3, r7
 8001216:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800121a:	4aa9      	ldr	r2, [pc, #676]	; (80014c0 <main+0x308>)
 800121c:	461c      	mov	r4, r3
 800121e:	4615      	mov	r5, r2
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001228:	e884 0003 	stmia.w	r4, {r0, r1}


	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
 800122c:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <main+0x304>)
 800122e:	443b      	add	r3, r7
 8001230:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001234:	4aa3      	ldr	r2, [pc, #652]	; (80014c4 <main+0x30c>)
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <main+0x304>)
 800123a:	443b      	add	r3, r7
 800123c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001240:	2201      	movs	r2, #1
 8001242:	809a      	strh	r2, [r3, #4]
 8001244:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <main+0x304>)
 8001246:	443b      	add	r3, r7
 8001248:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800124c:	2201      	movs	r2, #1
 800124e:	80da      	strh	r2, [r3, #6]
 8001250:	4b9a      	ldr	r3, [pc, #616]	; (80014bc <main+0x304>)
 8001252:	443b      	add	r3, r7
 8001254:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001258:	2201      	movs	r2, #1
 800125a:	811a      	strh	r2, [r3, #8]
 800125c:	4b97      	ldr	r3, [pc, #604]	; (80014bc <main+0x304>)
 800125e:	443b      	add	r3, r7
 8001260:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001264:	f240 5204 	movw	r2, #1284	; 0x504
 8001268:	60da      	str	r2, [r3, #12]
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 800126a:	f007 fcab 	bl	8008bc4 <ai_sine_model_data_weights_get>
 800126e:	4602      	mov	r2, r0
	  ai_network_params ai_params = {
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <main+0x304>)
 8001272:	443b      	add	r3, r7
 8001274:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	4b90      	ldr	r3, [pc, #576]	; (80014bc <main+0x304>)
 800127c:	443b      	add	r3, r7
 800127e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	4b8d      	ldr	r3, [pc, #564]	; (80014bc <main+0x304>)
 8001288:	443b      	add	r3, r7
 800128a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800128e:	4a8e      	ldr	r2, [pc, #568]	; (80014c8 <main+0x310>)
 8001290:	619a      	str	r2, [r3, #24]
 8001292:	4b8a      	ldr	r3, [pc, #552]	; (80014bc <main+0x304>)
 8001294:	443b      	add	r3, r7
 8001296:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800129a:	2201      	movs	r2, #1
 800129c:	839a      	strh	r2, [r3, #28]
 800129e:	4b87      	ldr	r3, [pc, #540]	; (80014bc <main+0x304>)
 80012a0:	443b      	add	r3, r7
 80012a2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80012a6:	2201      	movs	r2, #1
 80012a8:	83da      	strh	r2, [r3, #30]
 80012aa:	4b84      	ldr	r3, [pc, #528]	; (80014bc <main+0x304>)
 80012ac:	443b      	add	r3, r7
 80012ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80012b2:	2201      	movs	r2, #1
 80012b4:	841a      	strh	r2, [r3, #32]
 80012b6:	4b81      	ldr	r3, [pc, #516]	; (80014bc <main+0x304>)
 80012b8:	443b      	add	r3, r7
 80012ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
 80012c2:	4b7e      	ldr	r3, [pc, #504]	; (80014bc <main+0x304>)
 80012c4:	443b      	add	r3, r7
 80012c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80012ca:	4a80      	ldr	r2, [pc, #512]	; (80014cc <main+0x314>)
 80012cc:	443a      	add	r2, r7
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
 80012d0:	4b7a      	ldr	r3, [pc, #488]	; (80014bc <main+0x304>)
 80012d2:	443b      	add	r3, r7
 80012d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
	  // Buffers used to store input and output tensors
	  ai_i8 image[AI_NETWORK_IN_1_SIZE_BYTES];
	  ai_i8 out_data_ICU[AI_NETWORK_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle icu_tflite = AI_HANDLE_NULL;
 80012dc:	f242 2368 	movw	r3, #8808	; 0x2268
 80012e0:	443b      	add	r3, r7
 80012e2:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input_ICU[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 80012ea:	f242 2368 	movw	r3, #8808	; 0x2268
 80012ee:	443b      	add	r3, r7
 80012f0:	f6a3 6394 	subw	r3, r3, #3732	; 0xe94
 80012f4:	4a76      	ldr	r2, [pc, #472]	; (80014d0 <main+0x318>)
 80012f6:	461c      	mov	r4, r3
 80012f8:	4615      	mov	r5, r2
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001302:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output_ICU[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001306:	f242 2368 	movw	r3, #8808	; 0x2268
 800130a:	443b      	add	r3, r7
 800130c:	f6a3 63ac 	subw	r3, r3, #3756	; 0xeac
 8001310:	4a70      	ldr	r2, [pc, #448]	; (80014d4 <main+0x31c>)
 8001312:	461c      	mov	r4, r3
 8001314:	4615      	mov	r5, r2
 8001316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800131e:	e884 0003 	stmia.w	r4, {r0, r1}

	  // Set working memory and get weights/biases from model
//	  ai_network_params ai_params_ICU = AI_NETWORK_PARAMS_INIT(AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()), AI_NETWORK_DATA_ACTIVATIONS(activations_ICU));
	  ai_network_params ai_params_ICU = {
 8001322:	f242 2368 	movw	r3, #8808	; 0x2268
 8001326:	443b      	add	r3, r7
 8001328:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 800132c:	4a65      	ldr	r2, [pc, #404]	; (80014c4 <main+0x30c>)
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f242 2368 	movw	r3, #8808	; 0x2268
 8001334:	443b      	add	r3, r7
 8001336:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 800133a:	2201      	movs	r2, #1
 800133c:	809a      	strh	r2, [r3, #4]
 800133e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001342:	443b      	add	r3, r7
 8001344:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8001348:	2201      	movs	r2, #1
 800134a:	80da      	strh	r2, [r3, #6]
 800134c:	f242 2368 	movw	r3, #8808	; 0x2268
 8001350:	443b      	add	r3, r7
 8001352:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8001356:	2201      	movs	r2, #1
 8001358:	811a      	strh	r2, [r3, #8]
 800135a:	f242 2368 	movw	r3, #8808	; 0x2268
 800135e:	443b      	add	r3, r7
 8001360:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	60da      	str	r2, [r3, #12]
			  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8001368:	f007 fb04 	bl	8008974 <ai_network_data_weights_get>
 800136c:	4602      	mov	r2, r0
	  ai_network_params ai_params_ICU = {
 800136e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001372:	443b      	add	r3, r7
 8001374:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	f242 2368 	movw	r3, #8808	; 0x2268
 800137e:	443b      	add	r3, r7
 8001380:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	f242 2368 	movw	r3, #8808	; 0x2268
 800138c:	443b      	add	r3, r7
 800138e:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8001392:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <main+0x310>)
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	f242 2368 	movw	r3, #8808	; 0x2268
 800139a:	443b      	add	r3, r7
 800139c:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80013a0:	2201      	movs	r2, #1
 80013a2:	839a      	strh	r2, [r3, #28]
 80013a4:	f242 2368 	movw	r3, #8808	; 0x2268
 80013a8:	443b      	add	r3, r7
 80013aa:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80013ae:	2201      	movs	r2, #1
 80013b0:	83da      	strh	r2, [r3, #30]
 80013b2:	f242 2368 	movw	r3, #8808	; 0x2268
 80013b6:	443b      	add	r3, r7
 80013b8:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80013bc:	2201      	movs	r2, #1
 80013be:	841a      	strh	r2, [r3, #32]
 80013c0:	f242 2368 	movw	r3, #8808	; 0x2268
 80013c4:	443b      	add	r3, r7
 80013c6:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80013ca:	f24e 129c 	movw	r2, #57756	; 0xe19c
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
 80013d0:	f242 2368 	movw	r3, #8808	; 0x2268
 80013d4:	443b      	add	r3, r7
 80013d6:	f6a3 62dc 	subw	r2, r3, #3804	; 0xedc
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <main+0x320>)
 80013dc:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 80013e0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80013e4:	443b      	add	r3, r7
 80013e6:	6293      	str	r3, [r2, #40]	; 0x28
 80013e8:	f242 2368 	movw	r3, #8808	; 0x2268
 80013ec:	443b      	add	r3, r7
 80013ee:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 80013f2:	2200      	movs	r2, #0
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
			  AI_NETWORK_DATA_ACTIVATIONS(activations_ICU)
	  };


	  		ai_input_ICU[0].n_batches = 1;
 80013f6:	f242 2368 	movw	r3, #8808	; 0x2268
 80013fa:	443b      	add	r3, r7
 80013fc:	f6a3 6394 	subw	r3, r3, #3732	; 0xe94
 8001400:	2201      	movs	r2, #1
 8001402:	809a      	strh	r2, [r3, #4]
	  		ai_input_ICU[0].data = AI_HANDLE_PTR(image);
 8001404:	f242 2368 	movw	r3, #8808	; 0x2268
 8001408:	443b      	add	r3, r7
 800140a:	f6a3 6294 	subw	r2, r3, #3732	; 0xe94
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <main+0x324>)
 8001410:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 8001414:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001418:	443b      	add	r3, r7
 800141a:	6113      	str	r3, [r2, #16]
	  		ai_output_ICU[0].n_batches = 1;
 800141c:	f242 2368 	movw	r3, #8808	; 0x2268
 8001420:	443b      	add	r3, r7
 8001422:	f6a3 63ac 	subw	r3, r3, #3756	; 0xeac
 8001426:	2201      	movs	r2, #1
 8001428:	809a      	strh	r2, [r3, #4]
	  		ai_output_ICU[0].data = AI_HANDLE_PTR(out_data_ICU);
 800142a:	f242 2368 	movw	r3, #8808	; 0x2268
 800142e:	443b      	add	r3, r7
 8001430:	f6a3 62ac 	subw	r2, r3, #3756	; 0xeac
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <main+0x328>)
 8001436:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 800143a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800143e:	443b      	add	r3, r7
 8001440:	6113      	str	r3, [r2, #16]

	  		//End of ICU part 2


	  	  // Set pointers wrapper structs to our data buffers
	  	  ai_input[0].n_batches = 1;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <main+0x304>)
 8001444:	443b      	add	r3, r7
 8001446:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800144a:	2201      	movs	r2, #1
 800144c:	809a      	strh	r2, [r3, #4]
	  	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <main+0x304>)
 8001450:	443b      	add	r3, r7
 8001452:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <main+0x32c>)
 8001458:	443a      	add	r2, r7
 800145a:	611a      	str	r2, [r3, #16]
	  	  ai_output[0].n_batches = 1;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <main+0x304>)
 800145e:	443b      	add	r3, r7
 8001460:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001464:	2201      	movs	r2, #1
 8001466:	809a      	strh	r2, [r3, #4]
	  	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <main+0x304>)
 800146a:	443b      	add	r3, r7
 800146c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <main+0x330>)
 8001472:	443a      	add	r2, r7
 8001474:	611a      	str	r2, [r3, #16]

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001476:	f7ff fd79 	bl	8000f6c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800147a:	f7ff fd9d 	bl	8000fb8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f002 fdce 	bl	800401e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 fba9 	bl	8001bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f7ff fcd5 	bl	8000e34 <MX_GPIO_Init>
  MX_DMA_Init();
 800148a:	f7ff fcb5 	bl	8000df8 <MX_DMA_Init>
  MX_SPI4_Init();
 800148e:	f000 fd3b 	bl	8001f08 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8001492:	f000 fff3 	bl	800247c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001496:	f000 fcc1 	bl	8001e1c <MX_SPI1_Init>
  MX_SPI3_Init();
 800149a:	f000 fcfd 	bl	8001e98 <MX_SPI3_Init>
  MX_QUADSPI_Init();
 800149e:	f000 fc0f 	bl	8001cc0 <MX_QUADSPI_Init>
  MX_USART2_UART_Init();
 80014a2:	f001 f81b 	bl	80024dc <MX_USART2_UART_Init>
 80014a6:	e021      	b.n	80014ec <main+0x334>
 80014a8:	00014260 	.word	0x00014260
 80014ac:	0001425f 	.word	0x0001425f
 80014b0:	00014258 	.word	0x00014258
 80014b4:	00014254 	.word	0x00014254
 80014b8:	00014253 	.word	0x00014253
 80014bc:	00014268 	.word	0x00014268
 80014c0:	08011d7c 	.word	0x08011d7c
 80014c4:	40040440 	.word	0x40040440
 80014c8:	00040440 	.word	0x00040440
 80014cc:	000140fc 	.word	0x000140fc
 80014d0:	08011d94 	.word	0x08011d94
 80014d4:	08011dac 	.word	0x08011dac
 80014d8:	ffff1c8c 	.word	0xffff1c8c
 80014dc:	fffed18c 	.word	0xfffed18c
 80014e0:	fffed188 	.word	0xfffed188
 80014e4:	000140f8 	.word	0x000140f8
 80014e8:	000140f4 	.word	0x000140f4
  MX_TIM14_Init();
 80014ec:	f000 ff6e 	bl	80023cc <MX_TIM14_Init>
  MX_CRC_Init();
 80014f0:	f7ff fc40 	bl	8000d74 <MX_CRC_Init>
  MX_TIM13_Init();
 80014f4:	f000 ff46 	bl	8002384 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 80014f8:	f7ff f9b8 	bl	800086c <W25qxx_Init>

  printf("GRSS Satellite .. ICU code \r\n--------------------------\r\n");
 80014fc:	4876      	ldr	r0, [pc, #472]	; (80016d8 <main+0x520>)
 80014fe:	f00d ffcb 	bl	800f498 <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Control the sharedFM, SET=STM32 RESET=ATMEGA
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001508:	4874      	ldr	r0, [pc, #464]	; (80016dc <main+0x524>)
 800150a:	f003 fd2d 	bl	8004f68 <HAL_GPIO_WritePin>
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI\r\n");
 800150e:	4b74      	ldr	r3, [pc, #464]	; (80016e0 <main+0x528>)
 8001510:	443b      	add	r3, r7
 8001512:	4974      	ldr	r1, [pc, #464]	; (80016e4 <main+0x52c>)
 8001514:	4618      	mov	r0, r3
 8001516:	f00d ffd7 	bl	800f4c8 <siprintf>
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <main+0x530>)
 800151c:	443b      	add	r3, r7
 800151e:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001520:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <main+0x530>)
 8001522:	443b      	add	r3, r7
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29a      	uxth	r2, r3
 8001528:	496d      	ldr	r1, [pc, #436]	; (80016e0 <main+0x528>)
 800152a:	4439      	add	r1, r7
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	486f      	ldr	r0, [pc, #444]	; (80016ec <main+0x534>)
 8001530:	f005 ffe8 	bl	8007504 <HAL_UART_Transmit>


  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8001534:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <main+0x538>)
 8001536:	443b      	add	r3, r7
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f007 fadc 	bl	8008af8 <ai_sine_model_create>
 8001540:	4603      	mov	r3, r0
 8001542:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <main+0x53c>)
 8001544:	443a      	add	r2, r7
 8001546:	6013      	str	r3, [r2, #0]
  if (ai_err.type != AI_ERROR_NONE)
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <main+0x53c>)
 800154a:	443b      	add	r3, r7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d013      	beq.n	800157a <main+0x3c2>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <main+0x528>)
 8001554:	443b      	add	r3, r7
 8001556:	4968      	ldr	r1, [pc, #416]	; (80016f8 <main+0x540>)
 8001558:	4618      	mov	r0, r3
 800155a:	f00d ffb5 	bl	800f4c8 <siprintf>
 800155e:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <main+0x530>)
 8001560:	443b      	add	r3, r7
 8001562:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <main+0x530>)
 8001566:	443b      	add	r3, r7
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29a      	uxth	r2, r3
 800156c:	495c      	ldr	r1, [pc, #368]	; (80016e0 <main+0x528>)
 800156e:	4439      	add	r1, r7
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	485e      	ldr	r0, [pc, #376]	; (80016ec <main+0x534>)
 8001574:	f005 ffc6 	bl	8007504 <HAL_UART_Transmit>
    while(1);
 8001578:	e7fe      	b.n	8001578 <main+0x3c0>
  }
  else
  {
	    buf_len = sprintf(buf, "NN instance created! \r\n");
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <main+0x528>)
 800157c:	443b      	add	r3, r7
 800157e:	495f      	ldr	r1, [pc, #380]	; (80016fc <main+0x544>)
 8001580:	4618      	mov	r0, r3
 8001582:	f00d ffa1 	bl	800f4c8 <siprintf>
 8001586:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <main+0x530>)
 8001588:	443b      	add	r3, r7
 800158a:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 800158c:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <main+0x530>)
 800158e:	443b      	add	r3, r7
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29a      	uxth	r2, r3
 8001594:	4952      	ldr	r1, [pc, #328]	; (80016e0 <main+0x528>)
 8001596:	4439      	add	r1, r7
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	4854      	ldr	r0, [pc, #336]	; (80016ec <main+0x534>)
 800159c:	f005 ffb2 	bl	8007504 <HAL_UART_Transmit>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 80015a0:	4b57      	ldr	r3, [pc, #348]	; (8001700 <main+0x548>)
 80015a2:	443b      	add	r3, r7
 80015a4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <main+0x54c>)
 80015ac:	443a      	add	r2, r7
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f007 fab7 	bl	8008b24 <ai_sine_model_init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d013      	beq.n	80015ea <main+0x432>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <main+0x528>)
 80015c4:	443b      	add	r3, r7
 80015c6:	4950      	ldr	r1, [pc, #320]	; (8001708 <main+0x550>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00d ff7d 	bl	800f4c8 <siprintf>
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <main+0x530>)
 80015d0:	443b      	add	r3, r7
 80015d2:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <main+0x530>)
 80015d6:	443b      	add	r3, r7
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4940      	ldr	r1, [pc, #256]	; (80016e0 <main+0x528>)
 80015de:	4439      	add	r1, r7
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	4842      	ldr	r0, [pc, #264]	; (80016ec <main+0x534>)
 80015e4:	f005 ff8e 	bl	8007504 <HAL_UART_Transmit>
    while(1);
 80015e8:	e7fe      	b.n	80015e8 <main+0x430>
  }
  else
  {
	    buf_len = sprintf(buf, "NN initialized\r\n");
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <main+0x528>)
 80015ec:	443b      	add	r3, r7
 80015ee:	4947      	ldr	r1, [pc, #284]	; (800170c <main+0x554>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00d ff69 	bl	800f4c8 <siprintf>
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <main+0x530>)
 80015f8:	443b      	add	r3, r7
 80015fa:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80015fc:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <main+0x530>)
 80015fe:	443b      	add	r3, r7
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29a      	uxth	r2, r3
 8001604:	4936      	ldr	r1, [pc, #216]	; (80016e0 <main+0x528>)
 8001606:	4439      	add	r1, r7
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	4838      	ldr	r0, [pc, #224]	; (80016ec <main+0x534>)
 800160c:	f005 ff7a 	bl	8007504 <HAL_UART_Transmit>
  }


  // Create instance of neural network
  ai_err_ICU = ai_network_create(&icu_tflite, AI_NETWORK_DATA_CONFIG);
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <main+0x558>)
 8001612:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 8001616:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800161a:	443b      	add	r3, r7
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f007 f952 	bl	80088c8 <ai_network_create>
 8001624:	4603      	mov	r3, r0
 8001626:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <main+0x55c>)
 8001628:	443a      	add	r2, r7
 800162a:	6013      	str	r3, [r2, #0]
  if (ai_err_ICU.type != AI_ERROR_NONE)
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <main+0x55c>)
 800162e:	443b      	add	r3, r7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d013      	beq.n	800165e <main+0x4a6>
  {
    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <main+0x528>)
 8001638:	443b      	add	r3, r7
 800163a:	492f      	ldr	r1, [pc, #188]	; (80016f8 <main+0x540>)
 800163c:	4618      	mov	r0, r3
 800163e:	f00d ff43 	bl	800f4c8 <siprintf>
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <main+0x530>)
 8001644:	443b      	add	r3, r7
 8001646:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <main+0x530>)
 800164a:	443b      	add	r3, r7
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29a      	uxth	r2, r3
 8001650:	4923      	ldr	r1, [pc, #140]	; (80016e0 <main+0x528>)
 8001652:	4439      	add	r1, r7
 8001654:	2364      	movs	r3, #100	; 0x64
 8001656:	4825      	ldr	r0, [pc, #148]	; (80016ec <main+0x534>)
 8001658:	f005 ff54 	bl	8007504 <HAL_UART_Transmit>
    while(1);
 800165c:	e7fe      	b.n	800165c <main+0x4a4>
  }
  else
  {
	    buf_len = sprintf(buf, "NN instance created! \r\n");
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <main+0x528>)
 8001660:	443b      	add	r3, r7
 8001662:	4926      	ldr	r1, [pc, #152]	; (80016fc <main+0x544>)
 8001664:	4618      	mov	r0, r3
 8001666:	f00d ff2f 	bl	800f4c8 <siprintf>
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <main+0x530>)
 800166c:	443b      	add	r3, r7
 800166e:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <main+0x530>)
 8001672:	443b      	add	r3, r7
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	4919      	ldr	r1, [pc, #100]	; (80016e0 <main+0x528>)
 800167a:	4439      	add	r1, r7
 800167c:	2364      	movs	r3, #100	; 0x64
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <main+0x534>)
 8001680:	f005 ff40 	bl	8007504 <HAL_UART_Transmit>
  }

  // Initialize neural network
  if (!ai_network_init(icu_tflite, &ai_params_ICU))
 8001684:	f242 2368 	movw	r3, #8808	; 0x2268
 8001688:	443b      	add	r3, r7
 800168a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <main+0x560>)
 8001692:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 8001696:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800169a:	443b      	add	r3, r7
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f007 f928 	bl	80088f4 <ai_network_init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d035      	beq.n	800171c <main+0x564>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <main+0x528>)
 80016b2:	443b      	add	r3, r7
 80016b4:	4914      	ldr	r1, [pc, #80]	; (8001708 <main+0x550>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00d ff06 	bl	800f4c8 <siprintf>
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <main+0x530>)
 80016be:	443b      	add	r3, r7
 80016c0:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <main+0x530>)
 80016c4:	443b      	add	r3, r7
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4905      	ldr	r1, [pc, #20]	; (80016e0 <main+0x528>)
 80016cc:	4439      	add	r1, r7
 80016ce:	2364      	movs	r3, #100	; 0x64
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <main+0x534>)
 80016d2:	f005 ff17 	bl	8007504 <HAL_UART_Transmit>
    while(1);
 80016d6:	e7fe      	b.n	80016d6 <main+0x51e>
 80016d8:	08011b50 	.word	0x08011b50
 80016dc:	40020400 	.word	0x40020400
 80016e0:	00014184 	.word	0x00014184
 80016e4:	08011b8c 	.word	0x08011b8c
 80016e8:	00014254 	.word	0x00014254
 80016ec:	20001658 	.word	0x20001658
 80016f0:	000140f0 	.word	0x000140f0
 80016f4:	00014180 	.word	0x00014180
 80016f8:	08011ba4 	.word	0x08011ba4
 80016fc:	08011bcc 	.word	0x08011bcc
 8001700:	00014268 	.word	0x00014268
 8001704:	00014090 	.word	0x00014090
 8001708:	08011be4 	.word	0x08011be4
 800170c:	08011c08 	.word	0x08011c08
 8001710:	fffed184 	.word	0xfffed184
 8001714:	0001417c 	.word	0x0001417c
 8001718:	fffed124 	.word	0xfffed124
  }
  else
  {
	    buf_len = sprintf(buf, "NN initialized\r\n");
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <main+0x634>)
 800171e:	443b      	add	r3, r7
 8001720:	4933      	ldr	r1, [pc, #204]	; (80017f0 <main+0x638>)
 8001722:	4618      	mov	r0, r3
 8001724:	f00d fed0 	bl	800f4c8 <siprintf>
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <main+0x63c>)
 800172a:	443b      	add	r3, r7
 800172c:	6018      	str	r0, [r3, #0]
	    HAL_UART_Transmit(&debugPort, (uint8_t *) &buf, buf_len, 100);
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <main+0x63c>)
 8001730:	443b      	add	r3, r7
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29a      	uxth	r2, r3
 8001736:	492d      	ldr	r1, [pc, #180]	; (80017ec <main+0x634>)
 8001738:	4439      	add	r1, r7
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	482e      	ldr	r0, [pc, #184]	; (80017f8 <main+0x640>)
 800173e:	f005 fee1 	bl	8007504 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	char readBytes[5000]="ABC";
 8001742:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001746:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800174a:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <main+0x644>)
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	3304      	adds	r3, #4
 8001750:	f241 3284 	movw	r2, #4996	; 0x1384
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f00d f904 	bl	800e964 <memset>
  	W25qxx_EraseBlock(0*0x10000); HAL_Delay(1000);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff f963 	bl	8000a28 <W25qxx_EraseBlock>
 8001762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001766:	f002 fcb7 	bl	80040d8 <HAL_Delay>
  	W25qxx_ReadBytes( readBytes, 0, sizeof(Target)%sizeof(readBytes) );	HAL_Delay(10);
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <main+0x648>)
 800176c:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 8001770:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001774:	443b      	add	r3, r7
 8001776:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff faa1 	bl	8000cc4 <W25qxx_ReadBytes>
 8001782:	200a      	movs	r0, #10
 8001784:	f002 fca8 	bl	80040d8 <HAL_Delay>
  	W25qxx_WriteBlock(Target, 0*0x10000, 0, sizeof(Target)); HAL_Delay(1000);
 8001788:	f240 43bd 	movw	r3, #1213	; 0x4bd
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	481c      	ldr	r0, [pc, #112]	; (8001804 <main+0x64c>)
 8001792:	f7ff fa35 	bl	8000c00 <W25qxx_WriteBlock>
 8001796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800179a:	f002 fc9d 	bl	80040d8 <HAL_Delay>

  while (1)
  {
		printf("Loop\r\n");
 800179e:	481a      	ldr	r0, [pc, #104]	; (8001808 <main+0x650>)
 80017a0:	f00d fe7a 	bl	800f498 <puts>

		work = (void*)malloc(sz_work);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <main+0x654>)
 80017a6:	443b      	add	r3, r7
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	f00d f8bd 	bl	800e928 <malloc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <main+0x658>)
 80017b2:	443a      	add	r2, r7
 80017b4:	6013      	str	r3, [r2, #0]
	  	count++;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <main+0x65c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a15      	ldr	r2, [pc, #84]	; (8001814 <main+0x65c>)
 80017be:	6013      	str	r3, [r2, #0]

	  	if (count == 1) {
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <main+0x65c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10b      	bne.n	80017e0 <main+0x628>
	  		W25qxx_ReadBytes( readBytes, 0*0x10000, sizeof(Target) );
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <main+0x648>)
 80017ca:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 80017ce:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80017d2:	443b      	add	r3, r7
 80017d4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa72 	bl	8000cc4 <W25qxx_ReadBytes>
//	  		W25qxx_ReadBytes( readBytes, 1*0x10000, sizeof(Space) );
//	  		W25qxx_ReadBytes( readBytes, 2*0x10000, sizeof(Earth) );
	  	}

		  // Fill input buffer (use test value)
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <main+0x660>)
 80017e4:	443a      	add	r2, r7
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e029      	b.n	800183e <main+0x686>
 80017ea:	bf00      	nop
 80017ec:	00014184 	.word	0x00014184
 80017f0:	08011c08 	.word	0x08011c08
 80017f4:	00014254 	.word	0x00014254
 80017f8:	20001658 	.word	0x20001658
 80017fc:	00434241 	.word	0x00434241
 8001800:	fffebd9c 	.word	0xfffebd9c
 8001804:	20000000 	.word	0x20000000
 8001808:	08011c1c 	.word	0x08011c1c
 800180c:	00014258 	.word	0x00014258
 8001810:	0001424c 	.word	0x0001424c
 8001814:	20001440 	.word	0x20001440
 8001818:	00014264 	.word	0x00014264
			{
			  ((ai_float *)in_data)[i] = (ai_float)1.0f;
 800181c:	4b98      	ldr	r3, [pc, #608]	; (8001a80 <main+0x8c8>)
 800181e:	443b      	add	r3, r7
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4a97      	ldr	r2, [pc, #604]	; (8001a84 <main+0x8cc>)
 8001826:	443a      	add	r2, r7
 8001828:	4413      	add	r3, r2
 800182a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800182e:	601a      	str	r2, [r3, #0]
			for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001830:	4b93      	ldr	r3, [pc, #588]	; (8001a80 <main+0x8c8>)
 8001832:	443b      	add	r3, r7
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a91      	ldr	r2, [pc, #580]	; (8001a80 <main+0x8c8>)
 800183a:	443a      	add	r2, r7
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b90      	ldr	r3, [pc, #576]	; (8001a80 <main+0x8c8>)
 8001840:	443b      	add	r3, r7
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0e9      	beq.n	800181c <main+0x664>
			}

			// Get current timestamp
			timestamp = htim13.Instance->CNT;
 8001848:	4b8f      	ldr	r3, [pc, #572]	; (8001a88 <main+0x8d0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	4a8f      	ldr	r2, [pc, #572]	; (8001a8c <main+0x8d4>)
 8001850:	443a      	add	r2, r7
 8001852:	6013      	str	r3, [r2, #0]

			// Perform inference
			nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8001854:	4b8e      	ldr	r3, [pc, #568]	; (8001a90 <main+0x8d8>)
 8001856:	443b      	add	r3, r7
 8001858:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a8d      	ldr	r2, [pc, #564]	; (8001a94 <main+0x8dc>)
 8001860:	443a      	add	r2, r7
 8001862:	498d      	ldr	r1, [pc, #564]	; (8001a98 <main+0x8e0>)
 8001864:	4439      	add	r1, r7
 8001866:	4618      	mov	r0, r3
 8001868:	f007 f99b 	bl	8008ba2 <ai_sine_model_run>
 800186c:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <main+0x8e4>)
 800186e:	443b      	add	r3, r7
 8001870:	6018      	str	r0, [r3, #0]
			if (nbatch != 1) {
 8001872:	4b8a      	ldr	r3, [pc, #552]	; (8001a9c <main+0x8e4>)
 8001874:	443b      	add	r3, r7
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d012      	beq.n	80018a2 <main+0x6ea>
			  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800187c:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <main+0x8e8>)
 800187e:	443b      	add	r3, r7
 8001880:	4988      	ldr	r1, [pc, #544]	; (8001aa4 <main+0x8ec>)
 8001882:	4618      	mov	r0, r3
 8001884:	f00d fe20 	bl	800f4c8 <siprintf>
 8001888:	4b87      	ldr	r3, [pc, #540]	; (8001aa8 <main+0x8f0>)
 800188a:	443b      	add	r3, r7
 800188c:	6018      	str	r0, [r3, #0]
			  HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 800188e:	4b86      	ldr	r3, [pc, #536]	; (8001aa8 <main+0x8f0>)
 8001890:	443b      	add	r3, r7
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	4982      	ldr	r1, [pc, #520]	; (8001aa0 <main+0x8e8>)
 8001898:	4439      	add	r1, r7
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	4883      	ldr	r0, [pc, #524]	; (8001aac <main+0x8f4>)
 800189e:	f005 fe31 	bl	8007504 <HAL_UART_Transmit>
			}

			// Read output (predicted y) of neural network
			y_val = ((float *)out_data)[0];
 80018a2:	4b83      	ldr	r3, [pc, #524]	; (8001ab0 <main+0x8f8>)
 80018a4:	443b      	add	r3, r7
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a82      	ldr	r2, [pc, #520]	; (8001ab4 <main+0x8fc>)
 80018aa:	443a      	add	r2, r7
 80018ac:	6013      	str	r3, [r2, #0]

			// Print output of neural network along with inference time (microseconds)
			buf_len = sprintf(buf,
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <main+0x8fc>)
 80018b0:	443b      	add	r3, r7
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
							  "Output: %f | Duration: %lu\r\n",
							  y_val,
							  htim13.Instance->CNT - timestamp);
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <main+0x8d0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			buf_len = sprintf(buf,
 80018c0:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <main+0x8d4>)
 80018c2:	443b      	add	r3, r7
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4875      	ldr	r0, [pc, #468]	; (8001aa0 <main+0x8e8>)
 80018ca:	4438      	add	r0, r7
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	ec53 2b17 	vmov	r2, r3, d7
 80018d2:	4979      	ldr	r1, [pc, #484]	; (8001ab8 <main+0x900>)
 80018d4:	f00d fdf8 	bl	800f4c8 <siprintf>
 80018d8:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <main+0x8f0>)
 80018da:	443b      	add	r3, r7
 80018dc:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&debugPort, (uint8_t *)buf, buf_len, 100);
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <main+0x8f0>)
 80018e0:	443b      	add	r3, r7
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	496e      	ldr	r1, [pc, #440]	; (8001aa0 <main+0x8e8>)
 80018e8:	4439      	add	r1, r7
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	486f      	ldr	r0, [pc, #444]	; (8001aac <main+0x8f4>)
 80018ee:	f005 fe09 	bl	8007504 <HAL_UART_Transmit>

			// Wait before doing it again
			HAL_Delay(500);
 80018f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f6:	f002 fbef 	bl	80040d8 <HAL_Delay>


	  	handshakeCAM = 0;
 80018fa:	4b70      	ldr	r3, [pc, #448]	; (8001abc <main+0x904>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]



			StringLength=sprintf(txString,"\r\n\nImage Processing Starts Now\r\n");
 8001900:	496f      	ldr	r1, [pc, #444]	; (8001ac0 <main+0x908>)
 8001902:	4870      	ldr	r0, [pc, #448]	; (8001ac4 <main+0x90c>)
 8001904:	f00d fde0 	bl	800f4c8 <siprintf>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b6e      	ldr	r3, [pc, #440]	; (8001ac8 <main+0x910>)
 800190e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001910:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <main+0x910>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b29a      	uxth	r2, r3
 8001916:	2364      	movs	r3, #100	; 0x64
 8001918:	496a      	ldr	r1, [pc, #424]	; (8001ac4 <main+0x90c>)
 800191a:	4864      	ldr	r0, [pc, #400]	; (8001aac <main+0x8f4>)
 800191c:	f005 fdf2 	bl	8007504 <HAL_UART_Transmit>

			HAL_Delay(1000);
 8001920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001924:	f002 fbd8 	bl	80040d8 <HAL_Delay>
			devid.fp=0;
 8001928:	2300      	movs	r3, #0
 800192a:	4a68      	ldr	r2, [pc, #416]	; (8001acc <main+0x914>)
 800192c:	443a      	add	r2, r7
 800192e:	6013      	str	r3, [r2, #0]
//			devid.fp= Space;
			devid.fp= count%3 * 0x10000;
 8001930:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <main+0x918>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <main+0x91c>)
 8001936:	fb83 3201 	smull	r3, r2, r3, r1
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	1aca      	subs	r2, r1, r3
 8001946:	0413      	lsls	r3, r2, #16
 8001948:	4a60      	ldr	r2, [pc, #384]	; (8001acc <main+0x914>)
 800194a:	443a      	add	r2, r7
 800194c:	6013      	str	r3, [r2, #0]

			StringLength=sprintf(txString,"\r\n");
 800194e:	4962      	ldr	r1, [pc, #392]	; (8001ad8 <main+0x920>)
 8001950:	485c      	ldr	r0, [pc, #368]	; (8001ac4 <main+0x90c>)
 8001952:	f00d fdb9 	bl	800f4c8 <siprintf>
 8001956:	4603      	mov	r3, r0
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <main+0x910>)
 800195c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 800195e:	4b5a      	ldr	r3, [pc, #360]	; (8001ac8 <main+0x910>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b29a      	uxth	r2, r3
 8001964:	2364      	movs	r3, #100	; 0x64
 8001966:	4957      	ldr	r1, [pc, #348]	; (8001ac4 <main+0x90c>)
 8001968:	4850      	ldr	r0, [pc, #320]	; (8001aac <main+0x8f4>)
 800196a:	f005 fdcb 	bl	8007504 <HAL_UART_Transmit>

//			display_bulk_4ByteAdd_SharedFM(0x00000000, 3500);

			res = jd_prepare(&jdec, in_func, work, sz_work, &devid);													/* Prepare to decompress */
 800196e:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <main+0x924>)
 8001970:	443b      	add	r3, r7
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29a      	uxth	r2, r3
 8001976:	485a      	ldr	r0, [pc, #360]	; (8001ae0 <main+0x928>)
 8001978:	4438      	add	r0, r7
 800197a:	4b54      	ldr	r3, [pc, #336]	; (8001acc <main+0x914>)
 800197c:	443b      	add	r3, r7
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <main+0x92c>)
 8001984:	443a      	add	r2, r7
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4957      	ldr	r1, [pc, #348]	; (8001ae8 <main+0x930>)
 800198a:	f002 f817 	bl	80039bc <jd_prepare>
 800198e:	4603      	mov	r3, r0
 8001990:	4a56      	ldr	r2, [pc, #344]	; (8001aec <main+0x934>)
 8001992:	443a      	add	r2, r7
 8001994:	7013      	strb	r3, [r2, #0]
			if (res == JDR_OK)
 8001996:	4b55      	ldr	r3, [pc, #340]	; (8001aec <main+0x934>)
 8001998:	443b      	add	r3, r7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 80e6 	bne.w	8001b6e <main+0x9b6>
			{																					/* Ready to decompress. Image info is available here. */
				StringLength=sprintf(txString,"\r\n\nOriginal image size is %u x %u X 3.\r\n%u Bytes of work area is used.\r\n\n", jdec.width, jdec.height, sz_work - jdec.sz_pool);
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <main+0x938>)
 80019a4:	443b      	add	r3, r7
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <main+0x93c>)
 80019ac:	443b      	add	r3, r7
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <main+0x940>)
 80019b4:	443b      	add	r3, r7
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b48      	ldr	r3, [pc, #288]	; (8001adc <main+0x924>)
 80019bc:	443b      	add	r3, r7
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4603      	mov	r3, r0
 80019c6:	460a      	mov	r2, r1
 80019c8:	494c      	ldr	r1, [pc, #304]	; (8001afc <main+0x944>)
 80019ca:	483e      	ldr	r0, [pc, #248]	; (8001ac4 <main+0x90c>)
 80019cc:	f00d fd7c 	bl	800f4c8 <siprintf>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <main+0x910>)
 80019d6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 80019d8:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <main+0x910>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	4938      	ldr	r1, [pc, #224]	; (8001ac4 <main+0x90c>)
 80019e2:	4832      	ldr	r0, [pc, #200]	; (8001aac <main+0x8f4>)
 80019e4:	f005 fd8e 	bl	8007504 <HAL_UART_Transmit>

				image_size = N_BPP  * jdec.width * jdec.height;
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <main+0x938>)
 80019ea:	443b      	add	r3, r7
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	4a41      	ldr	r2, [pc, #260]	; (8001af4 <main+0x93c>)
 80019f0:	443a      	add	r2, r7
 80019f2:	8812      	ldrh	r2, [r2, #0]
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	4a41      	ldr	r2, [pc, #260]	; (8001b00 <main+0x948>)
 80019fa:	443a      	add	r2, r7
 80019fc:	6013      	str	r3, [r2, #0]
				devid.fbuf = (uint8_t*)malloc(image_size); /* Create frame buffer for output image */
 80019fe:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <main+0x948>)
 8001a00:	443b      	add	r3, r7
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00c ff8f 	bl	800e928 <malloc>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <main+0x94c>)
 8001a0e:	443a      	add	r2, r7
 8001a10:	6013      	str	r3, [r2, #0]
		        devid.wfbuf = jdec.width;
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <main+0x938>)
 8001a14:	443b      	add	r3, r7
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <main+0x950>)
 8001a1a:	443a      	add	r2, r7
 8001a1c:	8013      	strh	r3, [r2, #0]

				Width = jdec.width;
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <main+0x938>)
 8001a20:	443b      	add	r3, r7
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <main+0x954>)
 8001a28:	601a      	str	r2, [r3, #0]
				Height = jdec.height;
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <main+0x93c>)
 8001a2c:	443b      	add	r3, r7
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <main+0x958>)
 8001a34:	601a      	str	r2, [r3, #0]

				StringLength=sprintf(txString,"\r\n\nPreparation for Decompression - Success\r\n");
 8001a36:	4937      	ldr	r1, [pc, #220]	; (8001b14 <main+0x95c>)
 8001a38:	4822      	ldr	r0, [pc, #136]	; (8001ac4 <main+0x90c>)
 8001a3a:	f00d fd45 	bl	800f4c8 <siprintf>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <main+0x910>)
 8001a44:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <main+0x910>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2364      	movs	r3, #100	; 0x64
 8001a4e:	491d      	ldr	r1, [pc, #116]	; (8001ac4 <main+0x90c>)
 8001a50:	4816      	ldr	r0, [pc, #88]	; (8001aac <main+0x8f4>)
 8001a52:	f005 fd57 	bl	8007504 <HAL_UART_Transmit>

				res = jd_decomp(&jdec, out_func, compression_ratio);   																/* Start to decompress with 1-1 scaling*/
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <main+0x960>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <main+0x928>)
 8001a5e:	443b      	add	r3, r7
 8001a60:	492e      	ldr	r1, [pc, #184]	; (8001b1c <main+0x964>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fa60 	bl	8003f28 <jd_decomp>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <main+0x934>)
 8001a6c:	443a      	add	r2, r7
 8001a6e:	7013      	strb	r3, [r2, #0]
				if (res == JDR_OK) {
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <main+0x934>)
 8001a72:	443b      	add	r3, r7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d164      	bne.n	8001b44 <main+0x98c>
					StringLength=sprintf(txString,"Decompression - Success\r\n");
 8001a7a:	4929      	ldr	r1, [pc, #164]	; (8001b20 <main+0x968>)
 8001a7c:	e052      	b.n	8001b24 <main+0x96c>
 8001a7e:	bf00      	nop
 8001a80:	00014264 	.word	0x00014264
 8001a84:	000140f8 	.word	0x000140f8
 8001a88:	200015c0 	.word	0x200015c0
 8001a8c:	00014248 	.word	0x00014248
 8001a90:	00014268 	.word	0x00014268
 8001a94:	000140c0 	.word	0x000140c0
 8001a98:	000140d8 	.word	0x000140d8
 8001a9c:	00014244 	.word	0x00014244
 8001aa0:	00014184 	.word	0x00014184
 8001aa4:	08011c24 	.word	0x08011c24
 8001aa8:	00014254 	.word	0x00014254
 8001aac:	20001658 	.word	0x20001658
 8001ab0:	000140f4 	.word	0x000140f4
 8001ab4:	00014240 	.word	0x00014240
 8001ab8:	08011c48 	.word	0x08011c48
 8001abc:	20001436 	.word	0x20001436
 8001ac0:	08011c68 	.word	0x08011c68
 8001ac4:	20001404 	.word	0x20001404
 8001ac8:	20001400 	.word	0x20001400
 8001acc:	000141b8 	.word	0x000141b8
 8001ad0:	20001440 	.word	0x20001440
 8001ad4:	55555556 	.word	0x55555556
 8001ad8:	08011c8c 	.word	0x08011c8c
 8001adc:	00014258 	.word	0x00014258
 8001ae0:	000141c4 	.word	0x000141c4
 8001ae4:	0001424c 	.word	0x0001424c
 8001ae8:	080010a1 	.word	0x080010a1
 8001aec:	0001423f 	.word	0x0001423f
 8001af0:	000141e0 	.word	0x000141e0
 8001af4:	000141e2 	.word	0x000141e2
 8001af8:	00014230 	.word	0x00014230
 8001afc:	08011c90 	.word	0x08011c90
 8001b00:	00014260 	.word	0x00014260
 8001b04:	000141bc 	.word	0x000141bc
 8001b08:	000141c0 	.word	0x000141c0
 8001b0c:	20001438 	.word	0x20001438
 8001b10:	2000143c 	.word	0x2000143c
 8001b14:	08011cdc 	.word	0x08011cdc
 8001b18:	200013fc 	.word	0x200013fc
 8001b1c:	08001131 	.word	0x08001131
 8001b20:	08011d0c 	.word	0x08011d0c
 8001b24:	4824      	ldr	r0, [pc, #144]	; (8001bb8 <main+0xa00>)
 8001b26:	f00d fccf 	bl	800f4c8 <siprintf>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <main+0xa04>)
 8001b30:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <main+0xa04>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <main+0xa00>)
 8001b3c:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <main+0xa08>)
 8001b3e:	f005 fce1 	bl	8007504 <HAL_UART_Transmit>
 8001b42:	e028      	b.n	8001b96 <main+0x9de>
				}
				else{
					StringLength=sprintf(txString,"%d - Decompression - Failed\r\n",res);
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <main+0xa0c>)
 8001b46:	443b      	add	r3, r7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	491e      	ldr	r1, [pc, #120]	; (8001bc8 <main+0xa10>)
 8001b4e:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <main+0xa00>)
 8001b50:	f00d fcba 	bl	800f4c8 <siprintf>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <main+0xa04>)
 8001b5a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <main+0xa04>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	2364      	movs	r3, #100	; 0x64
 8001b64:	4914      	ldr	r1, [pc, #80]	; (8001bb8 <main+0xa00>)
 8001b66:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <main+0xa08>)
 8001b68:	f005 fccc 	bl	8007504 <HAL_UART_Transmit>
 8001b6c:	e013      	b.n	8001b96 <main+0x9de>
				}
			}
			else{
			  StringLength=sprintf(txString,"\r\n\n %d - Preparation for Decompression - Failed\r\n",res);
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <main+0xa0c>)
 8001b70:	443b      	add	r3, r7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4915      	ldr	r1, [pc, #84]	; (8001bcc <main+0xa14>)
 8001b78:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <main+0xa00>)
 8001b7a:	f00d fca5 	bl	800f4c8 <siprintf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <main+0xa04>)
 8001b84:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&debugPort, (uint8_t *) &txString, StringLength, 100);
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <main+0xa04>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	2364      	movs	r3, #100	; 0x64
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <main+0xa00>)
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <main+0xa08>)
 8001b92:	f005 fcb7 	bl	8007504 <HAL_UART_Transmit>
			}

			HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9a:	f002 fa9d 	bl	80040d8 <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	free(work);
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <main+0xa18>)
 8001ba0:	443b      	add	r3, r7
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	f00c fec8 	bl	800e938 <free>
	free(devid.fbuf);
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <main+0xa1c>)
 8001baa:	443b      	add	r3, r7
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00c fec2 	bl	800e938 <free>
  {
 8001bb4:	e5f3      	b.n	800179e <main+0x5e6>
 8001bb6:	bf00      	nop
 8001bb8:	20001404 	.word	0x20001404
 8001bbc:	20001400 	.word	0x20001400
 8001bc0:	20001658 	.word	0x20001658
 8001bc4:	0001423f 	.word	0x0001423f
 8001bc8:	08011d28 	.word	0x08011d28
 8001bcc:	08011d48 	.word	0x08011d48
 8001bd0:	0001424c 	.word	0x0001424c
 8001bd4:	000141bc 	.word	0x000141bc

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	; 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	2234      	movs	r2, #52	; 0x34
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00c febc 	bl	800e964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <SystemClock_Config+0xd4>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a2a      	ldr	r2, [pc, #168]	; (8001cac <SystemClock_Config+0xd4>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <SystemClock_Config+0xd4>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <SystemClock_Config+0xd8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <SystemClock_Config+0xd8>)
 8001c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <SystemClock_Config+0xd8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c30:	2301      	movs	r3, #1
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c34:	2310      	movs	r3, #16
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c40:	2308      	movs	r3, #8
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c44:	23d8      	movs	r3, #216	; 0xd8
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fab1 	bl	80051c0 <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c64:	f000 f826 	bl	8001cb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c68:	f003 f998 	bl	8004f9c <HAL_PWREx_EnableOverDrive>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c72:	f000 f81f 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c76:	230f      	movs	r3, #15
 8001c78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	2107      	movs	r1, #7
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fd41 	bl	800571c <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ca0:	f000 f808 	bl	8001cb4 <Error_Handler>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <MX_QUADSPI_Init+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cfc:	f003 f99e 	bl	800503c <HAL_QSPI_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001d06:	f7ff ffd5 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20001444 	.word	0x20001444
 8001d14:	a0001000 	.word	0xa0001000

08001d18 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <HAL_QSPI_MspInit+0xf4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d164      	bne.n	8001e04 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d3a:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6393      	str	r3, [r2, #56]	; 0x38
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_QSPI_MspInit+0xf8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d92:	2309      	movs	r3, #9
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481d      	ldr	r0, [pc, #116]	; (8001e14 <HAL_QSPI_MspInit+0xfc>)
 8001d9e:	f002 ff37 	bl	8004c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001db4:	230a      	movs	r3, #10
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4815      	ldr	r0, [pc, #84]	; (8001e14 <HAL_QSPI_MspInit+0xfc>)
 8001dc0:	f002 ff26 	bl	8004c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dd4:	2309      	movs	r3, #9
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480e      	ldr	r0, [pc, #56]	; (8001e18 <HAL_QSPI_MspInit+0x100>)
 8001de0:	f002 ff16 	bl	8004c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001de4:	2340      	movs	r3, #64	; 0x40
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001df4:	230a      	movs	r3, #10
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <HAL_QSPI_MspInit+0x100>)
 8001e00:	f002 ff06 	bl	8004c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	a0001000 	.word	0xa0001000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40020400 	.word	0x40020400

08001e1c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <MX_SPI1_Init+0x78>)
 8001e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e52:	2210      	movs	r2, #16
 8001e54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e76:	2208      	movs	r2, #8
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_SPI1_Init+0x74>)
 8001e7c:	f004 fa9c 	bl	80063b8 <HAL_SPI_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e86:	f7ff ff15 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20001490 	.word	0x20001490
 8001e94:	40013000 	.word	0x40013000

08001e98 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001e9e:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <MX_SPI3_Init+0x6c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eb0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eb4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eee:	f004 fa63 	bl	80063b8 <HAL_SPI_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001ef8:	f7ff fedc 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200014f4 	.word	0x200014f4
 8001f04:	40003c00 	.word	0x40003c00

08001f08 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <MX_SPI4_Init+0x78>)
 8001f10:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f18:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f26:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f3e:	2228      	movs	r2, #40	; 0x28
 8001f40:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f56:	2207      	movs	r2, #7
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f62:	2208      	movs	r2, #8
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_SPI4_Init+0x74>)
 8001f68:	f004 fa26 	bl	80063b8 <HAL_SPI_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001f72:	f7ff fe9f 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20001558 	.word	0x20001558
 8001f80:	40013400 	.word	0x40013400

08001f84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_SPI_MspInit+0x170>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fa6:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a53      	ldr	r2, [pc, #332]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a4d      	ldr	r2, [pc, #308]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fd6:	23e0      	movs	r3, #224	; 0xe0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4842      	ldr	r0, [pc, #264]	; (80020fc <HAL_SPI_MspInit+0x178>)
 8001ff2:	f002 fe0d 	bl	8004c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001ff6:	e078      	b.n	80020ea <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <HAL_SPI_MspInit+0x17c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d146      	bne.n	8002090 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800204a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800205c:	2306      	movs	r3, #6
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4825      	ldr	r0, [pc, #148]	; (80020fc <HAL_SPI_MspInit+0x178>)
 8002068:	f002 fdd2 	bl	8004c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800206c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800207e:	2306      	movs	r3, #6
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	481e      	ldr	r0, [pc, #120]	; (8002104 <HAL_SPI_MspInit+0x180>)
 800208a:	f002 fdc1 	bl	8004c10 <HAL_GPIO_Init>
}
 800208e:	e02c      	b.n	80020ea <HAL_SPI_MspInit+0x166>
  else if(spiHandle->Instance==SPI4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_SPI_MspInit+0x184>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d127      	bne.n	80020ea <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 80020a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_SPI_MspInit+0x174>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80020ca:	2364      	movs	r3, #100	; 0x64
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020da:	2305      	movs	r3, #5
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <HAL_SPI_MspInit+0x188>)
 80020e6:	f002 fd93 	bl	8004c10 <HAL_GPIO_Init>
}
 80020ea:	bf00      	nop
 80020ec:	3738      	adds	r7, #56	; 0x38
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40003c00 	.word	0x40003c00
 8002104:	40020800 	.word	0x40020800
 8002108:	40013400 	.word	0x40013400
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_MspInit+0x44>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_MspInit+0x44>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_MspInit+0x44>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_MspInit+0x44>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_MspInit+0x44>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_MspInit+0x44>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <MemManage_Handler+0x4>

0800216a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <UsageFault_Handler+0x4>

08002176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a4:	f001 ff78 	bl	8004098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}

080021ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <USART1_IRQHandler+0x10>)
 80021b2:	f005 faef 	bl	8007794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20001658 	.word	0x20001658

080021c0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <DMA2_Stream5_IRQHandler+0x10>)
 80021c6:	f002 fae7 	bl	8004798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20001768 	.word	0x20001768

080021d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
	return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_kill>:

int _kill(int pid, int sig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ee:	f00c fb71 	bl	800e8d4 <__errno>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2216      	movs	r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
	return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_exit>:

void _exit (int status)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffe7 	bl	80021e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002216:	e7fe      	b.n	8002216 <_exit+0x12>

08002218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00a      	b.n	8002240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800222a:	f7fe ff1b 	bl	8001064 <__io_getchar>
 800222e:	4601      	mov	r1, r0
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	b2ca      	uxtb	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	dbf0      	blt.n	800222a <_read+0x12>
	}

return len;
 8002248:	687b      	ldr	r3, [r7, #4]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e009      	b.n	8002278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	60ba      	str	r2, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fee7 	bl	8001040 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	dbf1      	blt.n	8002264 <_write+0x12>
	}
	return len;
 8002280:	687b      	ldr	r3, [r7, #4]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_close>:

int _close(int file)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	return -1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b2:	605a      	str	r2, [r3, #4]
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_isatty>:

int _isatty(int file)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
	return 1;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	return 0;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f00c fad6 	bl	800e8d4 <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20080000 	.word	0x20080000
 8002354:	00000800 	.word	0x00000800
 8002358:	200015bc 	.word	0x200015bc
 800235c:	200018f0 	.word	0x200018f0

08002360 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <SystemInit+0x20>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <SystemInit+0x20>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_TIM13_Init+0x40>)
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <MX_TIM13_Init+0x44>)
 800238c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_TIM13_Init+0x40>)
 8002390:	224f      	movs	r2, #79	; 0x4f
 8002392:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_TIM13_Init+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <MX_TIM13_Init+0x40>)
 800239c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_TIM13_Init+0x40>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_TIM13_Init+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM13_Init+0x40>)
 80023b0:	f004 ff62 	bl	8007278 <HAL_TIM_Base_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80023ba:	f7ff fc7b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200015c0 	.word	0x200015c0
 80023c8:	40001c00 	.word	0x40001c00

080023cc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_TIM14_Init+0x40>)
 80023d2:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <MX_TIM14_Init+0x44>)
 80023d4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <MX_TIM14_Init+0x40>)
 80023d8:	224f      	movs	r2, #79	; 0x4f
 80023da:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_TIM14_Init+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <MX_TIM14_Init+0x40>)
 80023e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_TIM14_Init+0x40>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_TIM14_Init+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_TIM14_Init+0x40>)
 80023f8:	f004 ff3e 	bl	8007278 <HAL_TIM_Base_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002402:	f7ff fc57 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000160c 	.word	0x2000160c
 8002410:	40002000 	.word	0x40002000

08002414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <HAL_TIM_Base_MspInit+0x5c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10c      	bne.n	8002440 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_TIM_Base_MspInit+0x60>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <HAL_TIM_Base_MspInit+0x60>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_TIM_Base_MspInit+0x60>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800243e:	e010      	b.n	8002462 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM14)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_TIM_Base_MspInit+0x64>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10b      	bne.n	8002462 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_TIM_Base_MspInit+0x60>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_TIM_Base_MspInit+0x60>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_TIM_Base_MspInit+0x60>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40001c00 	.word	0x40001c00
 8002474:	40023800 	.word	0x40023800
 8002478:	40002000 	.word	0x40002000

0800247c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 8002482:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <MX_USART1_UART_Init+0x5c>)
 8002484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 8002488:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800248c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 80024a2:	220c      	movs	r2, #12
 80024a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_USART1_UART_Init+0x58>)
 80024c0:	f004 ffd2 	bl	8007468 <HAL_UART_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024ca:	f7ff fbf3 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20001658 	.word	0x20001658
 80024d8:	40011000 	.word	0x40011000

080024dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <MX_USART2_UART_Init+0x5c>)
 80024e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002502:	220c      	movs	r2, #12
 8002504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_USART2_UART_Init+0x58>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_USART2_UART_Init+0x58>)
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002520:	f004 ffa2 	bl	8007468 <HAL_UART_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800252a:	f7ff fbc3 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200016e0 	.word	0x200016e0
 8002538:	40004400 	.word	0x40004400

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0b0      	sub	sp, #192	; 0xc0
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	2290      	movs	r2, #144	; 0x90
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f00c fa01 	bl	800e964 <memset>
  if(uartHandle->Instance==USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <HAL_UART_MspInit+0x1a0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d173      	bne.n	8002654 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256c:	2340      	movs	r3, #64	; 0x40
 800256e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002570:	2300      	movs	r3, #0
 8002572:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4618      	mov	r0, r3
 800257a:	f003 faf5 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002584:	f7ff fb96 	bl	8001cb4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002588:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a54      	ldr	r2, [pc, #336]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b52      	ldr	r3, [pc, #328]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4a4e      	ldr	r2, [pc, #312]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d2:	2307      	movs	r3, #7
 80025d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025dc:	4619      	mov	r1, r3
 80025de:	4841      	ldr	r0, [pc, #260]	; (80026e4 <HAL_UART_MspInit+0x1a8>)
 80025e0:	f002 fb16 	bl	8004c10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80025e4:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_UART_MspInit+0x1b0>)
 80025e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002604:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002618:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002626:	4830      	ldr	r0, [pc, #192]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002628:	f001 ff76 	bl	8004518 <HAL_DMA_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8002632:	f7ff fb3f 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 800263a:	675a      	str	r2, [r3, #116]	; 0x74
 800263c:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_UART_MspInit+0x1ac>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	2025      	movs	r0, #37	; 0x25
 8002648:	f001 fe45 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800264c:	2025      	movs	r0, #37	; 0x25
 800264e:	f001 fe5e 	bl	800430e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002652:	e03f      	b.n	80026d4 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <HAL_UART_MspInit+0x1b4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d13a      	bne.n	80026d4 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002662:	2300      	movs	r3, #0
 8002664:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fa7c 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8002676:	f7ff fb1d 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_UART_MspInit+0x1a4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026aa:	230c      	movs	r3, #12
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c2:	2307      	movs	r3, #7
 80026c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026cc:	4619      	mov	r1, r3
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <HAL_UART_MspInit+0x1a8>)
 80026d0:	f002 fa9e 	bl	8004c10 <HAL_GPIO_Init>
}
 80026d4:	bf00      	nop
 80026d6:	37c0      	adds	r7, #192	; 0xc0
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	20001768 	.word	0x20001768
 80026ec:	40026488 	.word	0x40026488
 80026f0:	40004400 	.word	0x40004400

080026f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800272c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026f8:	480d      	ldr	r0, [pc, #52]	; (8002730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026fa:	490e      	ldr	r1, [pc, #56]	; (8002734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002700:	e002      	b.n	8002708 <LoopCopyDataInit>

08002702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002706:	3304      	adds	r3, #4

08002708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800270c:	d3f9      	bcc.n	8002702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002710:	4c0b      	ldr	r4, [pc, #44]	; (8002740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002714:	e001      	b.n	800271a <LoopFillZerobss>

08002716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002718:	3204      	adds	r2, #4

0800271a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800271c:	d3fb      	bcc.n	8002716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800271e:	f7ff fe1f 	bl	8002360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002722:	f00c f8dd 	bl	800e8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002726:	f7fe fd47 	bl	80011b8 <main>
  bx  lr    
 800272a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800272c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002734:	20001394 	.word	0x20001394
  ldr r2, =_sidata
 8002738:	08013040 	.word	0x08013040
  ldr r2, =_sbss
 800273c:	20001394 	.word	0x20001394
  ldr r4, =_ebss
 8002740:	200018ec 	.word	0x200018ec

08002744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC_IRQHandler>

08002746 <alloc_pool>:

static void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t nd		/* Number of bytes to allocate */
)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]
	char *rp = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	3303      	adds	r3, #3
 800275a:	b29b      	uxth	r3, r3
 800275c:	f023 0303 	bic.w	r3, r3, #3
 8002760:	807b      	strh	r3, [r7, #2]

	if (jd->sz_pool >= nd) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	429a      	cmp	r2, r3
 800276c:	d810      	bhi.n	8002790 <alloc_pool+0x4a>
		jd->sz_pool -= nd;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	60fb      	str	r3, [r7, #12]
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	441a      	add	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	669a      	str	r2, [r3, #104]	; 0x68
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <create_qt_tbl>:
static int create_qt_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* data,	/* Pointer to the quantizer tables */
	uint16_t ndata			/* Size of input data */
)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t d, z;
	int32_t *pb;


	while (ndata) {	/* Process all tables in the segment */
 80027ae:	e047      	b.n	8002840 <create_qt_tbl+0xa0>
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d801      	bhi.n	80027ba <create_qt_tbl+0x1a>
 80027b6:	2306      	movs	r3, #6
 80027b8:	e046      	b.n	8002848 <create_qt_tbl+0xa8>
		ndata -= 65;
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	3b41      	subs	r3, #65	; 0x41
 80027be:	80fb      	strh	r3, [r7, #6]
		d = *data++;							/* Get table property */
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	60ba      	str	r2, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	777b      	strb	r3, [r7, #29]
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 80027ca:	7f7b      	ldrb	r3, [r7, #29]
 80027cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <create_qt_tbl+0x38>
 80027d4:	2306      	movs	r3, #6
 80027d6:	e037      	b.n	8002848 <create_qt_tbl+0xa8>
		i = d & 3;								/* Get table ID */
 80027d8:	7f7b      	ldrb	r3, [r7, #29]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	83fb      	strh	r3, [r7, #30]
		pb = alloc_pool(jd, 64 * sizeof (int32_t));/* Allocate a memory block for the table */
 80027e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff ffad 	bl	8002746 <alloc_pool>
 80027ec:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <create_qt_tbl+0x58>
 80027f4:	2303      	movs	r3, #3
 80027f6:	e027      	b.n	8002848 <create_qt_tbl+0xa8>
		jd->qttbl[i] = pb;						/* Register the table */
 80027f8:	8bfa      	ldrh	r2, [r7, #30]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3214      	adds	r2, #20
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002804:	2300      	movs	r3, #0
 8002806:	83fb      	strh	r3, [r7, #30]
 8002808:	e017      	b.n	800283a <create_qt_tbl+0x9a>
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 800280a:	8bfb      	ldrh	r3, [r7, #30]
 800280c:	4a10      	ldr	r2, [pc, #64]	; (8002850 <create_qt_tbl+0xb0>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	75fb      	strb	r3, [r7, #23]
			pb[z] = (int32_t)((uint32_t)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	60ba      	str	r2, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <create_qt_tbl+0xb4>)
 8002820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002824:	fb03 f101 	mul.w	r1, r3, r1
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	460a      	mov	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8002834:	8bfb      	ldrh	r3, [r7, #30]
 8002836:	3301      	adds	r3, #1
 8002838:	83fb      	strh	r3, [r7, #30]
 800283a:	8bfb      	ldrh	r3, [r7, #30]
 800283c:	2b3f      	cmp	r3, #63	; 0x3f
 800283e:	d9e4      	bls.n	800280a <create_qt_tbl+0x6a>
	while (ndata) {	/* Process all tables in the segment */
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1b4      	bne.n	80027b0 <create_qt_tbl+0x10>
		}
	}

	return JDR_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	08011de0 	.word	0x08011de0
 8002854:	08011e20 	.word	0x08011e20

08002858 <create_huffman_tbl>:
static int create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,					/* Pointer to the decompressor object */
	const uint8_t* data,		/* Pointer to the packed huffman tables */
	uint16_t ndata				/* Size of input data */
)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j, b, np, cls, num;
	uint8_t d, *pb, *pd;
	uint16_t hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 8002866:	e0c3      	b.n	80029f0 <create_huffman_tbl+0x198>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d801      	bhi.n	8002872 <create_huffman_tbl+0x1a>
 800286e:	2306      	movs	r3, #6
 8002870:	e0c3      	b.n	80029fa <create_huffman_tbl+0x1a2>
		ndata -= 17;
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	3b11      	subs	r3, #17
 8002876:	80fb      	strh	r3, [r7, #6]
		d = *data++;						/* Get table number and class */
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	60ba      	str	r2, [r7, #8]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 8002884:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002888:	f003 03ee 	and.w	r3, r3, #238	; 0xee
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <create_huffman_tbl+0x3c>
 8002890:	2306      	movs	r3, #6
 8002892:	e0b2      	b.n	80029fa <create_huffman_tbl+0x1a2>
		cls = d >> 4; num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 8002894:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b2db      	uxtb	r3, r3
 800289c:	83fb      	strh	r3, [r7, #30]
 800289e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	83bb      	strh	r3, [r7, #28]
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 80028aa:	2110      	movs	r1, #16
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff ff4a 	bl	8002746 <alloc_pool>
 80028b2:	61b8      	str	r0, [r7, #24]
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <create_huffman_tbl+0x66>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e09d      	b.n	80029fa <create_huffman_tbl+0x1a2>
		jd->huffbits[num][cls] = pb;
 80028be:	8bb9      	ldrh	r1, [r7, #28]
 80028c0:	8bfa      	ldrh	r2, [r7, #30]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0049      	lsls	r1, r1, #1
 80028c6:	440a      	add	r2, r1
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 80028d0:	2300      	movs	r3, #0
 80028d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80028d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80028d8:	e00f      	b.n	80028fa <create_huffman_tbl+0xa2>
			np += (pb[i] = *data++);		/* Get sum of code words for each code */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	1c53      	adds	r3, r2, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	440b      	add	r3, r1
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028f0:	4413      	add	r3, r2
 80028f2:	853b      	strh	r3, [r7, #40]	; 0x28
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 80028f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028f6:	3301      	adds	r3, #1
 80028f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80028fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d9ec      	bls.n	80028da <create_huffman_tbl+0x82>
		}
		ph = alloc_pool(jd, (uint16_t)(np * sizeof (uint16_t)));/* Allocate a memory block for the code word table */
 8002900:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	4619      	mov	r1, r3
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ff1c 	bl	8002746 <alloc_pool>
 800290e:	6178      	str	r0, [r7, #20]
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <create_huffman_tbl+0xc2>
 8002916:	2303      	movs	r3, #3
 8002918:	e06f      	b.n	80029fa <create_huffman_tbl+0x1a2>
		jd->huffcode[num][cls] = ph;
 800291a:	8bb9      	ldrh	r1, [r7, #28]
 800291c:	8bfa      	ldrh	r2, [r7, #30]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0049      	lsls	r1, r1, #1
 8002922:	440a      	add	r2, r1
 8002924:	320c      	adds	r2, #12
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hc = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8002930:	2300      	movs	r3, #0
 8002932:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002936:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002938:	e01a      	b.n	8002970 <create_huffman_tbl+0x118>
			b = pb[i];
 800293a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	857b      	strh	r3, [r7, #42]	; 0x2a
			while (b--) ph[j++] = hc++;
 8002944:	e009      	b.n	800295a <create_huffman_tbl+0x102>
 8002946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	847a      	strh	r2, [r7, #34]	; 0x22
 800294c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800294e:	1c51      	adds	r1, r2, #1
 8002950:	85b9      	strh	r1, [r7, #44]	; 0x2c
 8002952:	0052      	lsls	r2, r2, #1
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	440a      	add	r2, r1
 8002958:	8013      	strh	r3, [r2, #0]
 800295a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800295c:	1e5a      	subs	r2, r3, #1
 800295e:	857a      	strh	r2, [r7, #42]	; 0x2a
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <create_huffman_tbl+0xee>
			hc <<= 1;
 8002964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	847b      	strh	r3, [r7, #34]	; 0x22
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 800296a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800296c:	3301      	adds	r3, #1
 800296e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d9e1      	bls.n	800293a <create_huffman_tbl+0xe2>
		}

		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800297a:	429a      	cmp	r2, r3
 800297c:	d201      	bcs.n	8002982 <create_huffman_tbl+0x12a>
 800297e:	2306      	movs	r3, #6
 8002980:	e03b      	b.n	80029fa <create_huffman_tbl+0x1a2>
		ndata -= np;
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	80fb      	strh	r3, [r7, #6]
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 800298a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298c:	4619      	mov	r1, r3
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fed9 	bl	8002746 <alloc_pool>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <create_huffman_tbl+0x148>
 800299c:	2303      	movs	r3, #3
 800299e:	e02c      	b.n	80029fa <create_huffman_tbl+0x1a2>
		jd->huffdata[num][cls] = pd;
 80029a0:	8bb9      	ldrh	r1, [r7, #28]
 80029a2:	8bfa      	ldrh	r2, [r7, #30]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0049      	lsls	r1, r1, #1
 80029a8:	440a      	add	r2, r1
 80029aa:	3210      	adds	r2, #16
 80029ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 80029b2:	2300      	movs	r3, #0
 80029b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029b6:	e017      	b.n	80029e8 <create_huffman_tbl+0x190>
			d = *data++;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60ba      	str	r2, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			if (!cls && d > 11) return JDR_FMT1;
 80029c4:	8bfb      	ldrh	r3, [r7, #30]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <create_huffman_tbl+0x17e>
 80029ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80029ce:	2b0b      	cmp	r3, #11
 80029d0:	d901      	bls.n	80029d6 <create_huffman_tbl+0x17e>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e011      	b.n	80029fa <create_huffman_tbl+0x1a2>
			*pd++ = d;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	627a      	str	r2, [r7, #36]	; 0x24
 80029dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80029e0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 80029e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e4:	3301      	adds	r3, #1
 80029e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80029e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80029ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3e3      	bcc.n	80029b8 <create_huffman_tbl+0x160>
	while (ndata) {	/* Process all tables in the segment */
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f47f af38 	bne.w	8002868 <create_huffman_tbl+0x10>
		}
	}

	return JDR_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3730      	adds	r7, #48	; 0x30
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <bitext>:

static int bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,		/* Pointer to the decompressor object */
	int nbit		/* Number of bits to extract (1 to 11) */
)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7b1b      	ldrb	r3, [r3, #12]
 8002a10:	75fb      	strb	r3, [r7, #23]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	81fb      	strh	r3, [r7, #14]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
	s = *dp; v = f = 0;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	75bb      	strb	r3, [r7, #22]
 8002a24:	2300      	movs	r3, #0
 8002a26:	817b      	strh	r3, [r7, #10]
 8002a28:	897b      	ldrh	r3, [r7, #10]
 8002a2a:	81bb      	strh	r3, [r7, #12]
	do {
		if (!msk) {				/* Next byte? */
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d137      	bne.n	8002aa2 <bitext+0xa0>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <bitext+0x5a>
				dp = jd->inbuf;	/* Top of input buffer */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a46:	6939      	ldr	r1, [r7, #16]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	81fb      	strh	r3, [r7, #14]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <bitext+0x60>
 8002a56:	f06f 0301 	mvn.w	r3, #1
 8002a5a:	e041      	b.n	8002ae0 <bitext+0xde>
			} else {
				dp++;			/* Next data ptr */
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	613b      	str	r3, [r7, #16]
			}
			dc--;				/* Decrement number of available bytes */
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	81fb      	strh	r3, [r7, #14]
			if (f) {			/* In flag sequence? */
 8002a68:	897b      	ldrh	r3, [r7, #10]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00e      	beq.n	8002a8c <bitext+0x8a>
				f = 0;			/* Exit flag sequence */
 8002a6e:	2300      	movs	r3, #0
 8002a70:	817b      	strh	r3, [r7, #10]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <bitext+0x7e>
 8002a7a:	f06f 0305 	mvn.w	r3, #5
 8002a7e:	e02f      	b.n	8002ae0 <bitext+0xde>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002a80:	23ff      	movs	r3, #255	; 0xff
 8002a82:	75bb      	strb	r3, [r7, #22]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	7dba      	ldrb	r2, [r7, #22]
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e008      	b.n	8002a9e <bitext+0x9c>
			} else {
				s = *dp;				/* Get next data byte */
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	75bb      	strb	r3, [r7, #22]
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002a92:	7dbb      	ldrb	r3, [r7, #22]
 8002a94:	2bff      	cmp	r3, #255	; 0xff
 8002a96:	d102      	bne.n	8002a9e <bitext+0x9c>
					f = 1; continue;	/* Enter flag sequence */
 8002a98:	2301      	movs	r3, #1
 8002a9a:	817b      	strh	r3, [r7, #10]
 8002a9c:	e013      	b.n	8002ac6 <bitext+0xc4>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	75fb      	strb	r3, [r7, #23]
		}
		v <<= 1;	/* Get a bit */
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	81bb      	strh	r3, [r7, #12]
		if (s & msk) v++;
 8002aa8:	7dba      	ldrb	r2, [r7, #22]
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	4013      	ands	r3, r2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <bitext+0xb8>
 8002ab4:	89bb      	ldrh	r3, [r7, #12]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	81bb      	strh	r3, [r7, #12]
		msk >>= 1;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	75fb      	strb	r3, [r7, #23]
		nbit--;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	603b      	str	r3, [r7, #0]
	} while (nbit);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1af      	bne.n	8002a2c <bitext+0x2a>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7dfa      	ldrb	r2, [r7, #23]
 8002ad0:	731a      	strb	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	89fa      	ldrh	r2, [r7, #14]
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]

	return (int)v;
 8002ade:	89bb      	ldrh	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <huffext>:
	JDEC* jd,				/* Pointer to the decompressor object */
	const uint8_t* hbits,	/* Pointer to the bit distribution table */
	const uint16_t* hcode,	/* Pointer to the code word table */
	const uint8_t* hdata	/* Pointer to the data table */
)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
	uint8_t msk, s, *dp;
	uint16_t dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
 8002afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	83fb      	strh	r3, [r7, #30]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	623b      	str	r3, [r7, #32]
	s = *dp; v = f = 0;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b12:	2300      	movs	r3, #0
 8002b14:	837b      	strh	r3, [r7, #26]
 8002b16:	8b7b      	ldrh	r3, [r7, #26]
 8002b18:	83bb      	strh	r3, [r7, #28]
	bl = 16;	/* Max code length */
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	833b      	strh	r3, [r7, #24]
	do {
		if (!msk) {		/* Next byte? */
 8002b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d13c      	bne.n	8002ba0 <huffext+0xb8>
			if (!dc) {	/* No input data is available, re-fill input buffer */
 8002b26:	8bfb      	ldrh	r3, [r7, #30]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <huffext+0x68>
				dp = jd->inbuf;	/* Top of input buffer */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	623b      	str	r3, [r7, #32]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3a:	6a39      	ldr	r1, [r7, #32]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	4798      	blx	r3
 8002b40:	4603      	mov	r3, r0
 8002b42:	83fb      	strh	r3, [r7, #30]
				if (!dc) return 0 - (int16_t)JDR_INP;	/* Err: read error or wrong stream termination */
 8002b44:	8bfb      	ldrh	r3, [r7, #30]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <huffext+0x6e>
 8002b4a:	f06f 0301 	mvn.w	r3, #1
 8002b4e:	e066      	b.n	8002c1e <huffext+0x136>
			} else {
				dp++;	/* Next data ptr */
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	3301      	adds	r3, #1
 8002b54:	623b      	str	r3, [r7, #32]
			}
			dc--;		/* Decrement number of available bytes */
 8002b56:	8bfb      	ldrh	r3, [r7, #30]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	83fb      	strh	r3, [r7, #30]
			if (f) {		/* In flag sequence? */
 8002b5c:	8b7b      	ldrh	r3, [r7, #26]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <huffext+0x9c>
				f = 0;		/* Exit flag sequence */
 8002b62:	2300      	movs	r3, #0
 8002b64:	837b      	strh	r3, [r7, #26]
				if (*dp != 0) return 0 - (int16_t)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <huffext+0x8c>
 8002b6e:	f06f 0305 	mvn.w	r3, #5
 8002b72:	e054      	b.n	8002c1e <huffext+0x136>
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8002b74:	23ff      	movs	r3, #255	; 0xff
 8002b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e00a      	b.n	8002b9a <huffext+0xb2>
			} else {
				s = *dp;				/* Get next data byte */
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8002b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b90:	2bff      	cmp	r3, #255	; 0xff
 8002b92:	d102      	bne.n	8002b9a <huffext+0xb2>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 8002b94:	2301      	movs	r3, #1
 8002b96:	837b      	strh	r3, [r7, #26]
 8002b98:	e03c      	b.n	8002c14 <huffext+0x12c>
				}
			}
			msk = 0x80;		/* Read from MSB */
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
		v <<= 1;	/* Get a bit */
 8002ba0:	8bbb      	ldrh	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	83bb      	strh	r3, [r7, #28]
		if (s & msk) v++;
 8002ba6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <huffext+0xd4>
 8002bb6:	8bbb      	ldrh	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	83bb      	strh	r3, [r7, #28]
		msk >>= 1;
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	60ba      	str	r2, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	82fb      	strh	r3, [r7, #22]
 8002bd0:	e01a      	b.n	8002c08 <huffext+0x120>
			if (v == *hcode++) {		/* Matched? */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	8bba      	ldrh	r2, [r7, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10d      	bne.n	8002bfc <huffext+0x114>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002be6:	731a      	strb	r2, [r3, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8bfa      	ldrh	r2, [r7, #30]
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	605a      	str	r2, [r3, #4]
				return *hdata;			/* Return the decoded data */
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	e010      	b.n	8002c1e <huffext+0x136>
			}
			hdata++;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	603b      	str	r3, [r7, #0]
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8002c02:	8afb      	ldrh	r3, [r7, #22]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	82fb      	strh	r3, [r7, #22]
 8002c08:	8afb      	ldrh	r3, [r7, #22]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e1      	bne.n	8002bd2 <huffext+0xea>
		}
		bl--;
 8002c0e:	8b3b      	ldrh	r3, [r7, #24]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	833b      	strh	r3, [r7, #24]
	} while (bl);
 8002c14:	8b3b      	ldrh	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d181      	bne.n	8002b1e <huffext+0x36>

	return 0 - (int16_t)JDR_FMT1;	/* Err: code not found (may be collapted data) */
 8002c1a:	f06f 0305 	mvn.w	r3, #5
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <block_idct>:

static void block_idct (
	int32_t* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
	uint8_t* dst	/* Pointer to the destination to store the block as byte array */
)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b095      	sub	sp, #84	; 0x54
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	const int32_t M13 = (int32_t)(1.41421*4096), M2 = (int32_t)(1.08239*4096), M4 = (int32_t)(2.61313*4096), M5 = (int32_t)(1.84776*4096);
 8002c32:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c38:	f241 1351 	movw	r3, #4433	; 0x1151
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3e:	f642 13cf 	movw	r3, #10703	; 0x29cf
 8002c42:	643b      	str	r3, [r7, #64]	; 0x40
 8002c44:	f641 5390 	movw	r3, #7568	; 0x1d90
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t v0, v1, v2, v3, v4, v5, v6, v7;
	int32_t t10, t11, t12, t13;
	uint16_t i;

	/* Process columns */
	for (i = 0; i < 8; i++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c50:	e0b8      	b.n	8002dc4 <block_idct+0x19c>
		v0 = src[8 * 0];	/* Get even elements */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[8 * 2];
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[8 * 4];
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[8 * 6];
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;		/* Process the even elements */
 8002c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	4413      	add	r3, r2
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	131b      	asrs	r3, r3, #12
 8002c8c:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	4413      	add	r3, r2
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	4413      	add	r3, r2
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[8 * 7];	/* Get odd elements */
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	61fb      	str	r3, [r7, #28]
		v5 = src[8 * 1];
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	61bb      	str	r3, [r7, #24]
		v6 = src[8 * 5];
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cd2:	617b      	str	r3, [r7, #20]
		v7 = src[8 * 3];
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;		/* Process the odd elements */
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002cfa:	6a3a      	ldr	r2, [r7, #32]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	131b      	asrs	r3, r3, #12
 8002d08:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	4413      	add	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	4413      	add	r3, r2
 8002d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	131b      	asrs	r3, r3, #12
 8002d20:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	131b      	asrs	r3, r3, #12
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	131b      	asrs	r3, r3, #12
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	61fb      	str	r3, [r7, #28]

		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8002d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	441a      	add	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	601a      	str	r2, [r3, #0]
		src[8 * 7] = v0 - v7;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	33e0      	adds	r3, #224	; 0xe0
 8002d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	1a8a      	subs	r2, r1, r2
 8002d6a:	601a      	str	r2, [r3, #0]
		src[8 * 1] = v1 + v6;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3320      	adds	r3, #32
 8002d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	440a      	add	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
		src[8 * 6] = v1 - v6;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	33c0      	adds	r3, #192	; 0xc0
 8002d7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	1a8a      	subs	r2, r1, r2
 8002d82:	601a      	str	r2, [r3, #0]
		src[8 * 2] = v2 + v5;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3340      	adds	r3, #64	; 0x40
 8002d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	440a      	add	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
		src[8 * 5] = v2 - v5;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	33a0      	adds	r3, #160	; 0xa0
 8002d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	1a8a      	subs	r2, r1, r2
 8002d9a:	601a      	str	r2, [r3, #0]
		src[8 * 3] = v3 + v4;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3360      	adds	r3, #96	; 0x60
 8002da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	440a      	add	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
		src[8 * 4] = v3 - v4;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3380      	adds	r3, #128	; 0x80
 8002dac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	1a8a      	subs	r2, r1, r2
 8002db2:	601a      	str	r2, [r3, #0]

		src++;	/* Next column */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002dba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	f67f af42 	bls.w	8002c52 <block_idct+0x2a>
	}

	/* Process rows */
	src -= 8;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3b20      	subs	r3, #32
 8002dd2:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dda:	e0e9      	b.n	8002fb0 <block_idct+0x388>
		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
		v1 = src[2];
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = src[4];
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
		v3 = src[6];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c

		t10 = v0 + v2;				/* Process the even elements */
 8002df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	4413      	add	r3, r2
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
		t12 = v0 - v2;
 8002e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
		t11 = (v1 - v3) * M13 >> 12;
 8002e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	131b      	asrs	r3, r3, #12
 8002e16:	623b      	str	r3, [r7, #32]
		v3 += v1;
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	4413      	add	r3, r2
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		t11 -= v3;
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	623b      	str	r3, [r7, #32]
		v0 = t10 + v3;
 8002e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	4413      	add	r3, r2
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
		v3 = t10 - v3;
 8002e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
		v1 = t11 + t12;
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	4413      	add	r3, r2
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
		v2 = t12 - t11;
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30

		v4 = src[7];				/* Get odd elements */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	61fb      	str	r3, [r7, #28]
		v5 = src[1];
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
		v6 = src[5];
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	617b      	str	r3, [r7, #20]
		v7 = src[3];
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]

		t10 = v5 - v4;				/* Process the odd elements */
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
		t11 = v5 + v4;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	623b      	str	r3, [r7, #32]
		t12 = v6 - v7;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
		v7 += v6;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
		v5 = (t11 - v7) * M13 >> 12;
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	131b      	asrs	r3, r3, #12
 8002e8e:	61bb      	str	r3, [r7, #24]
		v7 += t11;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	4413      	add	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
		t13 = (t10 + t12) * M5 >> 12;
 8002e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	4413      	add	r3, r2
 8002e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	131b      	asrs	r3, r3, #12
 8002ea6:	60fb      	str	r3, [r7, #12]
		v4 = t13 - (t10 * M2 >> 12);
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	131b      	asrs	r3, r3, #12
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	61fb      	str	r3, [r7, #28]
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	131b      	asrs	r3, r3, #12
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	617b      	str	r3, [r7, #20]
		v5 -= v6;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	61bb      	str	r3, [r7, #24]
		v4 -= v5;
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	61fb      	str	r3, [r7, #28]

		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
 8002edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	121b      	asrs	r3, r3, #8
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eea:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <block_idct+0x3a0>)
 8002eec:	5cd2      	ldrb	r2, [r2, r3]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 8002ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	121b      	asrs	r3, r3, #8
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3307      	adds	r3, #7
 8002f04:	4930      	ldr	r1, [pc, #192]	; (8002fc8 <block_idct+0x3a0>)
 8002f06:	5c8a      	ldrb	r2, [r1, r2]
 8002f08:	701a      	strb	r2, [r3, #0]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 8002f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4413      	add	r3, r2
 8002f10:	121b      	asrs	r3, r3, #8
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	492a      	ldr	r1, [pc, #168]	; (8002fc8 <block_idct+0x3a0>)
 8002f1e:	5c8a      	ldrb	r2, [r1, r2]
 8002f20:	701a      	strb	r2, [r3, #0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 8002f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	121b      	asrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	3306      	adds	r3, #6
 8002f34:	4924      	ldr	r1, [pc, #144]	; (8002fc8 <block_idct+0x3a0>)
 8002f36:	5c8a      	ldrb	r2, [r1, r2]
 8002f38:	701a      	strb	r2, [r3, #0]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	121b      	asrs	r3, r3, #8
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	491e      	ldr	r1, [pc, #120]	; (8002fc8 <block_idct+0x3a0>)
 8002f4e:	5c8a      	ldrb	r2, [r1, r2]
 8002f50:	701a      	strb	r2, [r3, #0]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 8002f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	121b      	asrs	r3, r3, #8
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	3305      	adds	r3, #5
 8002f64:	4918      	ldr	r1, [pc, #96]	; (8002fc8 <block_idct+0x3a0>)
 8002f66:	5c8a      	ldrb	r2, [r1, r2]
 8002f68:	701a      	strb	r2, [r3, #0]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 8002f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	121b      	asrs	r3, r3, #8
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3303      	adds	r3, #3
 8002f7c:	4912      	ldr	r1, [pc, #72]	; (8002fc8 <block_idct+0x3a0>)
 8002f7e:	5c8a      	ldrb	r2, [r1, r2]
 8002f80:	701a      	strb	r2, [r3, #0]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 8002f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	121b      	asrs	r3, r3, #8
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	3304      	adds	r3, #4
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <block_idct+0x3a0>)
 8002f96:	5c8a      	ldrb	r2, [r1, r2]
 8002f98:	701a      	strb	r2, [r3, #0]
		dst += 8;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	603b      	str	r3, [r7, #0]

		src += 8;	/* Next row */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3320      	adds	r3, #32
 8002fa4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 8002fa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002faa:	3301      	adds	r3, #1
 8002fac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002fb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	f67f af11 	bls.w	8002ddc <block_idct+0x1b4>
	}
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3754      	adds	r7, #84	; 0x54
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	08011ea0 	.word	0x08011ea0

08002fcc <mcu_load>:
/*-----------------------------------------------------------------------*/

static JRESULT mcu_load (
	JDEC* jd		/* Pointer to the decompressor object */
)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b090      	sub	sp, #64	; 0x40
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	int32_t *tmp = (int32_t*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *hb, *hd;
	const uint16_t *hc;
	const int32_t *dqf;


	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7b9b      	ldrb	r3, [r3, #14]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7bdb      	ldrb	r3, [r3, #15]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	fb12 f303 	smulbb	r3, r2, r3
 8002fea:	857b      	strh	r3, [r7, #42]	; 0x2a
	nbc = 2;					/* Number of C blocks (2) */
 8002fec:	2302      	movs	r3, #2
 8002fee:	853b      	strh	r3, [r7, #40]	; 0x28
	bp = jd->mcubuf;			/* Pointer to the first block */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30

	for (blk = 0; blk < nby + nbc; blk++) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ffa:	e11b      	b.n	8003234 <mcu_load+0x268>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 8002ffc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002ffe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003000:	429a      	cmp	r2, r3
 8003002:	d306      	bcc.n	8003012 <mcu_load+0x46>
 8003004:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	e000      	b.n	8003014 <mcu_load+0x48>
 8003012:	2300      	movs	r3, #0
 8003014:	84fb      	strh	r3, [r7, #38]	; 0x26
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8003016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	84bb      	strh	r3, [r7, #36]	; 0x24

		/* Extract a DC element from input stream */
		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
 8003024:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3204      	adds	r2, #4
 800302a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800302e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][0];
 8003030:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3206      	adds	r2, #6
 8003036:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800303a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][0];
 800303c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003046:	61bb      	str	r3, [r7, #24]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fd4a 	bl	8002ae8 <huffext>
 8003054:	4603      	mov	r3, r0
 8003056:	617b      	str	r3, [r7, #20]
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da04      	bge.n	8003068 <mcu_load+0x9c>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	425b      	negs	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e0ed      	b.n	8003244 <mcu_load+0x278>
		d = jd->dcv[cmp];						/* DC value of previous block */
 8003068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	3308      	adds	r3, #8
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (b) {								/* If there is any difference from previous block */
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d02a      	beq.n	80030d4 <mcu_load+0x108>
			e = bitext(jd, b);					/* Extract data bits */
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fcbe 	bl	8002a02 <bitext>
 8003086:	63b8      	str	r0, [r7, #56]	; 0x38
			if (e < 0) return 0 - e;			/* Err: input */
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	2b00      	cmp	r3, #0
 800308c:	da04      	bge.n	8003098 <mcu_load+0xcc>
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	b2db      	uxtb	r3, r3
 8003092:	425b      	negs	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e0d5      	b.n	8003244 <mcu_load+0x278>
			b = 1 << (b - 1);					/* MSB position */
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3b01      	subs	r3, #1
 800309c:	2201      	movs	r2, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	617b      	str	r3, [r7, #20]
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 80030a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <mcu_load+0xee>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
			d += e;								/* Get current value */
 80030ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	4413      	add	r3, r2
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			jd->dcv[cmp] = (int16_t)d;			/* Save current DC value for next block */
 80030c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c6:	b211      	sxth	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	3308      	adds	r3, #8
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	460a      	mov	r2, r1
 80030d2:	809a      	strh	r2, [r3, #4]
		}
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 80030d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	7c1b      	ldrb	r3, [r3, #16]
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3214      	adds	r2, #20
 80030e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e6:	613b      	str	r3, [r7, #16]
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	121a      	asrs	r2, r3, #8
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	601a      	str	r2, [r3, #0]

		/* Extract following 63 AC elements from input stream */
		for (i = 1; i < 64; tmp[i++] = 0) ;		/* Clear rest of elements */
 80030f8:	2301      	movs	r3, #1
 80030fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80030fc:	e007      	b.n	800310e <mcu_load+0x142>
 80030fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	86ba      	strh	r2, [r7, #52]	; 0x34
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003108:	4413      	add	r3, r2
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003110:	2b3f      	cmp	r3, #63	; 0x3f
 8003112:	d9f4      	bls.n	80030fe <mcu_load+0x132>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8003114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	623b      	str	r3, [r7, #32]
		hc = jd->huffcode[id][1];
 8003120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	61fb      	str	r3, [r7, #28]
		hd = jd->huffdata[id][1];
 800312c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	61bb      	str	r3, [r7, #24]
		i = 1;					/* Top of the AC elements */
 8003138:	2301      	movs	r3, #1
 800313a:	86bb      	strh	r3, [r7, #52]	; 0x34
		do {
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fcd0 	bl	8002ae8 <huffext>
 8003148:	4603      	mov	r3, r0
 800314a:	617b      	str	r3, [r7, #20]
			if (b == 0) break;					/* EOB? */
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d055      	beq.n	80031fe <mcu_load+0x232>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da04      	bge.n	8003162 <mcu_load+0x196>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	425b      	negs	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	e070      	b.n	8003244 <mcu_load+0x278>
			z = (uint16_t)b >> 4;				/* Number of leading zero elements */
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	b29b      	uxth	r3, r3
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	81fb      	strh	r3, [r7, #14]
			if (z) {
 800316a:	89fb      	ldrh	r3, [r7, #14]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <mcu_load+0x1b6>
				i += z;							/* Skip zero elements */
 8003170:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003172:	89fb      	ldrh	r3, [r7, #14]
 8003174:	4413      	add	r3, r2
 8003176:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 8003178:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800317a:	2b3f      	cmp	r3, #63	; 0x3f
 800317c:	d901      	bls.n	8003182 <mcu_load+0x1b6>
 800317e:	2306      	movs	r3, #6
 8003180:	e060      	b.n	8003244 <mcu_load+0x278>
			}
			if (b &= 0x0F) {					/* Bit length */
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d02f      	beq.n	80031f0 <mcu_load+0x224>
				d = bitext(jd, b);				/* Extract data bits */
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fc35 	bl	8002a02 <bitext>
 8003198:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (d < 0) return 0 - d;		/* Err: input device */
 800319a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	da04      	bge.n	80031aa <mcu_load+0x1de>
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	425b      	negs	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e04c      	b.n	8003244 <mcu_load+0x278>
				b = 1 << (b - 1);				/* MSB position */
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	2201      	movs	r2, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 80031b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <mcu_load+0x200>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
 80031cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031ce:	4a1f      	ldr	r2, [pc, #124]	; (800324c <mcu_load+0x280>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	81fb      	strh	r3, [r7, #14]
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
 80031d4:	89fb      	ldrh	r3, [r7, #14]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e0:	fb03 f202 	mul.w	r2, r3, r2
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ea:	440b      	add	r3, r1
 80031ec:	1212      	asrs	r2, r2, #8
 80031ee:	601a      	str	r2, [r3, #0]
			}
		} while (++i < 64);		/* Next AC element */
 80031f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031f2:	3301      	adds	r3, #1
 80031f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031f8:	2b3f      	cmp	r3, #63	; 0x3f
 80031fa:	d99f      	bls.n	800313c <mcu_load+0x170>
 80031fc:	e000      	b.n	8003200 <mcu_load+0x234>
			if (b == 0) break;					/* EOB? */
 80031fe:	bf00      	nop

		if (JD_USE_SCALE && jd->scale == 3) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7b5b      	ldrb	r3, [r3, #13]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d10b      	bne.n	8003220 <mcu_load+0x254>
			*bp = (uint8_t)((*tmp / 256) + 128);	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	da00      	bge.n	8003212 <mcu_load+0x246>
 8003210:	33ff      	adds	r3, #255	; 0xff
 8003212:	121b      	asrs	r3, r3, #8
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3b80      	subs	r3, #128	; 0x80
 8003218:	b2da      	uxtb	r2, r3
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e003      	b.n	8003228 <mcu_load+0x25c>
		} else {
			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
 8003220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003224:	f7ff fd00 	bl	8002c28 <block_idct>
		}

		bp += 64;				/* Next block */
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	3340      	adds	r3, #64	; 0x40
 800322c:	633b      	str	r3, [r7, #48]	; 0x30
	for (blk = 0; blk < nby + nbc; blk++) {
 800322e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003230:	3301      	adds	r3, #1
 8003232:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003234:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003236:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003238:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800323a:	440b      	add	r3, r1
 800323c:	429a      	cmp	r2, r3
 800323e:	f6ff aedd 	blt.w	8002ffc <mcu_load+0x30>
	}

	return JDR_OK;	/* All blocks have been loaded successfully */
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3740      	adds	r7, #64	; 0x40
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	08011de0 	.word	0x08011de0

08003250 <mcu_output>:
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint16_t x,		/* MCU position in the image (left of the MCU) */
	uint16_t y		/* MCU position in the image (top of the MCU) */
)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b098      	sub	sp, #96	; 0x60
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	460b      	mov	r3, r1
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	4613      	mov	r3, r2
 8003264:	80bb      	strh	r3, [r7, #4]
	const int16_t CVACC = (sizeof (int16_t) > 2) ? 1024 : 128;
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t yy, cb, cr;
	uint8_t *py, *pc, *rgb24;
	JRECT rect;


	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	7b9b      	ldrb	r3, [r3, #14]
 800326e:	b29b      	uxth	r3, r3
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	863b      	strh	r3, [r7, #48]	; 0x30
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	7bdb      	ldrb	r3, [r3, #15]
 8003278:	b29b      	uxth	r3, r3
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003282:	4413      	add	r3, r2
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	8b92      	ldrh	r2, [r2, #28]
 8003288:	4293      	cmp	r3, r2
 800328a:	dd05      	ble.n	8003298 <mcu_output+0x48>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8b9a      	ldrh	r2, [r3, #28]
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	b29b      	uxth	r3, r3
 8003296:	e000      	b.n	800329a <mcu_output+0x4a>
 8003298:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800329a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ry = (y + my <= jd->height) ? my : jd->height - y;
 800329c:	88ba      	ldrh	r2, [r7, #4]
 800329e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032a0:	4413      	add	r3, r2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	8bd2      	ldrh	r2, [r2, #30]
 80032a6:	4293      	cmp	r3, r2
 80032a8:	dd05      	ble.n	80032b6 <mcu_output+0x66>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8bda      	ldrh	r2, [r3, #30]
 80032ae:	88bb      	ldrh	r3, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	e000      	b.n	80032b8 <mcu_output+0x68>
 80032b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032b8:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (JD_USE_SCALE) {
		rx >>= jd->scale; ry >>= jd->scale;
 80032ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	7b52      	ldrb	r2, [r2, #13]
 80032c0:	4113      	asrs	r3, r2
 80032c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80032c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	7b52      	ldrb	r2, [r2, #13]
 80032ca:	4113      	asrs	r3, r2
 80032cc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
 80032ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <mcu_output+0x8a>
 80032d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <mcu_output+0x8e>
 80032da:	2300      	movs	r3, #0
 80032dc:	e2f0      	b.n	80038c0 <mcu_output+0x670>
		x >>= jd->scale; y >>= jd->scale;
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	7b52      	ldrb	r2, [r2, #13]
 80032e4:	4113      	asrs	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
 80032e8:	88bb      	ldrh	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	7b52      	ldrb	r2, [r2, #13]
 80032ee:	4113      	asrs	r3, r2
 80032f0:	80bb      	strh	r3, [r7, #4]
	}
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	82bb      	strh	r3, [r7, #20]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032fa:	4413      	add	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	82fb      	strh	r3, [r7, #22]
	rect.top = y; rect.bottom = y + ry - 1;
 8003304:	88bb      	ldrh	r3, [r7, #4]
 8003306:	833b      	strh	r3, [r7, #24]
 8003308:	88ba      	ldrh	r2, [r7, #4]
 800330a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800330c:	4413      	add	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	837b      	strh	r3, [r7, #26]


	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	7b5b      	ldrb	r3, [r3, #13]
 800331a:	2b03      	cmp	r3, #3
 800331c:	f000 81a3 	beq.w	8003666 <mcu_output+0x416>

		/* Build an RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	653b      	str	r3, [r7, #80]	; 0x50
		for (iy = 0; iy < my; iy++) {
 8003326:	2300      	movs	r3, #0
 8003328:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800332c:	e0e3      	b.n	80034f6 <mcu_output+0x2a6>
			pc = jd->mcubuf;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003332:	657b      	str	r3, [r7, #84]	; 0x54
			py = pc + iy * 8;
 8003334:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	461a      	mov	r2, r3
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	4413      	add	r3, r2
 8003340:	65bb      	str	r3, [r7, #88]	; 0x58
			if (my == 16) {		/* Double block height? */
 8003342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003344:	2b10      	cmp	r3, #16
 8003346:	d111      	bne.n	800336c <mcu_output+0x11c>
				pc += 64 * 4 + (iy >> 1) * 8;
 8003348:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	3320      	adds	r3, #32
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	461a      	mov	r2, r3
 8003356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003358:	4413      	add	r3, r2
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
				if (iy >= 8) py += 64;
 800335c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003360:	2b07      	cmp	r3, #7
 8003362:	d90c      	bls.n	800337e <mcu_output+0x12e>
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	3340      	adds	r3, #64	; 0x40
 8003368:	65bb      	str	r3, [r7, #88]	; 0x58
 800336a:	e008      	b.n	800337e <mcu_output+0x12e>
			} else {			/* Single block height */
				pc += mx * 8 + iy * 8;
 800336c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800336e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	461a      	mov	r2, r3
 8003378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337a:	4413      	add	r3, r2
 800337c:	657b      	str	r3, [r7, #84]	; 0x54
			}
			for (ix = 0; ix < mx; ix++) {
 800337e:	2300      	movs	r3, #0
 8003380:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003384:	e0ac      	b.n	80034e0 <mcu_output+0x290>
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 8003386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b80      	subs	r3, #128	; 0x80
 800338e:	b29b      	uxth	r3, r3
 8003390:	853b      	strh	r3, [r7, #40]	; 0x28
				cr = pc[64] - 128;
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003394:	3340      	adds	r3, #64	; 0x40
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b80      	subs	r3, #128	; 0x80
 800339c:	b29b      	uxth	r3, r3
 800339e:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (mx == 16) {					/* Double block width? */
 80033a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d10e      	bne.n	80033c4 <mcu_output+0x174>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 80033a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d102      	bne.n	80033b4 <mcu_output+0x164>
 80033ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b0:	3338      	adds	r3, #56	; 0x38
 80033b2:	65bb      	str	r3, [r7, #88]	; 0x58
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 80033b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033be:	4413      	add	r3, r2
 80033c0:	657b      	str	r3, [r7, #84]	; 0x54
 80033c2:	e002      	b.n	80033ca <mcu_output+0x17a>
				} else {						/* Single block width */
					pc++;						/* Increase chroma pointer every pixel */
 80033c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c6:	3301      	adds	r3, #1
 80033c8:	657b      	str	r3, [r7, #84]	; 0x54
				}
				yy = *py++;			/* Get Y component */
 80033ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	84bb      	strh	r3, [r7, #36]	; 0x24

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr) / CVACC);
 80033d4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033e0:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80036c0 <mcu_output+0x470>
 80033e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80033ec:	ee17 3a90 	vmov	r3, s15
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80033f8:	fb03 f202 	mul.w	r2, r3, r2
 80033fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003400:	fb92 f3f3 	sdiv	r3, r2, r3
 8003404:	b29a      	uxth	r2, r3
 8003406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003408:	4413      	add	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003412:	1c59      	adds	r1, r3, #1
 8003414:	6539      	str	r1, [r7, #80]	; 0x50
 8003416:	49b2      	ldr	r1, [pc, #712]	; (80036e0 <mcu_output+0x490>)
 8003418:	5c8a      	ldrb	r2, [r1, r2]
 800341a:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 800341c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800341e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800342a:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 80036c8 <mcu_output+0x478>
 800342e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003432:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003436:	ee17 3a90 	vmov	r3, s15
 800343a:	b21b      	sxth	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003442:	fb03 f101 	mul.w	r1, r3, r1
 8003446:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003452:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80036d0 <mcu_output+0x480>
 8003456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800345a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800345e:	ee17 3a90 	vmov	r3, s15
 8003462:	b21b      	sxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	4419      	add	r1, r3
 8003470:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003474:	fb91 f3f3 	sdiv	r3, r1, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	1c59      	adds	r1, r3, #1
 8003486:	6539      	str	r1, [r7, #80]	; 0x50
 8003488:	4995      	ldr	r1, [pc, #596]	; (80036e0 <mcu_output+0x490>)
 800348a:	5c8a      	ldrb	r2, [r1, r2]
 800348c:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb) / CVACC);
 800348e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800349a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80036d8 <mcu_output+0x488>
 800349e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034a6:	ee17 3a90 	vmov	r3, s15
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80034b2:	fb03 f202 	mul.w	r2, r3, r2
 80034b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80034ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80034be:	b29a      	uxth	r2, r3
 80034c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c2:	4413      	add	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034cc:	1c59      	adds	r1, r3, #1
 80034ce:	6539      	str	r1, [r7, #80]	; 0x50
 80034d0:	4983      	ldr	r1, [pc, #524]	; (80036e0 <mcu_output+0x490>)
 80034d2:	5c8a      	ldrb	r2, [r1, r2]
 80034d4:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix++) {
 80034d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80034da:	3301      	adds	r3, #1
 80034dc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80034e0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80034e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80034e6:	429a      	cmp	r2, r3
 80034e8:	f4ff af4d 	bcc.w	8003386 <mcu_output+0x136>
		for (iy = 0; iy < my; iy++) {
 80034ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80034f0:	3301      	adds	r3, #1
 80034f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80034f6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80034fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034fc:	429a      	cmp	r2, r3
 80034fe:	f4ff af16 	bcc.w	800332e <mcu_output+0xde>
			}
		}

		/* Descale the MCU rectangular if needed */
		if (JD_USE_SCALE && jd->scale) {
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	7b5b      	ldrb	r3, [r3, #13]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8189 	beq.w	800381e <mcu_output+0x5ce>
			uint16_t x, y, r, g, b, s, w, a;
			uint8_t *op;

			/* Get averaged RGB value of each square correcponds to a pixel */
			s = jd->scale * 2;	/* Bumber of shifts for averaging */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	7b5b      	ldrb	r3, [r3, #13]
 8003510:	b29b      	uxth	r3, r3
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	847b      	strh	r3, [r7, #34]	; 0x22
			w = 1 << jd->scale;	/* Width of square */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	7b5b      	ldrb	r3, [r3, #13]
 800351a:	461a      	mov	r2, r3
 800351c:	2301      	movs	r3, #1
 800351e:	4093      	lsls	r3, r2
 8003520:	843b      	strh	r3, [r7, #32]
			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
 8003522:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003524:	8c3b      	ldrh	r3, [r7, #32]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	0052      	lsls	r2, r2, #1
 800352e:	4413      	add	r3, r2
 8003530:	83fb      	strh	r3, [r7, #30]
			op = (uint8_t*)jd->workbuf;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	643b      	str	r3, [r7, #64]	; 0x40
			for (iy = 0; iy < my; iy += w) {
 8003538:	2300      	movs	r3, #0
 800353a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800353e:	e08b      	b.n	8003658 <mcu_output+0x408>
				for (ix = 0; ix < mx; ix += w) {
 8003540:	2300      	movs	r3, #0
 8003542:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003546:	e07b      	b.n	8003640 <mcu_output+0x3f0>
					rgb24 = (uint8_t*)jd->workbuf + (iy * mx + ix) * 3;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800354c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003550:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003552:	fb03 f202 	mul.w	r2, r3, r2
 8003556:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800355a:	441a      	add	r2, r3
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	440b      	add	r3, r1
 8003564:	653b      	str	r3, [r7, #80]	; 0x50
					r = g = b = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800356c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003570:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003574:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003578:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 800357c:	2300      	movs	r3, #0
 800357e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003582:	e034      	b.n	80035ee <mcu_output+0x39e>
						for (x = 0; x < w; x++) {
 8003584:	2300      	movs	r3, #0
 8003586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800358a:	e022      	b.n	80035d2 <mcu_output+0x382>
							r += *rgb24++;
 800358c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	653a      	str	r2, [r7, #80]	; 0x50
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b29a      	uxth	r2, r3
 8003596:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800359a:	4413      	add	r3, r2
 800359c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
							g += *rgb24++;
 80035a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	653a      	str	r2, [r7, #80]	; 0x50
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035ae:	4413      	add	r3, r2
 80035b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
							b += *rgb24++;
 80035b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	653a      	str	r2, [r7, #80]	; 0x50
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80035c2:	4413      	add	r3, r2
 80035c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						for (x = 0; x < w; x++) {
 80035c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035cc:	3301      	adds	r3, #1
 80035ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80035d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80035d6:	8c3b      	ldrh	r3, [r7, #32]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d3d7      	bcc.n	800358c <mcu_output+0x33c>
						}
						rgb24 += a;
 80035dc:	8bfb      	ldrh	r3, [r7, #30]
 80035de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035e0:	4413      	add	r3, r2
 80035e2:	653b      	str	r3, [r7, #80]	; 0x50
					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
 80035e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80035e8:	3301      	adds	r3, #1
 80035ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80035ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80035f2:	8c3b      	ldrh	r3, [r7, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d3c5      	bcc.n	8003584 <mcu_output+0x334>
					}							/* Put the averaged RGB value as a pixel */
					*op++ = (uint8_t)(r >> s);
 80035f8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80035fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035fe:	fa42 f103 	asr.w	r1, r2, r3
 8003602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	643a      	str	r2, [r7, #64]	; 0x40
 8003608:	b2ca      	uxtb	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(g >> s);
 800360c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003612:	fa42 f103 	asr.w	r1, r2, r3
 8003616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	643a      	str	r2, [r7, #64]	; 0x40
 800361c:	b2ca      	uxtb	r2, r1
 800361e:	701a      	strb	r2, [r3, #0]
					*op++ = (uint8_t)(b >> s);
 8003620:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003626:	fa42 f103 	asr.w	r1, r2, r3
 800362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	643a      	str	r2, [r7, #64]	; 0x40
 8003630:	b2ca      	uxtb	r2, r1
 8003632:	701a      	strb	r2, [r3, #0]
				for (ix = 0; ix < mx; ix += w) {
 8003634:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003638:	8c3b      	ldrh	r3, [r7, #32]
 800363a:	4413      	add	r3, r2
 800363c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003640:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003644:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003646:	429a      	cmp	r2, r3
 8003648:	f4ff af7e 	bcc.w	8003548 <mcu_output+0x2f8>
			for (iy = 0; iy < my; iy += w) {
 800364c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003650:	8c3b      	ldrh	r3, [r7, #32]
 8003652:	4413      	add	r3, r2
 8003654:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003658:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800365c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800365e:	429a      	cmp	r2, r3
 8003660:	f4ff af6e 	bcc.w	8003540 <mcu_output+0x2f0>
 8003664:	e0db      	b.n	800381e <mcu_output+0x5ce>
		}

	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */

		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
		rgb24 = (uint8_t*)jd->workbuf;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366a:	653b      	str	r3, [r7, #80]	; 0x50
		pc = jd->mcubuf + mx * my;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003670:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003672:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003674:	fb01 f202 	mul.w	r2, r1, r2
 8003678:	4413      	add	r3, r2
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b80      	subs	r3, #128	; 0x80
 8003684:	b29b      	uxth	r3, r3
 8003686:	853b      	strh	r3, [r7, #40]	; 0x28
		cr = pc[64] - 128;
 8003688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368a:	3340      	adds	r3, #64	; 0x40
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b80      	subs	r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	84fb      	strh	r3, [r7, #38]	; 0x26
		for (iy = 0; iy < my; iy += 8) {
 8003696:	2300      	movs	r3, #0
 8003698:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800369c:	e0b9      	b.n	8003812 <mcu_output+0x5c2>
			py = jd->mcubuf;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a2:	65bb      	str	r3, [r7, #88]	; 0x58
			if (iy == 8) py += 64 * 2;
 80036a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d102      	bne.n	80036b2 <mcu_output+0x462>
 80036ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ae:	3380      	adds	r3, #128	; 0x80
 80036b0:	65bb      	str	r3, [r7, #88]	; 0x58
			for (ix = 0; ix < mx; ix += 8) {
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80036b8:	e0a0      	b.n	80037fc <mcu_output+0x5ac>
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w
 80036c0:	8d4fdf3b 	.word	0x8d4fdf3b
 80036c4:	3ff66e97 	.word	0x3ff66e97
 80036c8:	9374bc6a 	.word	0x9374bc6a
 80036cc:	3fd60418 	.word	0x3fd60418
 80036d0:	872b020c 	.word	0x872b020c
 80036d4:	3fe6d916 	.word	0x3fe6d916
 80036d8:	ac083127 	.word	0xac083127
 80036dc:	3ffc5a1c 	.word	0x3ffc5a1c
 80036e0:	08011ea0 	.word	0x08011ea0
				yy = *py;	/* Get Y component */
 80036e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	84bb      	strh	r3, [r7, #36]	; 0x24
				py += 64;
 80036ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ec:	3340      	adds	r3, #64	; 0x40
 80036ee:	65bb      	str	r3, [r7, #88]	; 0x58

				/* Convert YCbCr to RGB */
				*rgb24++ = /* R */ BYTECLIP(yy + ((int16_t)(1.402 * CVACC) * cr / CVACC));
 80036f0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036fc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80038c8 <mcu_output+0x678>
 8003700:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003704:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003708:	ee17 3a90 	vmov	r3, s15
 800370c:	b21b      	sxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003714:	fb03 f202 	mul.w	r2, r3, r2
 8003718:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800371c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003720:	b29a      	uxth	r2, r3
 8003722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003724:	4413      	add	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	6539      	str	r1, [r7, #80]	; 0x50
 8003732:	496d      	ldr	r1, [pc, #436]	; (80038e8 <mcu_output+0x698>)
 8003734:	5c8a      	ldrb	r2, [r1, r2]
 8003736:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* G */ BYTECLIP(yy - ((int16_t)(0.344 * CVACC) * cb + (int16_t)(0.714 * CVACC) * cr) / CVACC);
 8003738:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800373a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003746:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80038d0 <mcu_output+0x680>
 800374a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800374e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003752:	ee17 3a90 	vmov	r3, s15
 8003756:	b21b      	sxth	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800375e:	fb03 f101 	mul.w	r1, r3, r1
 8003762:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800376e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80038d8 <mcu_output+0x688>
 8003772:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003776:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800377a:	ee17 3a90 	vmov	r3, s15
 800377e:	b21b      	sxth	r3, r3
 8003780:	4618      	mov	r0, r3
 8003782:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	4419      	add	r1, r3
 800378c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003790:	fb91 f3f3 	sdiv	r3, r1, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b29b      	uxth	r3, r3
 800379a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a0:	1c59      	adds	r1, r3, #1
 80037a2:	6539      	str	r1, [r7, #80]	; 0x50
 80037a4:	4950      	ldr	r1, [pc, #320]	; (80038e8 <mcu_output+0x698>)
 80037a6:	5c8a      	ldrb	r2, [r1, r2]
 80037a8:	701a      	strb	r2, [r3, #0]
				*rgb24++ = /* B */ BYTECLIP(yy + ((int16_t)(1.772 * CVACC) * cb / CVACC));
 80037aa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80037b6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80038e0 <mcu_output+0x690>
 80037ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80037c2:	ee17 3a90 	vmov	r3, s15
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80037ce:	fb03 f202 	mul.w	r2, r3, r2
 80037d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80037d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80037da:	b29a      	uxth	r2, r3
 80037dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037de:	4413      	add	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e8:	1c59      	adds	r1, r3, #1
 80037ea:	6539      	str	r1, [r7, #80]	; 0x50
 80037ec:	493e      	ldr	r1, [pc, #248]	; (80038e8 <mcu_output+0x698>)
 80037ee:	5c8a      	ldrb	r2, [r1, r2]
 80037f0:	701a      	strb	r2, [r3, #0]
			for (ix = 0; ix < mx; ix += 8) {
 80037f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037f6:	3308      	adds	r3, #8
 80037f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80037fc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003800:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003802:	429a      	cmp	r2, r3
 8003804:	f4ff af6e 	bcc.w	80036e4 <mcu_output+0x494>
		for (iy = 0; iy < my; iy += 8) {
 8003808:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800380c:	3308      	adds	r3, #8
 800380e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003812:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003816:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003818:	429a      	cmp	r2, r3
 800381a:	f4ff af40 	bcc.w	800369e <mcu_output+0x44e>
			}
		}
	}

	/* Squeeze up pixel table if a part of MCU is to be truncated */
	mx >>= jd->scale;
 800381e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	7b52      	ldrb	r2, [r2, #13]
 8003824:	4113      	asrs	r3, r2
 8003826:	863b      	strh	r3, [r7, #48]	; 0x30
	if (rx < mx) {
 8003828:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800382a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800382c:	429a      	cmp	r2, r3
 800382e:	d23a      	bcs.n	80038a6 <mcu_output+0x656>
		uint8_t *s, *d;
		uint16_t x, y;

		s = d = (uint8_t*)jd->workbuf;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 800383a:	2300      	movs	r3, #0
 800383c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800383e:	e02e      	b.n	800389e <mcu_output+0x64e>
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003840:	2300      	movs	r3, #0
 8003842:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003844:	e01a      	b.n	800387c <mcu_output+0x62c>
				*d++ = *s++;
 8003846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003848:	1c53      	adds	r3, r2, #1
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	63b9      	str	r1, [r7, #56]	; 0x38
 8003852:	7812      	ldrb	r2, [r2, #0]
 8003854:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003856:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003858:	1c53      	adds	r3, r2, #1
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	63b9      	str	r1, [r7, #56]	; 0x38
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	701a      	strb	r2, [r3, #0]
				*d++ = *s++;
 8003866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003868:	1c53      	adds	r3, r2, #1
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	63b9      	str	r1, [r7, #56]	; 0x38
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 8003876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003878:	3301      	adds	r3, #1
 800387a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800387c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800387e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003880:	429a      	cmp	r2, r3
 8003882:	d3e0      	bcc.n	8003846 <mcu_output+0x5f6>
			}
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 8003884:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003886:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003888:	1ad2      	subs	r2, r2, r3
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	461a      	mov	r2, r3
 8003892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003894:	4413      	add	r3, r2
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (y = 0; y < ry; y++) {
 8003898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800389a:	3301      	adds	r3, #1
 800389c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800389e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3cc      	bcc.n	8003840 <mcu_output+0x5f0>
			*d++ = w;
		} while (--n);
	}

	/* Output the RGB rectangular */
	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80038aa:	f107 0214 	add.w	r2, r7, #20
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	4798      	blx	r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3760      	adds	r7, #96	; 0x60
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	8d4fdf3b 	.word	0x8d4fdf3b
 80038cc:	3ff66e97 	.word	0x3ff66e97
 80038d0:	9374bc6a 	.word	0x9374bc6a
 80038d4:	3fd60418 	.word	0x3fd60418
 80038d8:	872b020c 	.word	0x872b020c
 80038dc:	3fe6d916 	.word	0x3fe6d916
 80038e0:	ac083127 	.word	0xac083127
 80038e4:	3ffc5a1c 	.word	0x3ffc5a1c
 80038e8:	08011ea0 	.word	0x08011ea0

080038ec <restart>:

static JRESULT restart (
	JDEC* jd,		/* Pointer to the decompressor object */
	uint16_t rstn	/* Expected restert sequense number */
)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
	uint16_t d;
	uint8_t *dp;


	/* Discard padding bits and get two bytes from the input stream */
	dp = jd->dptr; dc = jd->dctr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	82bb      	strh	r3, [r7, #20]
	d = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003908:	2300      	movs	r3, #0
 800390a:	82fb      	strh	r3, [r7, #22]
 800390c:	e025      	b.n	800395a <restart+0x6e>
		if (!dc) {	/* No input data is available, re-fill input buffer */
 800390e:	8abb      	ldrh	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d110      	bne.n	8003936 <restart+0x4a>
			dp = jd->inbuf;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60fb      	str	r3, [r7, #12]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
 8003928:	4603      	mov	r3, r0
 800392a:	82bb      	strh	r3, [r7, #20]
			if (!dc) return JDR_INP;
 800392c:	8abb      	ldrh	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <restart+0x50>
 8003932:	2302      	movs	r3, #2
 8003934:	e03d      	b.n	80039b2 <restart+0xc6>
		} else {
			dp++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3301      	adds	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
		}
		dc--;
 800393c:	8abb      	ldrh	r3, [r7, #20]
 800393e:	3b01      	subs	r3, #1
 8003940:	82bb      	strh	r3, [r7, #20]
		d = (d << 8) | *dp;	/* Get a byte */
 8003942:	8a7b      	ldrh	r3, [r7, #18]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	b21a      	sxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b21b      	sxth	r3, r3
 800394e:	4313      	orrs	r3, r2
 8003950:	b21b      	sxth	r3, r3
 8003952:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < 2; i++) {
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	3301      	adds	r3, #1
 8003958:	82fb      	strh	r3, [r7, #22]
 800395a:	8afb      	ldrh	r3, [r7, #22]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d9d6      	bls.n	800390e <restart+0x22>
	}
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8aba      	ldrh	r2, [r7, #20]
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	731a      	strb	r2, [r3, #12]

	/* Check the marker */
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7)) {
 8003972:	8a7a      	ldrh	r2, [r7, #18]
 8003974:	f64f 73d8 	movw	r3, #65496	; 0xffd8
 8003978:	4013      	ands	r3, r2
 800397a:	f64f 72d0 	movw	r2, #65488	; 0xffd0
 800397e:	4293      	cmp	r3, r2
 8003980:	d107      	bne.n	8003992 <restart+0xa6>
 8003982:	8a7a      	ldrh	r2, [r7, #18]
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	4053      	eors	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <restart+0xaa>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 8003992:	2306      	movs	r3, #6
 8003994:	e00d      	b.n	80039b2 <restart+0xc6>
	}

	/* Reset DC offset */
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	829a      	strh	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	82da      	strh	r2, [r3, #22]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	831a      	strh	r2, [r3, #24]

	return JDR_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <jd_prepare>:
	uint16_t (*infunc)(JDEC*, uint8_t*, uint16_t),	/* JPEG stream input function */
	void* pool,			/* Working buffer for the decompression session */
	uint16_t sz_pool,	/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	807b      	strh	r3, [r7, #2]
	uint32_t ofs;
	uint16_t n, i, j, len;
	JRESULT rc;


	if (!pool) return JDR_PAR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <jd_prepare+0x18>
 80039d0:	2305      	movs	r3, #5
 80039d2:	e2a4      	b.n	8003f1e <jd_prepare+0x562>

	jd->pool = pool;		/* Work memroy */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	669a      	str	r2, [r3, #104]	; 0x68
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	887a      	ldrh	r2, [r7, #2]
 80039de:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	jd->infunc = infunc;	/* Stream input function */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	671a      	str	r2, [r3, #112]	; 0x70
	jd->device = dev;		/* I/O device identifier */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ec:	675a      	str	r2, [r3, #116]	; 0x74
	jd->nrst = 0;			/* No restart interval (default) */
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	835a      	strh	r2, [r3, #26]

	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 80039f4:	2300      	movs	r3, #0
 80039f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80039f8:	e026      	b.n	8003a48 <jd_prepare+0x8c>
		for (j = 0; j < 2; j++) {
 80039fa:	2300      	movs	r3, #0
 80039fc:	843b      	strh	r3, [r7, #32]
 80039fe:	e01d      	b.n	8003a3c <jd_prepare+0x80>
			jd->huffbits[i][j] = 0;
 8003a00:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003a02:	8c3a      	ldrh	r2, [r7, #32]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	0049      	lsls	r1, r1, #1
 8003a08:	440a      	add	r2, r1
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffcode[i][j] = 0;
 8003a12:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003a14:	8c3a      	ldrh	r2, [r7, #32]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	0049      	lsls	r1, r1, #1
 8003a1a:	440a      	add	r2, r1
 8003a1c:	320c      	adds	r2, #12
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			jd->huffdata[i][j] = 0;
 8003a24:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003a26:	8c3a      	ldrh	r2, [r7, #32]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	440a      	add	r2, r1
 8003a2e:	3210      	adds	r2, #16
 8003a30:	2100      	movs	r1, #0
 8003a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 2; j++) {
 8003a36:	8c3b      	ldrh	r3, [r7, #32]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	843b      	strh	r3, [r7, #32]
 8003a3c:	8c3b      	ldrh	r3, [r7, #32]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d9de      	bls.n	8003a00 <jd_prepare+0x44>
	for (i = 0; i < 2; i++) {	/* Nulls pointers */
 8003a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a44:	3301      	adds	r3, #1
 8003a46:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d9d5      	bls.n	80039fa <jd_prepare+0x3e>
		}
	}
	for (i = 0; i < 4; jd->qttbl[i++] = 0) ;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a52:	e008      	b.n	8003a66 <jd_prepare+0xaa>
 8003a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	847a      	strh	r2, [r7, #34]	; 0x22
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3214      	adds	r2, #20
 8003a60:	2100      	movs	r1, #0
 8003a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d9f3      	bls.n	8003a54 <jd_prepare+0x98>

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 8003a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7fe fe68 	bl	8002746 <alloc_pool>
 8003a76:	61b8      	str	r0, [r7, #24]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	609a      	str	r2, [r3, #8]
	if (!seg) return JDR_MEM1;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <jd_prepare+0xcc>
 8003a84:	2303      	movs	r3, #3
 8003a86:	e24a      	b.n	8003f1e <jd_prepare+0x562>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	4798      	blx	r3
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d001      	beq.n	8003a9e <jd_prepare+0xe2>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e23f      	b.n	8003f1e <jd_prepare+0x562>
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8003ab6:	d001      	beq.n	8003abc <jd_prepare+0x100>
 8003ab8:	2306      	movs	r3, #6
 8003aba:	e230      	b.n	8003f1e <jd_prepare+0x562>
	ofs = 2;
 8003abc:	2302      	movs	r3, #2
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	4798      	blx	r3
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d001      	beq.n	8003ad6 <jd_prepare+0x11a>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e223      	b.n	8003f1e <jd_prepare+0x562>
		marker = LDB_WORD(seg);		/* Marker */
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	b21a      	sxth	r2, r3
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b21b      	sxth	r3, r3
 8003aea:	82fb      	strh	r3, [r7, #22]
		len = LDB_WORD(seg + 2);	/* Length field */
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	3302      	adds	r3, #2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	b21a      	sxth	r2, r3
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3303      	adds	r3, #3
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b21b      	sxth	r3, r3
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b21b      	sxth	r3, r3
 8003b02:	83fb      	strh	r3, [r7, #30]
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 8003b04:	8bfb      	ldrh	r3, [r7, #30]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d904      	bls.n	8003b14 <jd_prepare+0x158>
 8003b0a:	8afb      	ldrh	r3, [r7, #22]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2bff      	cmp	r3, #255	; 0xff
 8003b12:	d001      	beq.n	8003b18 <jd_prepare+0x15c>
 8003b14:	2306      	movs	r3, #6
 8003b16:	e202      	b.n	8003f1e <jd_prepare+0x562>
		len -= 2;		/* Content size excluding length field */
 8003b18:	8bfb      	ldrh	r3, [r7, #30]
 8003b1a:	3b02      	subs	r3, #2
 8003b1c:	83fb      	strh	r3, [r7, #30]
		ofs += 4 + len;	/* Number of bytes loaded */
 8003b1e:	8bfa      	ldrh	r2, [r7, #30]
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24

		switch (marker & 0xFF) {
 8003b28:	8afb      	ldrh	r3, [r7, #22]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3bc0      	subs	r3, #192	; 0xc0
 8003b2e:	2b1d      	cmp	r3, #29
 8003b30:	f200 81e3 	bhi.w	8003efa <jd_prepare+0x53e>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <jd_prepare+0x180>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003bb5 	.word	0x08003bb5
 8003b40:	08003ef7 	.word	0x08003ef7
 8003b44:	08003ef7 	.word	0x08003ef7
 8003b48:	08003ef7 	.word	0x08003ef7
 8003b4c:	08003cf1 	.word	0x08003cf1
 8003b50:	08003ef7 	.word	0x08003ef7
 8003b54:	08003ef7 	.word	0x08003ef7
 8003b58:	08003ef7 	.word	0x08003ef7
 8003b5c:	08003efb 	.word	0x08003efb
 8003b60:	08003ef7 	.word	0x08003ef7
 8003b64:	08003ef7 	.word	0x08003ef7
 8003b68:	08003ef7 	.word	0x08003ef7
 8003b6c:	08003efb 	.word	0x08003efb
 8003b70:	08003ef7 	.word	0x08003ef7
 8003b74:	08003ef7 	.word	0x08003ef7
 8003b78:	08003ef7 	.word	0x08003ef7
 8003b7c:	08003efb 	.word	0x08003efb
 8003b80:	08003efb 	.word	0x08003efb
 8003b84:	08003efb 	.word	0x08003efb
 8003b88:	08003efb 	.word	0x08003efb
 8003b8c:	08003efb 	.word	0x08003efb
 8003b90:	08003efb 	.word	0x08003efb
 8003b94:	08003efb 	.word	0x08003efb
 8003b98:	08003efb 	.word	0x08003efb
 8003b9c:	08003efb 	.word	0x08003efb
 8003ba0:	08003ef7 	.word	0x08003ef7
 8003ba4:	08003d75 	.word	0x08003d75
 8003ba8:	08003d33 	.word	0x08003d33
 8003bac:	08003efb 	.word	0x08003efb
 8003bb0:	08003caf 	.word	0x08003caf
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003bb4:	8bfb      	ldrh	r3, [r7, #30]
 8003bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bba:	d901      	bls.n	8003bc0 <jd_prepare+0x204>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e1ae      	b.n	8003f1e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	8bfa      	ldrh	r2, [r7, #30]
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	4798      	blx	r3
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	8bfb      	ldrh	r3, [r7, #30]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d001      	beq.n	8003bda <jd_prepare+0x21e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e1a1      	b.n	8003f1e <jd_prepare+0x562>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	3304      	adds	r3, #4
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	b21b      	sxth	r3, r3
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b21b      	sxth	r3, r3
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	839a      	strh	r2, [r3, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	b21a      	sxth	r2, r3
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3302      	adds	r3, #2
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	83da      	strh	r2, [r3, #30]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	3305      	adds	r3, #5
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d001      	beq.n	8003c20 <jd_prepare+0x264>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	e17e      	b.n	8003f1e <jd_prepare+0x562>

			/* Check three image components */
			for (i = 0; i < 3; i++) {
 8003c20:	2300      	movs	r3, #0
 8003c22:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c24:	e03f      	b.n	8003ca6 <jd_prepare+0x2ea>
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8003c26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3307      	adds	r3, #7
 8003c30:	461a      	mov	r2, r3
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	747b      	strb	r3, [r7, #17]
				if (!i) {	/* Y component */
 8003c3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d116      	bne.n	8003c6e <jd_prepare+0x2b2>
					if (b != 0x11 && b != 0x22 && b != 0x21) {	/* Check sampling factor */
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	2b11      	cmp	r3, #17
 8003c44:	d007      	beq.n	8003c56 <jd_prepare+0x29a>
 8003c46:	7c7b      	ldrb	r3, [r7, #17]
 8003c48:	2b22      	cmp	r3, #34	; 0x22
 8003c4a:	d004      	beq.n	8003c56 <jd_prepare+0x29a>
 8003c4c:	7c7b      	ldrb	r3, [r7, #17]
 8003c4e:	2b21      	cmp	r3, #33	; 0x21
 8003c50:	d001      	beq.n	8003c56 <jd_prepare+0x29a>
						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
 8003c52:	2308      	movs	r3, #8
 8003c54:	e163      	b.n	8003f1e <jd_prepare+0x562>
					}
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 8003c56:	7c7b      	ldrb	r3, [r7, #17]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	739a      	strb	r2, [r3, #14]
 8003c60:	7c7b      	ldrb	r3, [r7, #17]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	73da      	strb	r2, [r3, #15]
 8003c6c:	e004      	b.n	8003c78 <jd_prepare+0x2bc>
				} else {	/* Cb/Cr component */
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 8003c6e:	7c7b      	ldrb	r3, [r7, #17]
 8003c70:	2b11      	cmp	r3, #17
 8003c72:	d001      	beq.n	8003c78 <jd_prepare+0x2bc>
 8003c74:	2308      	movs	r3, #8
 8003c76:	e152      	b.n	8003f1e <jd_prepare+0x562>
				}
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 8003c78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	3308      	adds	r3, #8
 8003c82:	461a      	mov	r2, r3
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	747b      	strb	r3, [r7, #17]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 8003c8c:	7c7b      	ldrb	r3, [r7, #17]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d901      	bls.n	8003c96 <jd_prepare+0x2da>
 8003c92:	2308      	movs	r3, #8
 8003c94:	e143      	b.n	8003f1e <jd_prepare+0x562>
				jd->qtid[i] = b;
 8003c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	7c7a      	ldrb	r2, [r7, #17]
 8003c9e:	741a      	strb	r2, [r3, #16]
			for (i = 0; i < 3; i++) {
 8003ca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d9bc      	bls.n	8003c26 <jd_prepare+0x26a>
			}
			break;
 8003cac:	e136      	b.n	8003f1c <jd_prepare+0x560>

		case 0xDD:	/* DRI */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003cae:	8bfb      	ldrh	r3, [r7, #30]
 8003cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb4:	d901      	bls.n	8003cba <jd_prepare+0x2fe>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	e131      	b.n	8003f1e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	8bfa      	ldrh	r2, [r7, #30]
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	4798      	blx	r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	8bfb      	ldrh	r3, [r7, #30]
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d001      	beq.n	8003cd4 <jd_prepare+0x318>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e124      	b.n	8003f1e <jd_prepare+0x562>

			/* Get restart interval (MCUs) */
			jd->nrst = LDB_WORD(seg);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	b21a      	sxth	r2, r3
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	835a      	strh	r2, [r3, #26]
			break;
 8003cee:	e115      	b.n	8003f1c <jd_prepare+0x560>

		case 0xC4:	/* DHT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003cf0:	8bfb      	ldrh	r3, [r7, #30]
 8003cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf6:	d901      	bls.n	8003cfc <jd_prepare+0x340>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	e110      	b.n	8003f1e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	8bfa      	ldrh	r2, [r7, #30]
 8003d02:	69b9      	ldr	r1, [r7, #24]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	4798      	blx	r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	8bfb      	ldrh	r3, [r7, #30]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d001      	beq.n	8003d16 <jd_prepare+0x35a>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e103      	b.n	8003f1e <jd_prepare+0x562>

			/* Create huffman tables */
			rc = create_huffman_tbl(jd, seg, len);
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7fe fd9b 	bl	8002858 <create_huffman_tbl>
 8003d22:	4603      	mov	r3, r0
 8003d24:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003d26:	7d7b      	ldrb	r3, [r7, #21]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80f4 	beq.w	8003f16 <jd_prepare+0x55a>
 8003d2e:	7d7b      	ldrb	r3, [r7, #21]
 8003d30:	e0f5      	b.n	8003f1e <jd_prepare+0x562>
			break;

		case 0xDB:	/* DQT */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003d32:	8bfb      	ldrh	r3, [r7, #30]
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d901      	bls.n	8003d3e <jd_prepare+0x382>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e0ef      	b.n	8003f1e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	8bfa      	ldrh	r2, [r7, #30]
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	4798      	blx	r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	8bfb      	ldrh	r3, [r7, #30]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d001      	beq.n	8003d58 <jd_prepare+0x39c>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e0e2      	b.n	8003f1e <jd_prepare+0x562>

			/* Create de-quantizer tables */
			rc = create_qt_tbl(jd, seg, len);
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7fe fd1e 	bl	80027a0 <create_qt_tbl>
 8003d64:	4603      	mov	r3, r0
 8003d66:	757b      	strb	r3, [r7, #21]
			if (rc) return rc;
 8003d68:	7d7b      	ldrb	r3, [r7, #21]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80d5 	beq.w	8003f1a <jd_prepare+0x55e>
 8003d70:	7d7b      	ldrb	r3, [r7, #21]
 8003d72:	e0d4      	b.n	8003f1e <jd_prepare+0x562>
			break;

		case 0xDA:	/* SOS */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8003d74:	8bfb      	ldrh	r3, [r7, #30]
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7a:	d901      	bls.n	8003d80 <jd_prepare+0x3c4>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	e0ce      	b.n	8003f1e <jd_prepare+0x562>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	8bfa      	ldrh	r2, [r7, #30]
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	4798      	blx	r3
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	8bfb      	ldrh	r3, [r7, #30]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d001      	beq.n	8003d9a <jd_prepare+0x3de>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e0c1      	b.n	8003f1e <jd_prepare+0x562>

			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8b9b      	ldrh	r3, [r3, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <jd_prepare+0x3ee>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8bdb      	ldrh	r3, [r3, #30]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <jd_prepare+0x3f2>
 8003daa:	2306      	movs	r3, #6
 8003dac:	e0b7      	b.n	8003f1e <jd_prepare+0x562>

			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d001      	beq.n	8003dba <jd_prepare+0x3fe>
 8003db6:	2308      	movs	r3, #8
 8003db8:	e0b1      	b.n	8003f1e <jd_prepare+0x562>

			/* Check if all tables corresponding to each components have been loaded */
			for (i = 0; i < 3; i++) {
 8003dba:	2300      	movs	r3, #0
 8003dbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dbe:	e036      	b.n	8003e2e <jd_prepare+0x472>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8003dc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4413      	add	r3, r2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	747b      	strb	r3, [r7, #17]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 8003dd0:	7c7b      	ldrb	r3, [r7, #17]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <jd_prepare+0x424>
 8003dd6:	7c7b      	ldrb	r3, [r7, #17]
 8003dd8:	2b11      	cmp	r3, #17
 8003dda:	d001      	beq.n	8003de0 <jd_prepare+0x424>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	e09e      	b.n	8003f1e <jd_prepare+0x562>
				b = i ? 1 : 0;
 8003de0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	747b      	strb	r3, [r7, #17]
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1]) {	/* Check dc/ac huffman table for this component */
 8003dee:	7c7a      	ldrb	r2, [r7, #17]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3204      	adds	r2, #4
 8003df4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <jd_prepare+0x44e>
 8003dfc:	7c7b      	ldrb	r3, [r7, #17]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <jd_prepare+0x452>
					return JDR_FMT1;					/* Err: Nnot loaded */
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	e087      	b.n	8003f1e <jd_prepare+0x562>
				}
				if (!jd->qttbl[jd->qtid[i]]) {			/* Check dequantizer table for this component */
 8003e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	7c1b      	ldrb	r3, [r3, #16]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3214      	adds	r2, #20
 8003e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <jd_prepare+0x46c>
					return JDR_FMT1;					/* Err: Not loaded */
 8003e24:	2306      	movs	r3, #6
 8003e26:	e07a      	b.n	8003f1e <jd_prepare+0x562>
			for (i = 0; i < 3; i++) {
 8003e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d9c5      	bls.n	8003dc0 <jd_prepare+0x404>
				}
			}

			/* Allocate working buffer for MCU and RGB */
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	7bdb      	ldrb	r3, [r3, #15]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	7b9b      	ldrb	r3, [r3, #14]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	fb12 f303 	smulbb	r3, r2, r3
 8003e44:	827b      	strh	r3, [r7, #18]
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 8003e46:	8a7b      	ldrh	r3, [r7, #18]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <jd_prepare+0x494>
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	e066      	b.n	8003f1e <jd_prepare+0x562>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8003e50:	8a7b      	ldrh	r3, [r7, #18]
 8003e52:	01db      	lsls	r3, r3, #7
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3340      	adds	r3, #64	; 0x40
 8003e58:	83fb      	strh	r3, [r7, #30]
			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
 8003e5a:	8bfb      	ldrh	r3, [r7, #30]
 8003e5c:	2bff      	cmp	r3, #255	; 0xff
 8003e5e:	d802      	bhi.n	8003e66 <jd_prepare+0x4aa>
 8003e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e64:	83fb      	strh	r3, [r7, #30]
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 8003e66:	8bfb      	ldrh	r3, [r7, #30]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7fe fc6b 	bl	8002746 <alloc_pool>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	661a      	str	r2, [r3, #96]	; 0x60
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <jd_prepare+0x4c6>
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e04d      	b.n	8003f1e <jd_prepare+0x562>
			jd->mcubuf = (uint8_t*)alloc_pool(jd, (uint16_t)((n + 2) * 64));	/* Allocate MCU working buffer */
 8003e82:	8a7b      	ldrh	r3, [r7, #18]
 8003e84:	3302      	adds	r3, #2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7fe fc59 	bl	8002746 <alloc_pool>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	665a      	str	r2, [r3, #100]	; 0x64
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <jd_prepare+0x4ea>
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e03b      	b.n	8003f1e <jd_prepare+0x562>

			/* Pre-load the JPEG data to extract it from the bit stream */
			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	731a      	strb	r2, [r3, #12]
			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <jd_prepare+0x536>
				jd->dctr = jd->infunc(jd, seg + ofs, (uint16_t)(JD_SZBUF - ofs));
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	69b9      	ldr	r1, [r7, #24]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	4411      	add	r1, r2
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8003ed8:	b292      	uxth	r2, r2
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	4798      	blx	r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	801a      	strh	r2, [r3, #0]
				jd->dptr = seg + ofs - 1;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	441a      	add	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
			}

			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e013      	b.n	8003f1e <jd_prepare+0x562>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	e011      	b.n	8003f1e <jd_prepare+0x562>

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len) {	/* Null pointer specifies to skip bytes of stream */
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	8bfa      	ldrh	r2, [r7, #30]
 8003f00:	2100      	movs	r1, #0
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	4798      	blx	r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	8bfb      	ldrh	r3, [r7, #30]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	f43f add7 	beq.w	8003ac0 <jd_prepare+0x104>
				return JDR_INP;
 8003f12:	2302      	movs	r3, #2
 8003f14:	e003      	b.n	8003f1e <jd_prepare+0x562>
			break;
 8003f16:	bf00      	nop
 8003f18:	e5d2      	b.n	8003ac0 <jd_prepare+0x104>
			break;
 8003f1a:	bf00      	nop
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 8003f1c:	e5d0      	b.n	8003ac0 <jd_prepare+0x104>
			}
		}
	}
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3728      	adds	r7, #40	; 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop

08003f28 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	uint16_t (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	uint8_t scale							/* Output de-scaling factor (0 to 3) */
)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
	uint16_t x, y, mx, my;
	uint16_t rst, rsc;
	JRESULT rc;


	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d901      	bls.n	8003f40 <jd_decomp+0x18>
 8003f3c:	2305      	movs	r3, #5
 8003f3e:	e06a      	b.n	8004016 <jd_decomp+0xee>
	jd->scale = scale;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	79fa      	ldrb	r2, [r7, #7]
 8003f44:	735a      	strb	r2, [r3, #13]

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	7b9b      	ldrb	r3, [r3, #14]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	82bb      	strh	r3, [r7, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	7bdb      	ldrb	r3, [r3, #15]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	827b      	strh	r3, [r7, #18]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	829a      	strh	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	82da      	strh	r2, [r3, #22]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	831a      	strh	r2, [r3, #24]
	rst = rsc = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	833b      	strh	r3, [r7, #24]
 8003f78:	8b3b      	ldrh	r3, [r7, #24]
 8003f7a:	837b      	strh	r3, [r7, #26]

	rc = JDR_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75fb      	strb	r3, [r7, #23]
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8003f80:	2300      	movs	r3, #0
 8003f82:	83bb      	strh	r3, [r7, #28]
 8003f84:	e041      	b.n	800400a <jd_decomp+0xe2>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003f86:	2300      	movs	r3, #0
 8003f88:	83fb      	strh	r3, [r7, #30]
 8003f8a:	e035      	b.n	8003ff8 <jd_decomp+0xd0>
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8b5b      	ldrh	r3, [r3, #26]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d016      	beq.n	8003fc2 <jd_decomp+0x9a>
 8003f94:	8b7b      	ldrh	r3, [r7, #26]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	837a      	strh	r2, [r7, #26]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	8b52      	ldrh	r2, [r2, #26]
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10f      	bne.n	8003fc2 <jd_decomp+0x9a>
				rc = restart(jd, rsc++);
 8003fa2:	8b3b      	ldrh	r3, [r7, #24]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	833a      	strh	r2, [r7, #24]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff fc9e 	bl	80038ec <restart>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]
				if (rc != JDR_OK) return rc;
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <jd_decomp+0x96>
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	e02b      	b.n	8004016 <jd_decomp+0xee>
				rst = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	837b      	strh	r3, [r7, #26]
			}
			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff f802 	bl	8002fcc <mcu_load>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <jd_decomp+0xae>
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	e01f      	b.n	8004016 <jd_decomp+0xee>
			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
 8003fd6:	8bbb      	ldrh	r3, [r7, #28]
 8003fd8:	8bfa      	ldrh	r2, [r7, #30]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff f937 	bl	8003250 <mcu_output>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]
			if (rc != JDR_OK) return rc;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <jd_decomp+0xc8>
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	e012      	b.n	8004016 <jd_decomp+0xee>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8003ff0:	8bfa      	ldrh	r2, [r7, #30]
 8003ff2:	8abb      	ldrh	r3, [r7, #20]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	83fb      	strh	r3, [r7, #30]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8b9b      	ldrh	r3, [r3, #28]
 8003ffc:	8bfa      	ldrh	r2, [r7, #30]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d3c4      	bcc.n	8003f8c <jd_decomp+0x64>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8004002:	8bba      	ldrh	r2, [r7, #28]
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	4413      	add	r3, r2
 8004008:	83bb      	strh	r3, [r7, #28]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8bdb      	ldrh	r3, [r3, #30]
 800400e:	8bba      	ldrh	r2, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3b8      	bcc.n	8003f86 <jd_decomp+0x5e>
		}
	}

	return rc;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004022:	2003      	movs	r0, #3
 8004024:	f000 f94c 	bl	80042c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004028:	2000      	movs	r0, #0
 800402a:	f000 f805 	bl	8004038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800402e:	f7fe f86f 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_InitTick+0x54>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_InitTick+0x58>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800404e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f967 	bl	800432a <HAL_SYSTICK_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e00e      	b.n	8004084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d80a      	bhi.n	8004082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800406c:	2200      	movs	r2, #0
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	f000 f92f 	bl	80042d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004078:	4a06      	ldr	r2, [pc, #24]	; (8004094 <HAL_InitTick+0x5c>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200004c0 	.word	0x200004c0
 8004090:	200004c8 	.word	0x200004c8
 8004094:	200004c4 	.word	0x200004c4

08004098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_IncTick+0x20>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_IncTick+0x24>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4413      	add	r3, r2
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_IncTick+0x24>)
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	200004c8 	.word	0x200004c8
 80040bc:	200017c8 	.word	0x200017c8

080040c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return uwTick;
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_GetTick+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	200017c8 	.word	0x200017c8

080040d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff ffee 	bl	80040c0 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d005      	beq.n	80040fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_Delay+0x44>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040fe:	bf00      	nop
 8004100:	f7ff ffde 	bl	80040c0 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	429a      	cmp	r2, r3
 800410e:	d8f7      	bhi.n	8004100 <HAL_Delay+0x28>
  {
  }
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200004c8 	.word	0x200004c8

08004120 <__NVIC_SetPriorityGrouping>:
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <__NVIC_SetPriorityGrouping+0x40>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800413c:	4013      	ands	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <__NVIC_SetPriorityGrouping+0x44>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <__NVIC_SetPriorityGrouping+0x40>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	60d3      	str	r3, [r2, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00
 8004164:	05fa0000 	.word	0x05fa0000

08004168 <__NVIC_GetPriorityGrouping>:
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <__NVIC_GetPriorityGrouping+0x18>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0a1b      	lsrs	r3, r3, #8
 8004172:	f003 0307 	and.w	r3, r3, #7
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_EnableIRQ>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	db0b      	blt.n	80041ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	4907      	ldr	r1, [pc, #28]	; (80041bc <__NVIC_EnableIRQ+0x38>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2001      	movs	r0, #1
 80041a6:	fa00 f202 	lsl.w	r2, r0, r2
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	e000e100 	.word	0xe000e100

080041c0 <__NVIC_SetPriority>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	db0a      	blt.n	80041ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	490c      	ldr	r1, [pc, #48]	; (800420c <__NVIC_SetPriority+0x4c>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	440b      	add	r3, r1
 80041e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041e8:	e00a      	b.n	8004200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4908      	ldr	r1, [pc, #32]	; (8004210 <__NVIC_SetPriority+0x50>)
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	3b04      	subs	r3, #4
 80041f8:	0112      	lsls	r2, r2, #4
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	440b      	add	r3, r1
 80041fe:	761a      	strb	r2, [r3, #24]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000e100 	.word	0xe000e100
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <NVIC_EncodePriority>:
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f1c3 0307 	rsb	r3, r3, #7
 800422e:	2b04      	cmp	r3, #4
 8004230:	bf28      	it	cs
 8004232:	2304      	movcs	r3, #4
 8004234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3304      	adds	r3, #4
 800423a:	2b06      	cmp	r3, #6
 800423c:	d902      	bls.n	8004244 <NVIC_EncodePriority+0x30>
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3b03      	subs	r3, #3
 8004242:	e000      	b.n	8004246 <NVIC_EncodePriority+0x32>
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43da      	mvns	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	401a      	ands	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800425c:	f04f 31ff 	mov.w	r1, #4294967295
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	43d9      	mvns	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	4313      	orrs	r3, r2
}
 800426e:	4618      	mov	r0, r3
 8004270:	3724      	adds	r7, #36	; 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3b01      	subs	r3, #1
 8004288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800428c:	d301      	bcc.n	8004292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428e:	2301      	movs	r3, #1
 8004290:	e00f      	b.n	80042b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <SysTick_Config+0x40>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800429a:	210f      	movs	r1, #15
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	f7ff ff8e 	bl	80041c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <SysTick_Config+0x40>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <SysTick_Config+0x40>)
 80042ac:	2207      	movs	r2, #7
 80042ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	e000e010 	.word	0xe000e010

080042c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff29 	bl	8004120 <__NVIC_SetPriorityGrouping>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e8:	f7ff ff3e 	bl	8004168 <__NVIC_GetPriorityGrouping>
 80042ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7ff ff8e 	bl	8004214 <NVIC_EncodePriority>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff5d 	bl	80041c0 <__NVIC_SetPriority>
}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	4603      	mov	r3, r0
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff31 	bl	8004184 <__NVIC_EnableIRQ>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ffa2 	bl	800427c <SysTick_Config>
 8004338:	4603      	mov	r3, r0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e054      	b.n	8004400 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	7f5b      	ldrb	r3, [r3, #29]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc fd26 	bl	8000db8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	791b      	ldrb	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a22      	ldr	r2, [pc, #136]	; (8004408 <HAL_CRC_Init+0xc4>)
 8004380:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0218 	bic.w	r2, r2, #24
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	e00c      	b.n	80043ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6899      	ldr	r1, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f834 	bl	800440c <HAL_CRCEx_Polynomial_Set>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e028      	b.n	8004400 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	795b      	ldrb	r3, [r3, #5]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f04f 32ff 	mov.w	r2, #4294967295
 80043be:	611a      	str	r2, [r3, #16]
 80043c0:	e004      	b.n	80043cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6912      	ldr	r2, [r2, #16]
 80043ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	04c11db7 	.word	0x04c11db7

0800440c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800441c:	231f      	movs	r3, #31
 800441e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004420:	bf00      	nop
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	613a      	str	r2, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_CRCEx_Polynomial_Set+0x34>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b18      	cmp	r3, #24
 8004444:	d846      	bhi.n	80044d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	080044db 	.word	0x080044db
 8004450:	080044d5 	.word	0x080044d5
 8004454:	080044d5 	.word	0x080044d5
 8004458:	080044d5 	.word	0x080044d5
 800445c:	080044d5 	.word	0x080044d5
 8004460:	080044d5 	.word	0x080044d5
 8004464:	080044d5 	.word	0x080044d5
 8004468:	080044d5 	.word	0x080044d5
 800446c:	080044c9 	.word	0x080044c9
 8004470:	080044d5 	.word	0x080044d5
 8004474:	080044d5 	.word	0x080044d5
 8004478:	080044d5 	.word	0x080044d5
 800447c:	080044d5 	.word	0x080044d5
 8004480:	080044d5 	.word	0x080044d5
 8004484:	080044d5 	.word	0x080044d5
 8004488:	080044d5 	.word	0x080044d5
 800448c:	080044bd 	.word	0x080044bd
 8004490:	080044d5 	.word	0x080044d5
 8004494:	080044d5 	.word	0x080044d5
 8004498:	080044d5 	.word	0x080044d5
 800449c:	080044d5 	.word	0x080044d5
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044d5 	.word	0x080044d5
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044b1 	.word	0x080044b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d913      	bls.n	80044de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044ba:	e010      	b.n	80044de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b07      	cmp	r3, #7
 80044c0:	d90f      	bls.n	80044e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044c6:	e00c      	b.n	80044e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b0f      	cmp	r3, #15
 80044cc:	d90b      	bls.n	80044e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044d2:	e008      	b.n	80044e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	e006      	b.n	80044e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044da:	bf00      	nop
 80044dc:	e004      	b.n	80044e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 0118 	bic.w	r1, r3, #24
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7ff fdcc 	bl	80040c0 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e099      	b.n	8004668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004554:	e00f      	b.n	8004576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004556:	f7ff fdb3 	bl	80040c0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b05      	cmp	r3, #5
 8004562:	d908      	bls.n	8004576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2203      	movs	r2, #3
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e078      	b.n	8004668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e8      	bne.n	8004556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4b38      	ldr	r3, [pc, #224]	; (8004670 <HAL_DMA_Init+0x158>)
 8004590:	4013      	ands	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d107      	bne.n	80045e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	4313      	orrs	r3, r2
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b04      	cmp	r3, #4
 8004608:	d117      	bne.n	800463a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fa7b 	bl	8004b18 <DMA_CheckFifoParam>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004636:	2301      	movs	r3, #1
 8004638:	e016      	b.n	8004668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa32 	bl	8004aac <DMA_CalcBaseAndBitshift>
 8004648:	4603      	mov	r3, r0
 800464a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	223f      	movs	r2, #63	; 0x3f
 8004652:	409a      	lsls	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	e010803f 	.word	0xe010803f

08004674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004682:	f7ff fd1d 	bl	80040c0 <HAL_GetTick>
 8004686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d008      	beq.n	80046a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e052      	b.n	800474c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0216 	bic.w	r2, r2, #22
 80046b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_DMA_Abort+0x62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0208 	bic.w	r2, r2, #8
 80046e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f6:	e013      	b.n	8004720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f8:	f7ff fce2 	bl	80040c0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b05      	cmp	r3, #5
 8004704:	d90c      	bls.n	8004720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2203      	movs	r2, #3
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e015      	b.n	800474c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e4      	bne.n	80046f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004732:	223f      	movs	r2, #63	; 0x3f
 8004734:	409a      	lsls	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d004      	beq.n	8004772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e00c      	b.n	800478c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2205      	movs	r2, #5
 8004776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80047a4:	4b8e      	ldr	r3, [pc, #568]	; (80049e0 <HAL_DMA_IRQHandler+0x248>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a8e      	ldr	r2, [pc, #568]	; (80049e4 <HAL_DMA_IRQHandler+0x24c>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0a9b      	lsrs	r3, r3, #10
 80047b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	2208      	movs	r2, #8
 80047c4:	409a      	lsls	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01a      	beq.n	8004804 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d013      	beq.n	8004804 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	2208      	movs	r2, #8
 80047f2:	409a      	lsls	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f043 0201 	orr.w	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	2201      	movs	r2, #1
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	2201      	movs	r2, #1
 8004828:	409a      	lsls	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0202 	orr.w	r2, r3, #2
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	2204      	movs	r2, #4
 8004840:	409a      	lsls	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d012      	beq.n	8004870 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	2204      	movs	r2, #4
 800485e:	409a      	lsls	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	2210      	movs	r2, #16
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d043      	beq.n	8004908 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03c      	beq.n	8004908 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	2210      	movs	r2, #16
 8004894:	409a      	lsls	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d018      	beq.n	80048da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d024      	beq.n	8004908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e01f      	b.n	8004908 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d01b      	beq.n	8004908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e016      	b.n	8004908 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d107      	bne.n	80048f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0208 	bic.w	r2, r2, #8
 80048f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	2220      	movs	r2, #32
 800490e:	409a      	lsls	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 808f 	beq.w	8004a38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8087 	beq.w	8004a38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	2220      	movs	r2, #32
 8004930:	409a      	lsls	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b05      	cmp	r3, #5
 8004940:	d136      	bne.n	80049b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0216 	bic.w	r2, r2, #22
 8004950:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004960:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_DMA_IRQHandler+0x1da>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0208 	bic.w	r2, r2, #8
 8004980:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	223f      	movs	r2, #63	; 0x3f
 8004988:	409a      	lsls	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d07e      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
        }
        return;
 80049ae:	e079      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01d      	beq.n	80049fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10d      	bne.n	80049e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d031      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	e02c      	b.n	8004a38 <HAL_DMA_IRQHandler+0x2a0>
 80049de:	bf00      	nop
 80049e0:	200004c0 	.word	0x200004c0
 80049e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d023      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
 80049f8:	e01e      	b.n	8004a38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10f      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0210 	bic.w	r2, r2, #16
 8004a16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d032      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d022      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2205      	movs	r2, #5
 8004a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d307      	bcc.n	8004a80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f2      	bne.n	8004a64 <HAL_DMA_IRQHandler+0x2cc>
 8004a7e:	e000      	b.n	8004a82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	e000      	b.n	8004aa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004aa4:	bf00      	nop
    }
  }
}
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	3b10      	subs	r3, #16
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <DMA_CalcBaseAndBitshift+0x60>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <DMA_CalcBaseAndBitshift+0x64>)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d908      	bls.n	8004aec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <DMA_CalcBaseAndBitshift+0x68>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	1d1a      	adds	r2, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8004aea:	e006      	b.n	8004afa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <DMA_CalcBaseAndBitshift+0x68>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	aaaaaaab 	.word	0xaaaaaaab
 8004b10:	080122a0 	.word	0x080122a0
 8004b14:	fffffc00 	.word	0xfffffc00

08004b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11f      	bne.n	8004b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d856      	bhi.n	8004be6 <DMA_CheckFifoParam+0xce>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <DMA_CheckFifoParam+0x28>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b51 	.word	0x08004b51
 8004b44:	08004b63 	.word	0x08004b63
 8004b48:	08004b51 	.word	0x08004b51
 8004b4c:	08004be7 	.word	0x08004be7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d046      	beq.n	8004bea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b60:	e043      	b.n	8004bea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b6a:	d140      	bne.n	8004bee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b70:	e03d      	b.n	8004bee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7a:	d121      	bne.n	8004bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d837      	bhi.n	8004bf2 <DMA_CheckFifoParam+0xda>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <DMA_CheckFifoParam+0x70>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004b9f 	.word	0x08004b9f
 8004b90:	08004b99 	.word	0x08004b99
 8004b94:	08004bb1 	.word	0x08004bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b9c:	e030      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d025      	beq.n	8004bf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bae:	e022      	b.n	8004bf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb8:	d11f      	bne.n	8004bfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bbe:	e01c      	b.n	8004bfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d903      	bls.n	8004bce <DMA_CheckFifoParam+0xb6>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d003      	beq.n	8004bd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bcc:	e018      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd2:	e015      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      break;
 8004be4:	e00b      	b.n	8004bfe <DMA_CheckFifoParam+0xe6>
      break;
 8004be6:	bf00      	nop
 8004be8:	e00a      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      break;
 8004bea:	bf00      	nop
 8004bec:	e008      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e006      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e004      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e002      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
      break;
 8004bfe:	bf00      	nop
    }
  } 
  
  return status; 
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e175      	b.n	8004f1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c30:	2201      	movs	r2, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	f040 8164 	bne.w	8004f16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d005      	beq.n	8004c66 <HAL_GPIO_Init+0x56>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d130      	bne.n	8004cc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 0201 	and.w	r2, r3, #1
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d017      	beq.n	8004d04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2203      	movs	r2, #3
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d123      	bne.n	8004d58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	220f      	movs	r2, #15
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	08da      	lsrs	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3208      	adds	r2, #8
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2203      	movs	r2, #3
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0203 	and.w	r2, r3, #3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80be 	beq.w	8004f16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9a:	4b66      	ldr	r3, [pc, #408]	; (8004f34 <HAL_GPIO_Init+0x324>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a65      	ldr	r2, [pc, #404]	; (8004f34 <HAL_GPIO_Init+0x324>)
 8004da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <HAL_GPIO_Init+0x324>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004db2:	4a61      	ldr	r2, [pc, #388]	; (8004f38 <HAL_GPIO_Init+0x328>)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	3302      	adds	r3, #2
 8004dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	220f      	movs	r2, #15
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_GPIO_Init+0x32c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d037      	beq.n	8004e4e <HAL_GPIO_Init+0x23e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a57      	ldr	r2, [pc, #348]	; (8004f40 <HAL_GPIO_Init+0x330>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d031      	beq.n	8004e4a <HAL_GPIO_Init+0x23a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a56      	ldr	r2, [pc, #344]	; (8004f44 <HAL_GPIO_Init+0x334>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d02b      	beq.n	8004e46 <HAL_GPIO_Init+0x236>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a55      	ldr	r2, [pc, #340]	; (8004f48 <HAL_GPIO_Init+0x338>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d025      	beq.n	8004e42 <HAL_GPIO_Init+0x232>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a54      	ldr	r2, [pc, #336]	; (8004f4c <HAL_GPIO_Init+0x33c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01f      	beq.n	8004e3e <HAL_GPIO_Init+0x22e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a53      	ldr	r2, [pc, #332]	; (8004f50 <HAL_GPIO_Init+0x340>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d019      	beq.n	8004e3a <HAL_GPIO_Init+0x22a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_GPIO_Init+0x344>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_GPIO_Init+0x226>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a51      	ldr	r2, [pc, #324]	; (8004f58 <HAL_GPIO_Init+0x348>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00d      	beq.n	8004e32 <HAL_GPIO_Init+0x222>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a50      	ldr	r2, [pc, #320]	; (8004f5c <HAL_GPIO_Init+0x34c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d007      	beq.n	8004e2e <HAL_GPIO_Init+0x21e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a4f      	ldr	r2, [pc, #316]	; (8004f60 <HAL_GPIO_Init+0x350>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_GPIO_Init+0x21a>
 8004e26:	2309      	movs	r3, #9
 8004e28:	e012      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	e010      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	e00e      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e32:	2307      	movs	r3, #7
 8004e34:	e00c      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e36:	2306      	movs	r3, #6
 8004e38:	e00a      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e3a:	2305      	movs	r3, #5
 8004e3c:	e008      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e3e:	2304      	movs	r3, #4
 8004e40:	e006      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e42:	2303      	movs	r3, #3
 8004e44:	e004      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e002      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <HAL_GPIO_Init+0x240>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	f002 0203 	and.w	r2, r2, #3
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	4093      	lsls	r3, r2
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e60:	4935      	ldr	r1, [pc, #212]	; (8004f38 <HAL_GPIO_Init+0x328>)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	089b      	lsrs	r3, r3, #2
 8004e66:	3302      	adds	r3, #2
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e6e:	4b3d      	ldr	r3, [pc, #244]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e92:	4a34      	ldr	r2, [pc, #208]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e98:	4b32      	ldr	r3, [pc, #200]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ebc:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ec2:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ee6:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f10:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_GPIO_Init+0x354>)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b0f      	cmp	r3, #15
 8004f20:	f67f ae86 	bls.w	8004c30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	3724      	adds	r7, #36	; 0x24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40013800 	.word	0x40013800
 8004f3c:	40020000 	.word	0x40020000
 8004f40:	40020400 	.word	0x40020400
 8004f44:	40020800 	.word	0x40020800
 8004f48:	40020c00 	.word	0x40020c00
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40021400 	.word	0x40021400
 8004f54:	40021800 	.word	0x40021800
 8004f58:	40021c00 	.word	0x40021c00
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022400 	.word	0x40022400
 8004f64:	40013c00 	.word	0x40013c00

08004f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f78:	787b      	ldrb	r3, [r7, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004f84:	e003      	b.n	8004f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	619a      	str	r2, [r3, #24]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fa6:	4b23      	ldr	r3, [pc, #140]	; (8005034 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4a22      	ldr	r2, [pc, #136]	; (8005034 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb2:	4b20      	ldr	r3, [pc, #128]	; (8005034 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fbe:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fca:	f7ff f879 	bl	80040c0 <HAL_GetTick>
 8004fce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fd0:	e009      	b.n	8004fe6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fd2:	f7ff f875 	bl	80040c0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe0:	d901      	bls.n	8004fe6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e022      	b.n	800502c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff2:	d1ee      	bne.n	8004fd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ff4:	4b10      	ldr	r3, [pc, #64]	; (8005038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005000:	f7ff f85e 	bl	80040c0 <HAL_GetTick>
 8005004:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005006:	e009      	b.n	800501c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005008:	f7ff f85a 	bl	80040c0 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005016:	d901      	bls.n	800501c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e007      	b.n	800502c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <HAL_PWREx_EnableOverDrive+0x9c>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005028:	d1ee      	bne.n	8005008 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40023800 	.word	0x40023800
 8005038:	40007000 	.word	0x40007000

0800503c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af02      	add	r7, sp, #8
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005044:	f7ff f83c 	bl	80040c0 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e067      	b.n	8005124 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fc fe55 	bl	8001d18 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800506e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f85e 	bl	8005134 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	3b01      	subs	r3, #1
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	2120      	movs	r1, #32
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f856 	bl	8005150 <QSPI_WaitFlagStateUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80050a8:	7afb      	ldrb	r3, [r7, #11]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d135      	bne.n	800511a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <HAL_QSPI_Init+0xf0>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6852      	ldr	r2, [r2, #4]
 80050bc:	0611      	lsls	r1, r2, #24
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68d2      	ldr	r2, [r2, #12]
 80050c2:	4311      	orrs	r1, r2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	69d2      	ldr	r2, [r2, #28]
 80050c8:	4311      	orrs	r1, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6a12      	ldr	r2, [r2, #32]
 80050ce:	4311      	orrs	r1, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <HAL_QSPI_Init+0xf4>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6912      	ldr	r2, [r2, #16]
 80050e6:	0411      	lsls	r1, r2, #16
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6952      	ldr	r2, [r2, #20]
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6992      	ldr	r2, [r2, #24]
 80050f2:	4311      	orrs	r1, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005122:	7afb      	ldrb	r3, [r7, #11]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	00ffff2f 	.word	0x00ffff2f
 8005130:	ffe0f8fe 	.word	0xffe0f8fe

08005134 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005160:	e01a      	b.n	8005198 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d016      	beq.n	8005198 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7fe ffa9 	bl	80040c0 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	429a      	cmp	r2, r3
 8005178:	d302      	bcc.n	8005180 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2204      	movs	r2, #4
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	f043 0201 	orr.w	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e00e      	b.n	80051b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d1d6      	bne.n	8005162 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80051c8:	2300      	movs	r3, #0
 80051ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e29b      	b.n	800570e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8087 	beq.w	80052f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051e4:	4b96      	ldr	r3, [pc, #600]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d00c      	beq.n	800520a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f0:	4b93      	ldr	r3, [pc, #588]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d112      	bne.n	8005222 <HAL_RCC_OscConfig+0x62>
 80051fc:	4b90      	ldr	r3, [pc, #576]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005208:	d10b      	bne.n	8005222 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800520a:	4b8d      	ldr	r3, [pc, #564]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d06c      	beq.n	80052f0 <HAL_RCC_OscConfig+0x130>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d168      	bne.n	80052f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e275      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522a:	d106      	bne.n	800523a <HAL_RCC_OscConfig+0x7a>
 800522c:	4b84      	ldr	r3, [pc, #528]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a83      	ldr	r2, [pc, #524]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	e02e      	b.n	8005298 <HAL_RCC_OscConfig+0xd8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10c      	bne.n	800525c <HAL_RCC_OscConfig+0x9c>
 8005242:	4b7f      	ldr	r3, [pc, #508]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a7e      	ldr	r2, [pc, #504]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b7c      	ldr	r3, [pc, #496]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a7b      	ldr	r2, [pc, #492]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e01d      	b.n	8005298 <HAL_RCC_OscConfig+0xd8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0xc0>
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a75      	ldr	r2, [pc, #468]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800526c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b73      	ldr	r3, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a72      	ldr	r2, [pc, #456]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e00b      	b.n	8005298 <HAL_RCC_OscConfig+0xd8>
 8005280:	4b6f      	ldr	r3, [pc, #444]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a6e      	ldr	r2, [pc, #440]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4b6c      	ldr	r3, [pc, #432]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a6b      	ldr	r2, [pc, #428]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d013      	beq.n	80052c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fe ff0e 	bl	80040c0 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a8:	f7fe ff0a 	bl	80040c0 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e229      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	4b61      	ldr	r3, [pc, #388]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0xe8>
 80052c6:	e014      	b.n	80052f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fe fefa 	bl	80040c0 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fe fef6 	bl	80040c0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e215      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e2:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x110>
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d069      	beq.n	80053d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052fe:	4b50      	ldr	r3, [pc, #320]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530a:	4b4d      	ldr	r3, [pc, #308]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b08      	cmp	r3, #8
 8005314:	d11c      	bne.n	8005350 <HAL_RCC_OscConfig+0x190>
 8005316:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d116      	bne.n	8005350 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005322:	4b47      	ldr	r3, [pc, #284]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_RCC_OscConfig+0x17a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d001      	beq.n	800533a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e1e9      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	4b41      	ldr	r3, [pc, #260]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	493d      	ldr	r1, [pc, #244]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534e:	e040      	b.n	80053d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d023      	beq.n	80053a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005358:	4b39      	ldr	r3, [pc, #228]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a38      	ldr	r2, [pc, #224]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fe feac 	bl	80040c0 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536c:	f7fe fea8 	bl	80040c0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1c7      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4929      	ldr	r1, [pc, #164]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
 800539e:	e018      	b.n	80053d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a0:	4b27      	ldr	r3, [pc, #156]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a26      	ldr	r2, [pc, #152]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fe fe88 	bl	80040c0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b4:	f7fe fe84 	bl	80040c0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1a3      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c6:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d038      	beq.n	8005450 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d019      	beq.n	800541a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e6:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ea:	4a15      	ldr	r2, [pc, #84]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fe fe65 	bl	80040c0 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fa:	f7fe fe61 	bl	80040c0 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e180      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x23a>
 8005418:	e01a      	b.n	8005450 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 800541c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <HAL_RCC_OscConfig+0x280>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005426:	f7fe fe4b 	bl	80040c0 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	e00a      	b.n	8005444 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542e:	f7fe fe47 	bl	80040c0 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d903      	bls.n	8005444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e166      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
 8005440:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	4b92      	ldr	r3, [pc, #584]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ee      	bne.n	800542e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80a4 	beq.w	80055a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545e:	4b8c      	ldr	r3, [pc, #560]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	4b89      	ldr	r3, [pc, #548]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a88      	ldr	r2, [pc, #544]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b86      	ldr	r3, [pc, #536]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005486:	4b83      	ldr	r3, [pc, #524]	; (8005694 <HAL_RCC_OscConfig+0x4d4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d118      	bne.n	80054c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005492:	4b80      	ldr	r3, [pc, #512]	; (8005694 <HAL_RCC_OscConfig+0x4d4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7f      	ldr	r2, [pc, #508]	; (8005694 <HAL_RCC_OscConfig+0x4d4>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549e:	f7fe fe0f 	bl	80040c0 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fe fe0b 	bl	80040c0 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b64      	cmp	r3, #100	; 0x64
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e12a      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b8:	4b76      	ldr	r3, [pc, #472]	; (8005694 <HAL_RCC_OscConfig+0x4d4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d106      	bne.n	80054da <HAL_RCC_OscConfig+0x31a>
 80054cc:	4b70      	ldr	r3, [pc, #448]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a6f      	ldr	r2, [pc, #444]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	e02d      	b.n	8005536 <HAL_RCC_OscConfig+0x376>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0x33c>
 80054e2:	4b6b      	ldr	r3, [pc, #428]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	4a6a      	ldr	r2, [pc, #424]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6713      	str	r3, [r2, #112]	; 0x70
 80054ee:	4b68      	ldr	r3, [pc, #416]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	4a67      	ldr	r2, [pc, #412]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	6713      	str	r3, [r2, #112]	; 0x70
 80054fa:	e01c      	b.n	8005536 <HAL_RCC_OscConfig+0x376>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b05      	cmp	r3, #5
 8005502:	d10c      	bne.n	800551e <HAL_RCC_OscConfig+0x35e>
 8005504:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	4a61      	ldr	r2, [pc, #388]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800550a:	f043 0304 	orr.w	r3, r3, #4
 800550e:	6713      	str	r3, [r2, #112]	; 0x70
 8005510:	4b5f      	ldr	r3, [pc, #380]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005514:	4a5e      	ldr	r2, [pc, #376]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	6713      	str	r3, [r2, #112]	; 0x70
 800551c:	e00b      	b.n	8005536 <HAL_RCC_OscConfig+0x376>
 800551e:	4b5c      	ldr	r3, [pc, #368]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	4a5b      	ldr	r2, [pc, #364]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	6713      	str	r3, [r2, #112]	; 0x70
 800552a:	4b59      	ldr	r3, [pc, #356]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a58      	ldr	r2, [pc, #352]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005530:	f023 0304 	bic.w	r3, r3, #4
 8005534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d015      	beq.n	800556a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fe fdbf 	bl	80040c0 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005544:	e00a      	b.n	800555c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005546:	f7fe fdbb 	bl	80040c0 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	f241 3288 	movw	r2, #5000	; 0x1388
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e0d8      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555c:	4b4c      	ldr	r3, [pc, #304]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0ee      	beq.n	8005546 <HAL_RCC_OscConfig+0x386>
 8005568:	e014      	b.n	8005594 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fe fda9 	bl	80040c0 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005570:	e00a      	b.n	8005588 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005572:	f7fe fda5 	bl	80040c0 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005580:	4293      	cmp	r3, r2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e0c2      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005588:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ee      	bne.n	8005572 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d105      	bne.n	80055a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800559a:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a3c      	ldr	r2, [pc, #240]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80055a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80ae 	beq.w	800570c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b0:	4b37      	ldr	r3, [pc, #220]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d06d      	beq.n	8005698 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d14b      	bne.n	800565c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c4:	4b32      	ldr	r3, [pc, #200]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a31      	ldr	r2, [pc, #196]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80055ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fe fd76 	bl	80040c0 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe fd72 	bl	80040c0 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e091      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	071b      	lsls	r3, r3, #28
 8005622:	491b      	ldr	r1, [pc, #108]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005624:	4313      	orrs	r3, r2
 8005626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800562e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fe fd44 	bl	80040c0 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563c:	f7fe fd40 	bl	80040c0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e05f      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x47c>
 800565a:	e057      	b.n	800570c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0b      	ldr	r2, [pc, #44]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fe fd2a 	bl	80040c0 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fe fd26 	bl	80040c0 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e045      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	4b03      	ldr	r3, [pc, #12]	; (8005690 <HAL_RCC_OscConfig+0x4d0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x4b0>
 800568e:	e03d      	b.n	800570c <HAL_RCC_OscConfig+0x54c>
 8005690:	40023800 	.word	0x40023800
 8005694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005698:	4b1f      	ldr	r3, [pc, #124]	; (8005718 <HAL_RCC_OscConfig+0x558>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d030      	beq.n	8005708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d129      	bne.n	8005708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d122      	bne.n	8005708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056c8:	4013      	ands	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d119      	bne.n	8005708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	3b01      	subs	r3, #1
 80056e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d10f      	bne.n	8005708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d107      	bne.n	8005708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800

0800571c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0d0      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005734:	4b6a      	ldr	r3, [pc, #424]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d910      	bls.n	8005764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005742:	4b67      	ldr	r3, [pc, #412]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 020f 	bic.w	r2, r3, #15
 800574a:	4965      	ldr	r1, [pc, #404]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b63      	ldr	r3, [pc, #396]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0b8      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800577c:	4b59      	ldr	r3, [pc, #356]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4a58      	ldr	r2, [pc, #352]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005794:	4b53      	ldr	r3, [pc, #332]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 800579a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800579e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a0:	4b50      	ldr	r3, [pc, #320]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	494d      	ldr	r1, [pc, #308]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d040      	beq.n	8005840 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d115      	bne.n	80057fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e07f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057de:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e073      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ee:	4b3d      	ldr	r3, [pc, #244]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e06b      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057fe:	4b39      	ldr	r3, [pc, #228]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4936      	ldr	r1, [pc, #216]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fe fc56 	bl	80040c0 <HAL_GetTick>
 8005814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	e00a      	b.n	800582e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005818:	f7fe fc52 	bl	80040c0 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e053      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 020c 	and.w	r2, r3, #12
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	429a      	cmp	r2, r3
 800583e:	d1eb      	bne.n	8005818 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005840:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d210      	bcs.n	8005870 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584e:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 020f 	bic.w	r2, r3, #15
 8005856:	4922      	ldr	r1, [pc, #136]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e032      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800587c:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4916      	ldr	r1, [pc, #88]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058ae:	f000 f821 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 80058b2:	4602      	mov	r2, r0
 80058b4:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	490a      	ldr	r1, [pc, #40]	; (80058e8 <HAL_RCC_ClockConfig+0x1cc>)
 80058c0:	5ccb      	ldrb	r3, [r1, r3]
 80058c2:	fa22 f303 	lsr.w	r3, r2, r3
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <HAL_RCC_ClockConfig+0x1d0>)
 80058c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_ClockConfig+0x1d4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fbb2 	bl	8004038 <HAL_InitTick>

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40023c00 	.word	0x40023c00
 80058e4:	40023800 	.word	0x40023800
 80058e8:	08011dc8 	.word	0x08011dc8
 80058ec:	200004c0 	.word	0x200004c0
 80058f0:	200004c4 	.word	0x200004c4

080058f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f8:	b094      	sub	sp, #80	; 0x50
 80058fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005900:	2300      	movs	r3, #0
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	2300      	movs	r3, #0
 8005906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800590c:	4b79      	ldr	r3, [pc, #484]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 030c 	and.w	r3, r3, #12
 8005914:	2b08      	cmp	r3, #8
 8005916:	d00d      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x40>
 8005918:	2b08      	cmp	r3, #8
 800591a:	f200 80e1 	bhi.w	8005ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x34>
 8005922:	2b04      	cmp	r3, #4
 8005924:	d003      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x3a>
 8005926:	e0db      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005928:	4b73      	ldr	r3, [pc, #460]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800592a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800592c:	e0db      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800592e:	4b73      	ldr	r3, [pc, #460]	; (8005afc <HAL_RCC_GetSysClockFreq+0x208>)
 8005930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005932:	e0d8      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005934:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800593e:	4b6d      	ldr	r3, [pc, #436]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d063      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	099b      	lsrs	r3, r3, #6
 8005950:	2200      	movs	r2, #0
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
 8005954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
 8005962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	0159      	lsls	r1, r3, #5
 8005974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005978:	0150      	lsls	r0, r2, #5
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4621      	mov	r1, r4
 8005980:	1a51      	subs	r1, r2, r1
 8005982:	6139      	str	r1, [r7, #16]
 8005984:	4629      	mov	r1, r5
 8005986:	eb63 0301 	sbc.w	r3, r3, r1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005998:	4659      	mov	r1, fp
 800599a:	018b      	lsls	r3, r1, #6
 800599c:	4651      	mov	r1, sl
 800599e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059a2:	4651      	mov	r1, sl
 80059a4:	018a      	lsls	r2, r1, #6
 80059a6:	4651      	mov	r1, sl
 80059a8:	ebb2 0801 	subs.w	r8, r2, r1
 80059ac:	4659      	mov	r1, fp
 80059ae:	eb63 0901 	sbc.w	r9, r3, r1
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059c6:	4690      	mov	r8, r2
 80059c8:	4699      	mov	r9, r3
 80059ca:	4623      	mov	r3, r4
 80059cc:	eb18 0303 	adds.w	r3, r8, r3
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	462b      	mov	r3, r5
 80059d4:	eb49 0303 	adc.w	r3, r9, r3
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059e6:	4629      	mov	r1, r5
 80059e8:	024b      	lsls	r3, r1, #9
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059f0:	4621      	mov	r1, r4
 80059f2:	024a      	lsls	r2, r1, #9
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fa:	2200      	movs	r2, #0
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a04:	f7fa fc74 	bl	80002f0 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a10:	e058      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a12:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	2300      	movs	r3, #0
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	f04f 0000 	mov.w	r0, #0
 8005a34:	f04f 0100 	mov.w	r1, #0
 8005a38:	0159      	lsls	r1, r3, #5
 8005a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a3e:	0150      	lsls	r0, r2, #5
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4641      	mov	r1, r8
 8005a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a64:	ebb2 040a 	subs.w	r4, r2, sl
 8005a68:	eb63 050b 	sbc.w	r5, r3, fp
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	00eb      	lsls	r3, r5, #3
 8005a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a7a:	00e2      	lsls	r2, r4, #3
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	461d      	mov	r5, r3
 8005a80:	4643      	mov	r3, r8
 8005a82:	18e3      	adds	r3, r4, r3
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	464b      	mov	r3, r9
 8005a88:	eb45 0303 	adc.w	r3, r5, r3
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	028b      	lsls	r3, r1, #10
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	028a      	lsls	r2, r1, #10
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	61fa      	str	r2, [r7, #28]
 8005ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab8:	f7fa fc1a 	bl	80002f0 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3750      	adds	r7, #80	; 0x50
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	007a1200 	.word	0x007a1200

08005b00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	200004c0 	.word	0x200004c0

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	08011dd8 	.word	0x08011dd8

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b44:	f7ff ffdc 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	08011dd8 	.word	0x08011dd8

08005b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d012      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b90:	4b69      	ldr	r3, [pc, #420]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a68      	ldr	r2, [pc, #416]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b9a:	6093      	str	r3, [r2, #8]
 8005b9c:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	4964      	ldr	r1, [pc, #400]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bc2:	4b5d      	ldr	r3, [pc, #372]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	4959      	ldr	r1, [pc, #356]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be0:	d101      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bfe:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	494a      	ldr	r1, [pc, #296]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 808b 	beq.w	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c4c:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	4a39      	ldr	r2, [pc, #228]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c56:	6413      	str	r3, [r2, #64]	; 0x40
 8005c58:	4b37      	ldr	r3, [pc, #220]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c64:	4b35      	ldr	r3, [pc, #212]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fe fa26 	bl	80040c0 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c78:	f7fe fa22 	bl	80040c0 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e38f      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c8a:	4b2c      	ldr	r3, [pc, #176]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c96:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d035      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d02e      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cb4:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cdc:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d114      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fe f9ea 	bl	80040c0 <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cee:	e00a      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf0:	f7fe f9e6 	bl	80040c0 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e351      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0ee      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1e:	d111      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d2e:	400b      	ands	r3, r1
 8005d30:	4901      	ldr	r1, [pc, #4]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
 8005d36:	e00b      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	0ffffcff 	.word	0x0ffffcff
 8005d44:	4bac      	ldr	r3, [pc, #688]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4aab      	ldr	r2, [pc, #684]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d4e:	6093      	str	r3, [r2, #8]
 8005d50:	4ba9      	ldr	r3, [pc, #676]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5c:	49a6      	ldr	r1, [pc, #664]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d010      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d6e:	4ba2      	ldr	r3, [pc, #648]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d74:	4aa0      	ldr	r2, [pc, #640]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d7e:	4b9e      	ldr	r3, [pc, #632]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	499b      	ldr	r1, [pc, #620]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d9c:	4b96      	ldr	r3, [pc, #600]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005daa:	4993      	ldr	r1, [pc, #588]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dbe:	4b8e      	ldr	r3, [pc, #568]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dcc:	498a      	ldr	r1, [pc, #552]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005de0:	4b85      	ldr	r3, [pc, #532]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dee:	4982      	ldr	r1, [pc, #520]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e02:	4b7d      	ldr	r3, [pc, #500]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	4979      	ldr	r1, [pc, #484]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e24:	4b74      	ldr	r3, [pc, #464]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2a:	f023 0203 	bic.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	4971      	ldr	r1, [pc, #452]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e46:	4b6c      	ldr	r3, [pc, #432]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	f023 020c 	bic.w	r2, r3, #12
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e54:	4968      	ldr	r1, [pc, #416]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e68:	4b63      	ldr	r3, [pc, #396]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	4960      	ldr	r1, [pc, #384]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	4957      	ldr	r1, [pc, #348]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eac:	4b52      	ldr	r3, [pc, #328]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	494f      	ldr	r1, [pc, #316]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ece:	4b4a      	ldr	r3, [pc, #296]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005edc:	4946      	ldr	r1, [pc, #280]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ef0:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	493e      	ldr	r1, [pc, #248]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005f12:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f20:	4935      	ldr	r1, [pc, #212]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f34:	4b30      	ldr	r3, [pc, #192]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f42:	492d      	ldr	r1, [pc, #180]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f56:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f64:	4924      	ldr	r1, [pc, #144]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f74:	d101      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f76:	2301      	movs	r3, #1
 8005f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f86:	2301      	movs	r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f96:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa4:	4914      	ldr	r1, [pc, #80]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	490b      	ldr	r1, [pc, #44]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fec:	4902      	ldr	r1, [pc, #8]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006008:	4b8a      	ldr	r3, [pc, #552]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800600a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800600e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	4986      	ldr	r1, [pc, #536]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800602c:	4b81      	ldr	r3, [pc, #516]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800602e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006032:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800603c:	497d      	ldr	r1, [pc, #500]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d006      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80d6 	beq.w	8006204 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006058:	4b76      	ldr	r3, [pc, #472]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a75      	ldr	r2, [pc, #468]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800605e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006064:	f7fe f82c 	bl	80040c0 <HAL_GetTick>
 8006068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800606a:	e008      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800606c:	f7fe f828 	bl	80040c0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	; 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e195      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800607e:	4b6d      	ldr	r3, [pc, #436]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d021      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	d11d      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800609e:	4b65      	ldr	r3, [pc, #404]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060ac:	4b61      	ldr	r3, [pc, #388]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b2:	0e1b      	lsrs	r3, r3, #24
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	019a      	lsls	r2, r3, #6
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	041b      	lsls	r3, r3, #16
 80060c4:	431a      	orrs	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	061b      	lsls	r3, r3, #24
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	071b      	lsls	r3, r3, #28
 80060d2:	4958      	ldr	r1, [pc, #352]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02e      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006104:	d129      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006106:	4b4b      	ldr	r3, [pc, #300]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006114:	4b47      	ldr	r3, [pc, #284]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611a:	0f1b      	lsrs	r3, r3, #28
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	019a      	lsls	r2, r3, #6
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	061b      	lsls	r3, r3, #24
 8006134:	431a      	orrs	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	071b      	lsls	r3, r3, #28
 800613a:	493e      	ldr	r1, [pc, #248]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006142:	4b3c      	ldr	r3, [pc, #240]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006148:	f023 021f 	bic.w	r2, r3, #31
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	3b01      	subs	r3, #1
 8006152:	4938      	ldr	r1, [pc, #224]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01d      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006166:	4b33      	ldr	r3, [pc, #204]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616c:	0e1b      	lsrs	r3, r3, #24
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006174:	4b2f      	ldr	r3, [pc, #188]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800617a:	0f1b      	lsrs	r3, r3, #28
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	019a      	lsls	r2, r3, #6
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	041b      	lsls	r3, r3, #16
 800618e:	431a      	orrs	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	061b      	lsls	r3, r3, #24
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	071b      	lsls	r3, r3, #28
 800619a:	4926      	ldr	r1, [pc, #152]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d011      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	019a      	lsls	r2, r3, #6
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	071b      	lsls	r3, r3, #28
 80061ca:	491a      	ldr	r1, [pc, #104]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061d2:	4b18      	ldr	r3, [pc, #96]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a17      	ldr	r2, [pc, #92]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061de:	f7fd ff6f 	bl	80040c0 <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e4:	e008      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061e6:	f7fd ff6b 	bl	80040c0 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b64      	cmp	r3, #100	; 0x64
 80061f2:	d901      	bls.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e0d8      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0f0      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	f040 80ce 	bne.w	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006218:	f7fd ff52 	bl	80040c0 <HAL_GetTick>
 800621c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800621e:	e00b      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006220:	f7fd ff4e 	bl	80040c0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b64      	cmp	r3, #100	; 0x64
 800622c:	d904      	bls.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e0bb      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006238:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006244:	d0ec      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006262:	2b00      	cmp	r3, #0
 8006264:	d02e      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d12a      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800626e:	4b51      	ldr	r3, [pc, #324]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800627c:	4b4d      	ldr	r3, [pc, #308]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	0f1b      	lsrs	r3, r3, #28
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	019a      	lsls	r2, r3, #6
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	061b      	lsls	r3, r3, #24
 800629c:	431a      	orrs	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	071b      	lsls	r3, r3, #28
 80062a2:	4944      	ldr	r1, [pc, #272]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062aa:	4b42      	ldr	r3, [pc, #264]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	493d      	ldr	r1, [pc, #244]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d022      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d8:	d11d      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80062da:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e0:	0e1b      	lsrs	r3, r3, #24
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062e8:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	0f1b      	lsrs	r3, r3, #28
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	019a      	lsls	r2, r3, #6
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	431a      	orrs	r2, r3
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	061b      	lsls	r3, r3, #24
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	071b      	lsls	r3, r3, #28
 800630e:	4929      	ldr	r1, [pc, #164]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d028      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006322:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	0e1b      	lsrs	r3, r3, #24
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006330:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	0c1b      	lsrs	r3, r3, #16
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	019a      	lsls	r2, r3, #6
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	431a      	orrs	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	061b      	lsls	r3, r3, #24
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	071b      	lsls	r3, r3, #28
 8006356:	4917      	ldr	r1, [pc, #92]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800635e:	4b15      	ldr	r3, [pc, #84]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4911      	ldr	r1, [pc, #68]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a0e      	ldr	r2, [pc, #56]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800637a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006380:	f7fd fe9e 	bl	80040c0 <HAL_GetTick>
 8006384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006386:	e008      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006388:	f7fd fe9a 	bl	80040c0 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	; 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e007      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a6:	d1ef      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800

080063b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e09d      	b.n	8006506 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063da:	d009      	beq.n	80063f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	61da      	str	r2, [r3, #28]
 80063e2:	e005      	b.n	80063f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb fdba 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006426:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006430:	d902      	bls.n	8006438 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e002      	b.n	800643e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800643c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006446:	d007      	beq.n	8006458 <HAL_SPI_Init+0xa0>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	ea42 0103 	orr.w	r1, r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	f003 0204 	and.w	r2, r3, #4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064d4:	ea42 0103 	orr.w	r1, r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b088      	sub	sp, #32
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_SPI_Transmit+0x22>
 800652c:	2302      	movs	r3, #2
 800652e:	e158      	b.n	80067e2 <HAL_SPI_Transmit+0x2d4>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006538:	f7fd fdc2 	bl	80040c0 <HAL_GetTick>
 800653c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b01      	cmp	r3, #1
 800654c:	d002      	beq.n	8006554 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800654e:	2302      	movs	r3, #2
 8006550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006552:	e13d      	b.n	80067d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_SPI_Transmit+0x52>
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006564:	e134      	b.n	80067d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2203      	movs	r2, #3
 800656a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	88fa      	ldrh	r2, [r7, #6]
 8006584:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	d10f      	bne.n	80065d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d007      	beq.n	80065f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f8:	d94b      	bls.n	8006692 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SPI_Transmit+0xfa>
 8006602:	8afb      	ldrh	r3, [r7, #22]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d13e      	bne.n	8006686 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	1c9a      	adds	r2, r3, #2
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800662c:	e02b      	b.n	8006686 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d112      	bne.n	8006662 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	1c9a      	adds	r2, r3, #2
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006660:	e011      	b.n	8006686 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006662:	f7fd fd2d 	bl	80040c0 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d803      	bhi.n	800667a <HAL_SPI_Transmit+0x16c>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d102      	bne.n	8006680 <HAL_SPI_Transmit+0x172>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006684:	e0a4      	b.n	80067d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ce      	bne.n	800662e <HAL_SPI_Transmit+0x120>
 8006690:	e07c      	b.n	800678c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_Transmit+0x192>
 800669a:	8afb      	ldrh	r3, [r7, #22]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d170      	bne.n	8006782 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d912      	bls.n	80066d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	881a      	ldrh	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	1c9a      	adds	r2, r3, #2
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b02      	subs	r3, #2
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ce:	e058      	b.n	8006782 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80066f6:	e044      	b.n	8006782 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b02      	cmp	r3, #2
 8006704:	d12b      	bne.n	800675e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	d912      	bls.n	8006736 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	881a      	ldrh	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	1c9a      	adds	r2, r3, #2
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b02      	subs	r3, #2
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006734:	e025      	b.n	8006782 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675c:	e011      	b.n	8006782 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675e:	f7fd fcaf 	bl	80040c0 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d803      	bhi.n	8006776 <HAL_SPI_Transmit+0x268>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d102      	bne.n	800677c <HAL_SPI_Transmit+0x26e>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d102      	bne.n	8006782 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006780:	e026      	b.n	80067d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1b5      	bne.n	80066f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fd07 	bl	80071a4 <SPI_EndRxTxTransaction>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e000      	b.n	80067d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80067ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b088      	sub	sp, #32
 80067ee:	af02      	add	r7, sp, #8
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006806:	d112      	bne.n	800682e <HAL_SPI_Receive+0x44>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10e      	bne.n	800682e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2204      	movs	r2, #4
 8006814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f910 	bl	8006a4a <HAL_SPI_TransmitReceive>
 800682a:	4603      	mov	r3, r0
 800682c:	e109      	b.n	8006a42 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_SPI_Receive+0x52>
 8006838:	2302      	movs	r3, #2
 800683a:	e102      	b.n	8006a42 <HAL_SPI_Receive+0x258>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006844:	f7fd fc3c 	bl	80040c0 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	d002      	beq.n	800685c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006856:	2302      	movs	r3, #2
 8006858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800685a:	e0e9      	b.n	8006a30 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_SPI_Receive+0x7e>
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800686c:	e0e0      	b.n	8006a30 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2204      	movs	r2, #4
 8006872:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	88fa      	ldrh	r2, [r7, #6]
 8006886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068b8:	d908      	bls.n	80068cc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	e007      	b.n	80068dc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e4:	d10f      	bne.n	8006906 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006904:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d007      	beq.n	8006924 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006922:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800692c:	d867      	bhi.n	80069fe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800692e:	e030      	b.n	8006992 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b01      	cmp	r3, #1
 800693c:	d117      	bne.n	800696e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f103 020c 	add.w	r2, r3, #12
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800696c:	e011      	b.n	8006992 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696e:	f7fd fba7 	bl	80040c0 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d803      	bhi.n	8006986 <HAL_SPI_Receive+0x19c>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d102      	bne.n	800698c <HAL_SPI_Receive+0x1a2>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006990:	e04e      	b.n	8006a30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1c8      	bne.n	8006930 <HAL_SPI_Receive+0x146>
 800699e:	e034      	b.n	8006a0a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d115      	bne.n	80069da <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	b292      	uxth	r2, r2
 80069ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80069d8:	e011      	b.n	80069fe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069da:	f7fd fb71 	bl	80040c0 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d803      	bhi.n	80069f2 <HAL_SPI_Receive+0x208>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d102      	bne.n	80069f8 <HAL_SPI_Receive+0x20e>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069fc:	e018      	b.n	8006a30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ca      	bne.n	80069a0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fb4c 	bl	80070ac <SPI_EndRxTransaction>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
 8006a2c:	e000      	b.n	8006a30 <HAL_SPI_Receive+0x246>
  }

error :
 8006a2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b08a      	sub	sp, #40	; 0x28
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_SPI_TransmitReceive+0x26>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e1fb      	b.n	8006e68 <HAL_SPI_TransmitReceive+0x41e>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a78:	f7fd fb22 	bl	80040c0 <HAL_GetTick>
 8006a7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a8c:	887b      	ldrh	r3, [r7, #2]
 8006a8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a90:	887b      	ldrh	r3, [r7, #2]
 8006a92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a94:	7efb      	ldrb	r3, [r7, #27]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00e      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x6e>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa0:	d106      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d102      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x66>
 8006aaa:	7efb      	ldrb	r3, [r7, #27]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d003      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ab6:	e1cd      	b.n	8006e54 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_SPI_TransmitReceive+0x80>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_SPI_TransmitReceive+0x80>
 8006ac4:	887b      	ldrh	r3, [r7, #2]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ad0:	e1c0      	b.n	8006e54 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d003      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	887a      	ldrh	r2, [r7, #2]
 8006afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	887a      	ldrh	r2, [r7, #2]
 8006b12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b28:	d802      	bhi.n	8006b30 <HAL_SPI_TransmitReceive+0xe6>
 8006b2a:	8a3b      	ldrh	r3, [r7, #16]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d908      	bls.n	8006b42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	e007      	b.n	8006b52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d007      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b78:	d97c      	bls.n	8006c74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_SPI_TransmitReceive+0x13e>
 8006b82:	8a7b      	ldrh	r3, [r7, #18]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d169      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	881a      	ldrh	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	1c9a      	adds	r2, r3, #2
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bac:	e056      	b.n	8006c5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d11b      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x1aa>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x1aa>
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d113      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	881a      	ldrh	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d11c      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x1f2>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	b292      	uxth	r2, r2
 8006c1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	1c9a      	adds	r2, r3, #2
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c3c:	f7fd fa40 	bl	80040c0 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d807      	bhi.n	8006c5c <HAL_SPI_TransmitReceive+0x212>
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d003      	beq.n	8006c5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c5a:	e0fb      	b.n	8006e54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1a3      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x164>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d19d      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x164>
 8006c72:	e0df      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x23a>
 8006c7c:	8a7b      	ldrh	r3, [r7, #18]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	f040 80cb 	bne.w	8006e1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d912      	bls.n	8006cb4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b02      	subs	r3, #2
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cb2:	e0b2      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	7812      	ldrb	r2, [r2, #0]
 8006cc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cda:	e09e      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d134      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0x30a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d02f      	beq.n	8006d54 <HAL_SPI_TransmitReceive+0x30a>
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d12c      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d912      	bls.n	8006d2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b02      	subs	r3, #2
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d28:	e012      	b.n	8006d50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d148      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x3aa>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d042      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d923      	bls.n	8006dc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	b292      	uxth	r2, r2
 8006d86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b02      	subs	r3, #2
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d81f      	bhi.n	8006df0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dbe:	605a      	str	r2, [r3, #4]
 8006dc0:	e016      	b.n	8006df0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f103 020c 	add.w	r2, r3, #12
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006df0:	2301      	movs	r3, #1
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006df4:	f7fd f964 	bl	80040c0 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d803      	bhi.n	8006e0c <HAL_SPI_TransmitReceive+0x3c2>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d102      	bne.n	8006e12 <HAL_SPI_TransmitReceive+0x3c8>
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e18:	e01c      	b.n	8006e54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f af5b 	bne.w	8006cdc <HAL_SPI_TransmitReceive+0x292>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f47f af54 	bne.w	8006cdc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f9b3 	bl	80071a4 <SPI_EndRxTxTransaction>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	661a      	str	r2, [r3, #96]	; 0x60
 8006e50:	e000      	b.n	8006e54 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	; 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e80:	f7fd f91e 	bl	80040c0 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e90:	f7fd f916 	bl	80040c0 <HAL_GetTick>
 8006e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e96:	4b39      	ldr	r3, [pc, #228]	; (8006f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	015b      	lsls	r3, r3, #5
 8006e9c:	0d1b      	lsrs	r3, r3, #20
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
 8006ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ea6:	e054      	b.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d050      	beq.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eb0:	f7fd f906 	bl	80040c0 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d902      	bls.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d13d      	bne.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ede:	d111      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee8:	d004      	beq.n	8006ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef2:	d107      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0c:	d10f      	bne.n	8006f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e017      	b.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d19b      	bne.n	8006ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200004c0 	.word	0x200004c0

08006f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f92:	f7fd f895 	bl	80040c0 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006fa2:	f7fd f88d 	bl	80040c0 <HAL_GetTick>
 8006fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fb0:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	00da      	lsls	r2, r3, #3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	0d1b      	lsrs	r3, r3, #20
 8006fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fc8:	e060      	b.n	800708c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fd0:	d107      	bne.n	8006fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d050      	beq.n	800708c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fea:	f7fd f869 	bl	80040c0 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d902      	bls.n	8007000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d13d      	bne.n	800707c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800700e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007018:	d111      	bne.n	800703e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007022:	d004      	beq.n	800702e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702c:	d107      	bne.n	800703e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007046:	d10f      	bne.n	8007068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e010      	b.n	800709e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	3b01      	subs	r3, #1
 800708a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d196      	bne.n	8006fca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3728      	adds	r7, #40	; 0x28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200004c0 	.word	0x200004c0

080070ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070c0:	d111      	bne.n	80070e6 <SPI_EndRxTransaction+0x3a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ca:	d004      	beq.n	80070d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d4:	d107      	bne.n	80070e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ee:	d112      	bne.n	8007116 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff feb8 	bl	8006e70 <SPI_WaitFlagStateUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d021      	beq.n	800714a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e03d      	b.n	8007192 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007116:	4b21      	ldr	r3, [pc, #132]	; (800719c <SPI_EndRxTransaction+0xf0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <SPI_EndRxTransaction+0xf4>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	0d5b      	lsrs	r3, r3, #21
 8007122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	3b01      	subs	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d0f2      	beq.n	800712c <SPI_EndRxTransaction+0x80>
 8007146:	e000      	b.n	800714a <SPI_EndRxTransaction+0x9e>
        break;
 8007148:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007152:	d11d      	bne.n	8007190 <SPI_EndRxTransaction+0xe4>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800715c:	d004      	beq.n	8007168 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007166:	d113      	bne.n	8007190 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff ff03 	bl	8006f80 <SPI_WaitFifoStateUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e000      	b.n	8007192 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200004c0 	.word	0x200004c0
 80071a0:	165e9f81 	.word	0x165e9f81

080071a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7ff fedf 	bl	8006f80 <SPI_WaitFifoStateUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071cc:	f043 0220 	orr.w	r2, r3, #32
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e046      	b.n	8007266 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071d8:	4b25      	ldr	r3, [pc, #148]	; (8007270 <SPI_EndRxTxTransaction+0xcc>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a25      	ldr	r2, [pc, #148]	; (8007274 <SPI_EndRxTxTransaction+0xd0>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	0d5b      	lsrs	r3, r3, #21
 80071e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071e8:	fb02 f303 	mul.w	r3, r2, r3
 80071ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f6:	d112      	bne.n	800721e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	2180      	movs	r1, #128	; 0x80
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fe34 	bl	8006e70 <SPI_WaitFlagStateUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e023      	b.n	8007266 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	3b01      	subs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d0f2      	beq.n	800721e <SPI_EndRxTxTransaction+0x7a>
 8007238:	e000      	b.n	800723c <SPI_EndRxTxTransaction+0x98>
        break;
 800723a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff fe99 	bl	8006f80 <SPI_WaitFifoStateUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007258:	f043 0220 	orr.w	r2, r3, #32
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e000      	b.n	8007266 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200004c0 	.word	0x200004c0
 8007274:	165e9f81 	.word	0x165e9f81

08007278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e049      	b.n	800731e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fb f8b8 	bl	8002414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f000 f836 	bl	8007328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a40      	ldr	r2, [pc, #256]	; (800743c <TIM_Base_SetConfig+0x114>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007346:	d00f      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a3d      	ldr	r2, [pc, #244]	; (8007440 <TIM_Base_SetConfig+0x118>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00b      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <TIM_Base_SetConfig+0x11c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <TIM_Base_SetConfig+0x120>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3a      	ldr	r2, [pc, #232]	; (800744c <TIM_Base_SetConfig+0x124>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2f      	ldr	r2, [pc, #188]	; (800743c <TIM_Base_SetConfig+0x114>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d02b      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007388:	d027      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a2c      	ldr	r2, [pc, #176]	; (8007440 <TIM_Base_SetConfig+0x118>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d023      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a2b      	ldr	r2, [pc, #172]	; (8007444 <TIM_Base_SetConfig+0x11c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01f      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <TIM_Base_SetConfig+0x120>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01b      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a29      	ldr	r2, [pc, #164]	; (800744c <TIM_Base_SetConfig+0x124>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d017      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a28      	ldr	r2, [pc, #160]	; (8007450 <TIM_Base_SetConfig+0x128>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d013      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a27      	ldr	r2, [pc, #156]	; (8007454 <TIM_Base_SetConfig+0x12c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a26      	ldr	r2, [pc, #152]	; (8007458 <TIM_Base_SetConfig+0x130>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00b      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a25      	ldr	r2, [pc, #148]	; (800745c <TIM_Base_SetConfig+0x134>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d007      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a24      	ldr	r2, [pc, #144]	; (8007460 <TIM_Base_SetConfig+0x138>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d003      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a23      	ldr	r2, [pc, #140]	; (8007464 <TIM_Base_SetConfig+0x13c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d108      	bne.n	80073ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a0a      	ldr	r2, [pc, #40]	; (800743c <TIM_Base_SetConfig+0x114>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_Base_SetConfig+0xf8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a0c      	ldr	r2, [pc, #48]	; (800744c <TIM_Base_SetConfig+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d103      	bne.n	8007428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	615a      	str	r2, [r3, #20]
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40010400 	.word	0x40010400
 8007450:	40014000 	.word	0x40014000
 8007454:	40014400 	.word	0x40014400
 8007458:	40014800 	.word	0x40014800
 800745c:	40001800 	.word	0x40001800
 8007460:	40001c00 	.word	0x40001c00
 8007464:	40002000 	.word	0x40002000

08007468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e040      	b.n	80074fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fb f856 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2224      	movs	r2, #36	; 0x24
 8007494:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc86 	bl	8007db8 <UART_SetConfig>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e022      	b.n	80074fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fede 	bl	8008280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 ff65 	bl	80083c4 <UART_CheckIdleState>
 80074fa:	4603      	mov	r3, r0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007518:	2b20      	cmp	r3, #32
 800751a:	d171      	bne.n	8007600 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_UART_Transmit+0x24>
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e06a      	b.n	8007602 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2221      	movs	r2, #33	; 0x21
 8007538:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753a:	f7fc fdc1 	bl	80040c0 <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Transmit+0x68>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007574:	e02c      	b.n	80075d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 ff6c 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e038      	b.n	8007602 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	3302      	adds	r3, #2
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e007      	b.n	80075be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	3301      	adds	r3, #1
 80075bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1cc      	bne.n	8007576 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	2140      	movs	r1, #64	; 0x40
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 ff39 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e005      	b.n	8007602 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e000      	b.n	8007602 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007600:	2302      	movs	r3, #2
  }
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b08a      	sub	sp, #40	; 0x28
 800760e:	af02      	add	r7, sp, #8
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	603b      	str	r3, [r7, #0]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 80b1 	bne.w	8007788 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_UART_Receive+0x28>
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e0a9      	b.n	800778a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2222      	movs	r2, #34	; 0x22
 8007642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800764c:	f7fc fd38 	bl	80040c0 <HAL_GetTick>
 8007650:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766a:	d10e      	bne.n	800768a <HAL_UART_Receive+0x80>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <HAL_UART_Receive+0x76>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f240 12ff 	movw	r2, #511	; 0x1ff
 800767a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800767e:	e02d      	b.n	80076dc <HAL_UART_Receive+0xd2>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	22ff      	movs	r2, #255	; 0xff
 8007684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007688:	e028      	b.n	80076dc <HAL_UART_Receive+0xd2>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10d      	bne.n	80076ae <HAL_UART_Receive+0xa4>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <HAL_UART_Receive+0x9a>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	22ff      	movs	r2, #255	; 0xff
 800769e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076a2:	e01b      	b.n	80076dc <HAL_UART_Receive+0xd2>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	227f      	movs	r2, #127	; 0x7f
 80076a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076ac:	e016      	b.n	80076dc <HAL_UART_Receive+0xd2>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b6:	d10d      	bne.n	80076d4 <HAL_UART_Receive+0xca>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <HAL_UART_Receive+0xc0>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	227f      	movs	r2, #127	; 0x7f
 80076c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076c8:	e008      	b.n	80076dc <HAL_UART_Receive+0xd2>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	223f      	movs	r2, #63	; 0x3f
 80076ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d2:	e003      	b.n	80076dc <HAL_UART_Receive+0xd2>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ec:	d108      	bne.n	8007700 <HAL_UART_Receive+0xf6>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d104      	bne.n	8007700 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	e003      	b.n	8007708 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007708:	e032      	b.n	8007770 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2200      	movs	r2, #0
 8007712:	2120      	movs	r1, #32
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fea2 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e032      	b.n	800778a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10c      	bne.n	8007744 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	b29a      	uxth	r2, r3
 8007732:	8a7b      	ldrh	r3, [r7, #18]
 8007734:	4013      	ands	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	3302      	adds	r3, #2
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e00c      	b.n	800775e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	b2da      	uxtb	r2, r3
 800774c:	8a7b      	ldrh	r3, [r7, #18]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4013      	ands	r3, r2
 8007752:	b2da      	uxtb	r2, r3
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	3301      	adds	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1c6      	bne.n	800770a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2220      	movs	r2, #32
 8007780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3720      	adds	r7, #32
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b0ba      	sub	sp, #232	; 0xe8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077be:	f640 030f 	movw	r3, #2063	; 0x80f
 80077c2:	4013      	ands	r3, r2
 80077c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d115      	bne.n	80077fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e0:	f003 0320 	and.w	r3, r3, #32
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d009      	beq.n	80077fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 82ac 	beq.w	8007d4a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
      }
      return;
 80077fa:	e2a6      	b.n	8007d4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8117 	beq.w	8007a34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007816:	4b85      	ldr	r3, [pc, #532]	; (8007a2c <HAL_UART_IRQHandler+0x298>)
 8007818:	4013      	ands	r3, r2
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 810a 	beq.w	8007a34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b00      	cmp	r3, #0
 800782a:	d011      	beq.n	8007850 <HAL_UART_IRQHandler+0xbc>
 800782c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2201      	movs	r2, #1
 800783e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007846:	f043 0201 	orr.w	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d011      	beq.n	8007880 <HAL_UART_IRQHandler+0xec>
 800785c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2202      	movs	r2, #2
 800786e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007876:	f043 0204 	orr.w	r2, r3, #4
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d011      	beq.n	80078b0 <HAL_UART_IRQHandler+0x11c>
 800788c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2204      	movs	r2, #4
 800789e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a6:	f043 0202 	orr.w	r2, r3, #2
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d017      	beq.n	80078ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d105      	bne.n	80078d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2208      	movs	r2, #8
 80078da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e2:	f043 0208 	orr.w	r2, r3, #8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d012      	beq.n	800791e <HAL_UART_IRQHandler+0x18a>
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00c      	beq.n	800791e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800790c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007914:	f043 0220 	orr.w	r2, r3, #32
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8212 	beq.w	8007d4e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800792a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d005      	beq.n	8007976 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800796a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800796e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007972:	2b00      	cmp	r3, #0
 8007974:	d04f      	beq.n	8007a16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fe37 	bl	80085ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d141      	bne.n	8007a0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1d9      	bne.n	800798a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d013      	beq.n	8007a06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e2:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <HAL_UART_IRQHandler+0x29c>)
 80079e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fc feb2 	bl	8004754 <HAL_DMA_Abort_IT>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d017      	beq.n	8007a26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	e00f      	b.n	8007a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f9b6 	bl	8007d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	e00b      	b.n	8007a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9b2 	bl	8007d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e007      	b.n	8007a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9ae 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007a24:	e193      	b.n	8007d4e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a26:	bf00      	nop
    return;
 8007a28:	e191      	b.n	8007d4e <HAL_UART_IRQHandler+0x5ba>
 8007a2a:	bf00      	nop
 8007a2c:	04000120 	.word	0x04000120
 8007a30:	080086b3 	.word	0x080086b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	f040 814c 	bne.w	8007cd6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8145 	beq.w	8007cd6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 813e 	beq.w	8007cd6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2210      	movs	r2, #16
 8007a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	f040 80b6 	bne.w	8007bde <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8165 	beq.w	8007d52 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a92:	429a      	cmp	r2, r3
 8007a94:	f080 815d 	bcs.w	8007d52 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aac:	f000 8086 	beq.w	8007bbc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1da      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b0c:	f023 0301 	bic.w	r3, r3, #1
 8007b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e1      	bne.n	8007afa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e3      	bne.n	8007b36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b8c:	f023 0310 	bic.w	r3, r3, #16
 8007b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e4      	bne.n	8007b7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fc fd5c 	bl	8004674 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8d8 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bdc:	e0b9      	b.n	8007d52 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80ab 	beq.w	8007d56 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80a6 	beq.w	8007d56 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e4      	bne.n	8007c0a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c64:	633a      	str	r2, [r7, #48]	; 0x30
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e3      	bne.n	8007c40 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f023 0310 	bic.w	r3, r3, #16
 8007ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	69b9      	ldr	r1, [r7, #24]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e4      	bne.n	8007c8c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f85c 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd4:	e03f      	b.n	8007d56 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <HAL_UART_IRQHandler+0x56c>
 8007ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f853 	bl	8007da4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cfe:	e02d      	b.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00e      	beq.n	8007d2a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01c      	beq.n	8007d5a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
    }
    return;
 8007d28:	e017      	b.n	8007d5a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d012      	beq.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
 8007d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00c      	beq.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fccb 	bl	80086de <UART_EndTransmit_IT>
    return;
 8007d48:	e008      	b.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007d4a:	bf00      	nop
 8007d4c:	e006      	b.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007d4e:	bf00      	nop
 8007d50:	e004      	b.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_UART_IRQHandler+0x5c8>
    return;
 8007d5a:	bf00      	nop
  }

}
 8007d5c:	37e8      	adds	r7, #232	; 0xe8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	4ba6      	ldr	r3, [pc, #664]	; (800807c <UART_SetConfig+0x2c4>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	6979      	ldr	r1, [r7, #20]
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a94      	ldr	r2, [pc, #592]	; (8008080 <UART_SetConfig+0x2c8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d120      	bne.n	8007e76 <UART_SetConfig+0xbe>
 8007e34:	4b93      	ldr	r3, [pc, #588]	; (8008084 <UART_SetConfig+0x2cc>)
 8007e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d816      	bhi.n	8007e70 <UART_SetConfig+0xb8>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <UART_SetConfig+0x90>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e65 	.word	0x08007e65
 8007e50:	08007e5f 	.word	0x08007e5f
 8007e54:	08007e6b 	.word	0x08007e6b
 8007e58:	2301      	movs	r3, #1
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e150      	b.n	8008100 <UART_SetConfig+0x348>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	77fb      	strb	r3, [r7, #31]
 8007e62:	e14d      	b.n	8008100 <UART_SetConfig+0x348>
 8007e64:	2304      	movs	r3, #4
 8007e66:	77fb      	strb	r3, [r7, #31]
 8007e68:	e14a      	b.n	8008100 <UART_SetConfig+0x348>
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	77fb      	strb	r3, [r7, #31]
 8007e6e:	e147      	b.n	8008100 <UART_SetConfig+0x348>
 8007e70:	2310      	movs	r3, #16
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e144      	b.n	8008100 <UART_SetConfig+0x348>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a83      	ldr	r2, [pc, #524]	; (8008088 <UART_SetConfig+0x2d0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d132      	bne.n	8007ee6 <UART_SetConfig+0x12e>
 8007e80:	4b80      	ldr	r3, [pc, #512]	; (8008084 <UART_SetConfig+0x2cc>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	2b0c      	cmp	r3, #12
 8007e8c:	d828      	bhi.n	8007ee0 <UART_SetConfig+0x128>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <UART_SetConfig+0xdc>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ec9 	.word	0x08007ec9
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ee1 	.word	0x08007ee1
 8007ea0:	08007ee1 	.word	0x08007ee1
 8007ea4:	08007ed5 	.word	0x08007ed5
 8007ea8:	08007ee1 	.word	0x08007ee1
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007ecf 	.word	0x08007ecf
 8007eb8:	08007ee1 	.word	0x08007ee1
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee1 	.word	0x08007ee1
 8007ec4:	08007edb 	.word	0x08007edb
 8007ec8:	2300      	movs	r3, #0
 8007eca:	77fb      	strb	r3, [r7, #31]
 8007ecc:	e118      	b.n	8008100 <UART_SetConfig+0x348>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	77fb      	strb	r3, [r7, #31]
 8007ed2:	e115      	b.n	8008100 <UART_SetConfig+0x348>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e112      	b.n	8008100 <UART_SetConfig+0x348>
 8007eda:	2308      	movs	r3, #8
 8007edc:	77fb      	strb	r3, [r7, #31]
 8007ede:	e10f      	b.n	8008100 <UART_SetConfig+0x348>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e10c      	b.n	8008100 <UART_SetConfig+0x348>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a68      	ldr	r2, [pc, #416]	; (800808c <UART_SetConfig+0x2d4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d120      	bne.n	8007f32 <UART_SetConfig+0x17a>
 8007ef0:	4b64      	ldr	r3, [pc, #400]	; (8008084 <UART_SetConfig+0x2cc>)
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007efa:	2b30      	cmp	r3, #48	; 0x30
 8007efc:	d013      	beq.n	8007f26 <UART_SetConfig+0x16e>
 8007efe:	2b30      	cmp	r3, #48	; 0x30
 8007f00:	d814      	bhi.n	8007f2c <UART_SetConfig+0x174>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d009      	beq.n	8007f1a <UART_SetConfig+0x162>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d810      	bhi.n	8007f2c <UART_SetConfig+0x174>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <UART_SetConfig+0x15c>
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d006      	beq.n	8007f20 <UART_SetConfig+0x168>
 8007f12:	e00b      	b.n	8007f2c <UART_SetConfig+0x174>
 8007f14:	2300      	movs	r3, #0
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	e0f2      	b.n	8008100 <UART_SetConfig+0x348>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e0ef      	b.n	8008100 <UART_SetConfig+0x348>
 8007f20:	2304      	movs	r3, #4
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e0ec      	b.n	8008100 <UART_SetConfig+0x348>
 8007f26:	2308      	movs	r3, #8
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e0e9      	b.n	8008100 <UART_SetConfig+0x348>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e0e6      	b.n	8008100 <UART_SetConfig+0x348>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a56      	ldr	r2, [pc, #344]	; (8008090 <UART_SetConfig+0x2d8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d120      	bne.n	8007f7e <UART_SetConfig+0x1c6>
 8007f3c:	4b51      	ldr	r3, [pc, #324]	; (8008084 <UART_SetConfig+0x2cc>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f46:	2bc0      	cmp	r3, #192	; 0xc0
 8007f48:	d013      	beq.n	8007f72 <UART_SetConfig+0x1ba>
 8007f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f4c:	d814      	bhi.n	8007f78 <UART_SetConfig+0x1c0>
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d009      	beq.n	8007f66 <UART_SetConfig+0x1ae>
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d810      	bhi.n	8007f78 <UART_SetConfig+0x1c0>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <UART_SetConfig+0x1a8>
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d006      	beq.n	8007f6c <UART_SetConfig+0x1b4>
 8007f5e:	e00b      	b.n	8007f78 <UART_SetConfig+0x1c0>
 8007f60:	2300      	movs	r3, #0
 8007f62:	77fb      	strb	r3, [r7, #31]
 8007f64:	e0cc      	b.n	8008100 <UART_SetConfig+0x348>
 8007f66:	2302      	movs	r3, #2
 8007f68:	77fb      	strb	r3, [r7, #31]
 8007f6a:	e0c9      	b.n	8008100 <UART_SetConfig+0x348>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	77fb      	strb	r3, [r7, #31]
 8007f70:	e0c6      	b.n	8008100 <UART_SetConfig+0x348>
 8007f72:	2308      	movs	r3, #8
 8007f74:	77fb      	strb	r3, [r7, #31]
 8007f76:	e0c3      	b.n	8008100 <UART_SetConfig+0x348>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	77fb      	strb	r3, [r7, #31]
 8007f7c:	e0c0      	b.n	8008100 <UART_SetConfig+0x348>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a44      	ldr	r2, [pc, #272]	; (8008094 <UART_SetConfig+0x2dc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d125      	bne.n	8007fd4 <UART_SetConfig+0x21c>
 8007f88:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <UART_SetConfig+0x2cc>)
 8007f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f96:	d017      	beq.n	8007fc8 <UART_SetConfig+0x210>
 8007f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f9c:	d817      	bhi.n	8007fce <UART_SetConfig+0x216>
 8007f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa2:	d00b      	beq.n	8007fbc <UART_SetConfig+0x204>
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa8:	d811      	bhi.n	8007fce <UART_SetConfig+0x216>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <UART_SetConfig+0x1fe>
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb2:	d006      	beq.n	8007fc2 <UART_SetConfig+0x20a>
 8007fb4:	e00b      	b.n	8007fce <UART_SetConfig+0x216>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	77fb      	strb	r3, [r7, #31]
 8007fba:	e0a1      	b.n	8008100 <UART_SetConfig+0x348>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	e09e      	b.n	8008100 <UART_SetConfig+0x348>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	77fb      	strb	r3, [r7, #31]
 8007fc6:	e09b      	b.n	8008100 <UART_SetConfig+0x348>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	77fb      	strb	r3, [r7, #31]
 8007fcc:	e098      	b.n	8008100 <UART_SetConfig+0x348>
 8007fce:	2310      	movs	r3, #16
 8007fd0:	77fb      	strb	r3, [r7, #31]
 8007fd2:	e095      	b.n	8008100 <UART_SetConfig+0x348>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2f      	ldr	r2, [pc, #188]	; (8008098 <UART_SetConfig+0x2e0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d125      	bne.n	800802a <UART_SetConfig+0x272>
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <UART_SetConfig+0x2cc>)
 8007fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fec:	d017      	beq.n	800801e <UART_SetConfig+0x266>
 8007fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff2:	d817      	bhi.n	8008024 <UART_SetConfig+0x26c>
 8007ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff8:	d00b      	beq.n	8008012 <UART_SetConfig+0x25a>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffe:	d811      	bhi.n	8008024 <UART_SetConfig+0x26c>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <UART_SetConfig+0x254>
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008008:	d006      	beq.n	8008018 <UART_SetConfig+0x260>
 800800a:	e00b      	b.n	8008024 <UART_SetConfig+0x26c>
 800800c:	2301      	movs	r3, #1
 800800e:	77fb      	strb	r3, [r7, #31]
 8008010:	e076      	b.n	8008100 <UART_SetConfig+0x348>
 8008012:	2302      	movs	r3, #2
 8008014:	77fb      	strb	r3, [r7, #31]
 8008016:	e073      	b.n	8008100 <UART_SetConfig+0x348>
 8008018:	2304      	movs	r3, #4
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e070      	b.n	8008100 <UART_SetConfig+0x348>
 800801e:	2308      	movs	r3, #8
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	e06d      	b.n	8008100 <UART_SetConfig+0x348>
 8008024:	2310      	movs	r3, #16
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e06a      	b.n	8008100 <UART_SetConfig+0x348>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a1b      	ldr	r2, [pc, #108]	; (800809c <UART_SetConfig+0x2e4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d138      	bne.n	80080a6 <UART_SetConfig+0x2ee>
 8008034:	4b13      	ldr	r3, [pc, #76]	; (8008084 <UART_SetConfig+0x2cc>)
 8008036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800803e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008042:	d017      	beq.n	8008074 <UART_SetConfig+0x2bc>
 8008044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008048:	d82a      	bhi.n	80080a0 <UART_SetConfig+0x2e8>
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804e:	d00b      	beq.n	8008068 <UART_SetConfig+0x2b0>
 8008050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008054:	d824      	bhi.n	80080a0 <UART_SetConfig+0x2e8>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <UART_SetConfig+0x2aa>
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d006      	beq.n	800806e <UART_SetConfig+0x2b6>
 8008060:	e01e      	b.n	80080a0 <UART_SetConfig+0x2e8>
 8008062:	2300      	movs	r3, #0
 8008064:	77fb      	strb	r3, [r7, #31]
 8008066:	e04b      	b.n	8008100 <UART_SetConfig+0x348>
 8008068:	2302      	movs	r3, #2
 800806a:	77fb      	strb	r3, [r7, #31]
 800806c:	e048      	b.n	8008100 <UART_SetConfig+0x348>
 800806e:	2304      	movs	r3, #4
 8008070:	77fb      	strb	r3, [r7, #31]
 8008072:	e045      	b.n	8008100 <UART_SetConfig+0x348>
 8008074:	2308      	movs	r3, #8
 8008076:	77fb      	strb	r3, [r7, #31]
 8008078:	e042      	b.n	8008100 <UART_SetConfig+0x348>
 800807a:	bf00      	nop
 800807c:	efff69f3 	.word	0xefff69f3
 8008080:	40011000 	.word	0x40011000
 8008084:	40023800 	.word	0x40023800
 8008088:	40004400 	.word	0x40004400
 800808c:	40004800 	.word	0x40004800
 8008090:	40004c00 	.word	0x40004c00
 8008094:	40005000 	.word	0x40005000
 8008098:	40011400 	.word	0x40011400
 800809c:	40007800 	.word	0x40007800
 80080a0:	2310      	movs	r3, #16
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	e02c      	b.n	8008100 <UART_SetConfig+0x348>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a72      	ldr	r2, [pc, #456]	; (8008274 <UART_SetConfig+0x4bc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d125      	bne.n	80080fc <UART_SetConfig+0x344>
 80080b0:	4b71      	ldr	r3, [pc, #452]	; (8008278 <UART_SetConfig+0x4c0>)
 80080b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080be:	d017      	beq.n	80080f0 <UART_SetConfig+0x338>
 80080c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080c4:	d817      	bhi.n	80080f6 <UART_SetConfig+0x33e>
 80080c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ca:	d00b      	beq.n	80080e4 <UART_SetConfig+0x32c>
 80080cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d0:	d811      	bhi.n	80080f6 <UART_SetConfig+0x33e>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <UART_SetConfig+0x326>
 80080d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080da:	d006      	beq.n	80080ea <UART_SetConfig+0x332>
 80080dc:	e00b      	b.n	80080f6 <UART_SetConfig+0x33e>
 80080de:	2300      	movs	r3, #0
 80080e0:	77fb      	strb	r3, [r7, #31]
 80080e2:	e00d      	b.n	8008100 <UART_SetConfig+0x348>
 80080e4:	2302      	movs	r3, #2
 80080e6:	77fb      	strb	r3, [r7, #31]
 80080e8:	e00a      	b.n	8008100 <UART_SetConfig+0x348>
 80080ea:	2304      	movs	r3, #4
 80080ec:	77fb      	strb	r3, [r7, #31]
 80080ee:	e007      	b.n	8008100 <UART_SetConfig+0x348>
 80080f0:	2308      	movs	r3, #8
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e004      	b.n	8008100 <UART_SetConfig+0x348>
 80080f6:	2310      	movs	r3, #16
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e001      	b.n	8008100 <UART_SetConfig+0x348>
 80080fc:	2310      	movs	r3, #16
 80080fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008108:	d15b      	bne.n	80081c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800810a:	7ffb      	ldrb	r3, [r7, #31]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d828      	bhi.n	8008162 <UART_SetConfig+0x3aa>
 8008110:	a201      	add	r2, pc, #4	; (adr r2, 8008118 <UART_SetConfig+0x360>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	0800813d 	.word	0x0800813d
 800811c:	08008145 	.word	0x08008145
 8008120:	0800814d 	.word	0x0800814d
 8008124:	08008163 	.word	0x08008163
 8008128:	08008153 	.word	0x08008153
 800812c:	08008163 	.word	0x08008163
 8008130:	08008163 	.word	0x08008163
 8008134:	08008163 	.word	0x08008163
 8008138:	0800815b 	.word	0x0800815b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800813c:	f7fd fcec 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8008140:	61b8      	str	r0, [r7, #24]
        break;
 8008142:	e013      	b.n	800816c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008144:	f7fd fcfc 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8008148:	61b8      	str	r0, [r7, #24]
        break;
 800814a:	e00f      	b.n	800816c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800814c:	4b4b      	ldr	r3, [pc, #300]	; (800827c <UART_SetConfig+0x4c4>)
 800814e:	61bb      	str	r3, [r7, #24]
        break;
 8008150:	e00c      	b.n	800816c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008152:	f7fd fbcf 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 8008156:	61b8      	str	r0, [r7, #24]
        break;
 8008158:	e008      	b.n	800816c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800815a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800815e:	61bb      	str	r3, [r7, #24]
        break;
 8008160:	e004      	b.n	800816c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	77bb      	strb	r3, [r7, #30]
        break;
 800816a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d074      	beq.n	800825c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	005a      	lsls	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	441a      	add	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	fbb2 f3f3 	udiv	r3, r2, r3
 8008186:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2b0f      	cmp	r3, #15
 800818c:	d916      	bls.n	80081bc <UART_SetConfig+0x404>
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008194:	d212      	bcs.n	80081bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f023 030f 	bic.w	r3, r3, #15
 800819e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	89fb      	ldrh	r3, [r7, #14]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	89fa      	ldrh	r2, [r7, #14]
 80081b8:	60da      	str	r2, [r3, #12]
 80081ba:	e04f      	b.n	800825c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	77bb      	strb	r3, [r7, #30]
 80081c0:	e04c      	b.n	800825c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081c2:	7ffb      	ldrb	r3, [r7, #31]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d828      	bhi.n	800821a <UART_SetConfig+0x462>
 80081c8:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <UART_SetConfig+0x418>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	08008205 	.word	0x08008205
 80081dc:	0800821b 	.word	0x0800821b
 80081e0:	0800820b 	.word	0x0800820b
 80081e4:	0800821b 	.word	0x0800821b
 80081e8:	0800821b 	.word	0x0800821b
 80081ec:	0800821b 	.word	0x0800821b
 80081f0:	08008213 	.word	0x08008213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fd fc90 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 80081f8:	61b8      	str	r0, [r7, #24]
        break;
 80081fa:	e013      	b.n	8008224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081fc:	f7fd fca0 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8008200:	61b8      	str	r0, [r7, #24]
        break;
 8008202:	e00f      	b.n	8008224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008204:	4b1d      	ldr	r3, [pc, #116]	; (800827c <UART_SetConfig+0x4c4>)
 8008206:	61bb      	str	r3, [r7, #24]
        break;
 8008208:	e00c      	b.n	8008224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800820a:	f7fd fb73 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 800820e:	61b8      	str	r0, [r7, #24]
        break;
 8008210:	e008      	b.n	8008224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008216:	61bb      	str	r3, [r7, #24]
        break;
 8008218:	e004      	b.n	8008224 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	77bb      	strb	r3, [r7, #30]
        break;
 8008222:	bf00      	nop
    }

    if (pclk != 0U)
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	085a      	lsrs	r2, r3, #1
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	441a      	add	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	fbb2 f3f3 	udiv	r3, r2, r3
 800823c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b0f      	cmp	r3, #15
 8008242:	d909      	bls.n	8008258 <UART_SetConfig+0x4a0>
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824a:	d205      	bcs.n	8008258 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	e001      	b.n	800825c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008268:	7fbb      	ldrb	r3, [r7, #30]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40007c00 	.word	0x40007c00
 8008278:	40023800 	.word	0x40023800
 800827c:	00f42400 	.word	0x00f42400

08008280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01a      	beq.n	8008396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800837e:	d10a      	bne.n	8008396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	605a      	str	r2, [r3, #4]
  }
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083d4:	f7fb fe74 	bl	80040c0 <HAL_GetTick>
 80083d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d10e      	bne.n	8008406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f831 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e027      	b.n	8008456 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b04      	cmp	r3, #4
 8008412:	d10e      	bne.n	8008432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f81b 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e011      	b.n	8008456 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b09c      	sub	sp, #112	; 0x70
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800846e:	e0a7      	b.n	80085c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008476:	f000 80a3 	beq.w	80085c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847a:	f7fb fe21 	bl	80040c0 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008486:	429a      	cmp	r2, r3
 8008488:	d302      	bcc.n	8008490 <UART_WaitOnFlagUntilTimeout+0x32>
 800848a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800848c:	2b00      	cmp	r3, #0
 800848e:	d13f      	bne.n	8008510 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800849e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084a4:	667b      	str	r3, [r7, #100]	; 0x64
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e6      	bne.n	8008490 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	663b      	str	r3, [r7, #96]	; 0x60
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80084e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e5      	bne.n	80084c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e068      	b.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d050      	beq.n	80085c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800852c:	d148      	bne.n	80085c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008536:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800854c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
 8008558:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800855c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	613b      	str	r3, [r7, #16]
   return(result);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	66bb      	str	r3, [r7, #104]	; 0x68
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800858a:	623a      	str	r2, [r7, #32]
 800858c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	69f9      	ldr	r1, [r7, #28]
 8008590:	6a3a      	ldr	r2, [r7, #32]
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	61bb      	str	r3, [r7, #24]
   return(result);
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e010      	b.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4013      	ands	r3, r2
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	bf0c      	ite	eq
 80085d0:	2301      	moveq	r3, #1
 80085d2:	2300      	movne	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	429a      	cmp	r2, r3
 80085dc:	f43f af48 	beq.w	8008470 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3770      	adds	r7, #112	; 0x70
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b095      	sub	sp, #84	; 0x54
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008610:	643b      	str	r3, [r7, #64]	; 0x40
 8008612:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3308      	adds	r3, #8
 800862a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	61fb      	str	r3, [r7, #28]
   return(result);
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f023 0301 	bic.w	r3, r3, #1
 800863a:	64bb      	str	r3, [r7, #72]	; 0x48
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800864a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e5      	bne.n	8008624 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	2b01      	cmp	r3, #1
 800865e:	d118      	bne.n	8008692 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	60bb      	str	r3, [r7, #8]
   return(result);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f023 0310 	bic.w	r3, r3, #16
 8008674:	647b      	str	r3, [r7, #68]	; 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6979      	ldr	r1, [r7, #20]
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	613b      	str	r3, [r7, #16]
   return(result);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e6      	bne.n	8008660 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086a6:	bf00      	nop
 80086a8:	3754      	adds	r7, #84	; 0x54
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7ff fb51 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b088      	sub	sp, #32
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086fa:	61fb      	str	r3, [r7, #28]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	61bb      	str	r3, [r7, #24]
 8008706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6979      	ldr	r1, [r7, #20]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	613b      	str	r3, [r7, #16]
   return(result);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e6      	bne.n	80086e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fb1d 	bl	8007d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872a:	bf00      	nop
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	3303      	adds	r3, #3
 8008744:	f023 0303 	bic.w	r3, r3, #3
 8008748:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_1_scratch2_array.data = AI_PTR(activations + 19348);
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	f644 3394 	movw	r3, #19348	; 0x4b94
 8008750:	4413      	add	r3, r2
 8008752:	4a2c      	ldr	r2, [pc, #176]	; (8008804 <network_configure_activations+0xd0>)
 8008754:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch2_array.data_start = AI_PTR(activations + 19348);
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	f644 3394 	movw	r3, #19348	; 0x4b94
 800875c:	4413      	add	r3, r2
 800875e:	4a29      	ldr	r2, [pc, #164]	; (8008804 <network_configure_activations+0xd0>)
 8008760:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(activations + 19348);
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	f644 3394 	movw	r3, #19348	; 0x4b94
 8008768:	4413      	add	r3, r2
 800876a:	4a27      	ldr	r2, [pc, #156]	; (8008808 <network_configure_activations+0xd4>)
 800876c:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(activations + 19348);
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	f644 3394 	movw	r3, #19348	; 0x4b94
 8008774:	4413      	add	r3, r2
 8008776:	4a24      	ldr	r2, [pc, #144]	; (8008808 <network_configure_activations+0xd4>)
 8008778:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(activations + 19200);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 8008780:	4a22      	ldr	r2, [pc, #136]	; (800880c <network_configure_activations+0xd8>)
 8008782:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(activations + 19200);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 800878a:	4a20      	ldr	r2, [pc, #128]	; (800880c <network_configure_activations+0xd8>)
 800878c:	60d3      	str	r3, [r2, #12]
    serving_default_input_20_output_array.data = AI_PTR(NULL);
 800878e:	4b20      	ldr	r3, [pc, #128]	; (8008810 <network_configure_activations+0xdc>)
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
    serving_default_input_20_output_array.data_start = AI_PTR(NULL);
 8008794:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <network_configure_activations+0xdc>)
 8008796:	2200      	movs	r2, #0
 8008798:	60da      	str	r2, [r3, #12]
    conversion_0_output_array.data = AI_PTR(activations + 0);
 800879a:	4a1e      	ldr	r2, [pc, #120]	; (8008814 <network_configure_activations+0xe0>)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(activations + 0);
 80087a0:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <network_configure_activations+0xe0>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 57748);
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	f24e 1394 	movw	r3, #57748	; 0xe194
 80087ac:	4413      	add	r3, r2
 80087ae:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <network_configure_activations+0xe4>)
 80087b0:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 57748);
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f24e 1394 	movw	r3, #57748	; 0xe194
 80087b8:	4413      	add	r3, r2
 80087ba:	4a17      	ldr	r2, [pc, #92]	; (8008818 <network_configure_activations+0xe4>)
 80087bc:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 80087be:	4a17      	ldr	r2, [pc, #92]	; (800881c <network_configure_activations+0xe8>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 80087c4:	4a15      	ldr	r2, [pc, #84]	; (800881c <network_configure_activations+0xe8>)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	60d3      	str	r3, [r2, #12]
    dense_3_fmt_output_array.data = AI_PTR(activations + 4);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4a14      	ldr	r2, [pc, #80]	; (8008820 <network_configure_activations+0xec>)
 80087d0:	6093      	str	r3, [r2, #8]
    dense_3_fmt_output_array.data_start = AI_PTR(activations + 4);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4a12      	ldr	r2, [pc, #72]	; (8008820 <network_configure_activations+0xec>)
 80087d8:	60d3      	str	r3, [r2, #12]
    nl_4_output_array.data = AI_PTR(activations + 12);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	330c      	adds	r3, #12
 80087de:	4a11      	ldr	r2, [pc, #68]	; (8008824 <network_configure_activations+0xf0>)
 80087e0:	6093      	str	r3, [r2, #8]
    nl_4_output_array.data_start = AI_PTR(activations + 12);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	330c      	adds	r3, #12
 80087e6:	4a0f      	ldr	r2, [pc, #60]	; (8008824 <network_configure_activations+0xf0>)
 80087e8:	60d3      	str	r3, [r2, #12]
    nl_4_fmt_output_array.data = AI_PTR(NULL);
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <network_configure_activations+0xf4>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	609a      	str	r2, [r3, #8]
    nl_4_fmt_output_array.data_start = AI_PTR(NULL);
 80087f0:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <network_configure_activations+0xf4>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80087f6:	2301      	movs	r3, #1
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	2000052c 	.word	0x2000052c
 8008808:	2000053c 	.word	0x2000053c
 800880c:	2000054c 	.word	0x2000054c
 8008810:	2000059c 	.word	0x2000059c
 8008814:	200005ac 	.word	0x200005ac
 8008818:	200005bc 	.word	0x200005bc
 800881c:	200005cc 	.word	0x200005cc
 8008820:	200005dc 	.word	0x200005dc
 8008824:	200005ec 	.word	0x200005ec
 8008828:	200005fc 	.word	0x200005fc

0800882c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800883c:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <network_configure_weights+0x8c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008844:	4a1c      	ldr	r2, [pc, #112]	; (80088b8 <network_configure_weights+0x8c>)
 8008846:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 120);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3378      	adds	r3, #120	; 0x78
 800884c:	4a1a      	ldr	r2, [pc, #104]	; (80088b8 <network_configure_weights+0x8c>)
 800884e:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 120);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3378      	adds	r3, #120	; 0x78
 8008854:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <network_configure_weights+0x8c>)
 8008856:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8008858:	4b18      	ldr	r3, [pc, #96]	; (80088bc <network_configure_weights+0x90>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008860:	4a16      	ldr	r2, [pc, #88]	; (80088bc <network_configure_weights+0x90>)
 8008862:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 104);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3368      	adds	r3, #104	; 0x68
 8008868:	4a14      	ldr	r2, [pc, #80]	; (80088bc <network_configure_weights+0x90>)
 800886a:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 104);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3368      	adds	r3, #104	; 0x68
 8008870:	4a12      	ldr	r2, [pc, #72]	; (80088bc <network_configure_weights+0x90>)
 8008872:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008874:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <network_configure_weights+0x94>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800887c:	4a10      	ldr	r2, [pc, #64]	; (80088c0 <network_configure_weights+0x94>)
 800887e:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 72);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3348      	adds	r3, #72	; 0x48
 8008884:	4a0e      	ldr	r2, [pc, #56]	; (80088c0 <network_configure_weights+0x94>)
 8008886:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 72);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3348      	adds	r3, #72	; 0x48
 800888c:	4a0c      	ldr	r2, [pc, #48]	; (80088c0 <network_configure_weights+0x94>)
 800888e:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008890:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <network_configure_weights+0x98>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008898:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <network_configure_weights+0x98>)
 800889a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 800889c:	4a09      	ldr	r2, [pc, #36]	; (80088c4 <network_configure_weights+0x98>)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 80088a2:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <network_configure_weights+0x98>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80088a8:	2301      	movs	r3, #1
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	2000055c 	.word	0x2000055c
 80088bc:	2000056c 	.word	0x2000056c
 80088c0:	2000057c 	.word	0x2000057c
 80088c4:	2000058c 	.word	0x2000058c

080088c8 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80088d2:	2300      	movs	r3, #0
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	2303      	movs	r3, #3
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	2301      	movs	r3, #1
 80088dc:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <ai_network_create+0x28>)
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f979 	bl	8008bd8 <ai_platform_network_create>
 80088e6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200004cc 	.word	0x200004cc

080088f4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f9ed 	bl	8008ce0 <ai_platform_network_init>
 8008906:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <ai_network_init+0x1e>
 800890e:	2300      	movs	r3, #0
 8008910:	e02b      	b.n	800896a <ai_network_init+0x76>

  ai_bool ok = true;
 8008912:	2301      	movs	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	4619      	mov	r1, r3
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff ff86 	bl	800882c <network_configure_weights>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	3318      	adds	r3, #24
 8008936:	4619      	mov	r1, r3
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fefb 	bl	8008734 <network_configure_activations>
 800893e:	4603      	mov	r3, r0
 8008940:	461a      	mov	r2, r3
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	4013      	ands	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	bf14      	ite	ne
 800894a:	2301      	movne	r3, #1
 800894c:	2300      	moveq	r3, #0
 800894e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 faad 	bl	8008eb0 <ai_platform_network_post_init>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	4013      	ands	r3, r2
 800895e:	2b00      	cmp	r3, #0
 8008960:	bf14      	ite	ne
 8008962:	2301      	movne	r3, #1
 8008964:	2300      	moveq	r3, #0
 8008966:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008968:	7afb      	ldrb	r3, [r7, #11]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0
    0x88, 0x7c, 0x00, 0x00, 0x2c, 0x1c, 0x94, 0x81, 0x5f, 0x1a,
    0x9a, 0x8d, 0xc3, 0x1a, 0x49, 0x6e, 0xea, 0x8b, 0x51,
    0x63, 0x7a, 0xf8, 0xff, 0xff, 0x86, 0x07, 0x00, 0x00
  };

  return AI_HANDLE_PTR(s_network_weights);
 8008978:	4b02      	ldr	r3, [pc, #8]	; (8008984 <ai_network_data_weights_get+0x10>)

}
 800897a:	4618      	mov	r0, r3
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	08012434 	.word	0x08012434

08008988 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	3303      	adds	r3, #3
 8008998:	f023 0303 	bic.w	r3, r3, #3
 800899c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    dense_input_output_array.data = AI_PTR(NULL);
 800899e:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <sine_model_configure_activations+0x70>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	609a      	str	r2, [r3, #8]
    dense_input_output_array.data_start = AI_PTR(NULL);
 80089a4:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <sine_model_configure_activations+0x70>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 80089aa:	4a14      	ldr	r2, [pc, #80]	; (80089fc <sine_model_configure_activations+0x74>)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 80089b0:	4a12      	ldr	r2, [pc, #72]	; (80089fc <sine_model_configure_activations+0x74>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 80089b6:	4a12      	ldr	r2, [pc, #72]	; (8008a00 <sine_model_configure_activations+0x78>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 80089bc:	4a10      	ldr	r2, [pc, #64]	; (8008a00 <sine_model_configure_activations+0x78>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3340      	adds	r3, #64	; 0x40
 80089c6:	4a0f      	ldr	r2, [pc, #60]	; (8008a04 <sine_model_configure_activations+0x7c>)
 80089c8:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3340      	adds	r3, #64	; 0x40
 80089ce:	4a0d      	ldr	r2, [pc, #52]	; (8008a04 <sine_model_configure_activations+0x7c>)
 80089d0:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 80089d2:	4a0d      	ldr	r2, [pc, #52]	; (8008a08 <sine_model_configure_activations+0x80>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 80089d8:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <sine_model_configure_activations+0x80>)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <sine_model_configure_activations+0x84>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 80089e4:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <sine_model_configure_activations+0x84>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80089ea:	2301      	movs	r3, #1
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	20000cac 	.word	0x20000cac
 80089fc:	20000cbc 	.word	0x20000cbc
 8008a00:	20000ccc 	.word	0x20000ccc
 8008a04:	20000cdc 	.word	0x20000cdc
 8008a08:	20000cec 	.word	0x20000cec
 8008a0c:	20000cfc 	.word	0x20000cfc

08008a10 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a20:	4b2f      	ldr	r3, [pc, #188]	; (8008ae0 <sine_model_configure_weights+0xd0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a28:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <sine_model_configure_weights+0xd0>)
 8008a2a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a32:	4a2b      	ldr	r2, [pc, #172]	; (8008ae0 <sine_model_configure_weights+0xd0>)
 8008a34:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3c:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <sine_model_configure_weights+0xd0>)
 8008a3e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a40:	4b28      	ldr	r3, [pc, #160]	; (8008ae4 <sine_model_configure_weights+0xd4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	4a26      	ldr	r2, [pc, #152]	; (8008ae4 <sine_model_configure_weights+0xd4>)
 8008a4a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008a52:	4a24      	ldr	r2, [pc, #144]	; (8008ae4 <sine_model_configure_weights+0xd4>)
 8008a54:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008a5c:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <sine_model_configure_weights+0xd4>)
 8008a5e:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a60:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <sine_model_configure_weights+0xd8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a68:	4a1f      	ldr	r2, [pc, #124]	; (8008ae8 <sine_model_configure_weights+0xd8>)
 8008a6a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008a72:	4a1d      	ldr	r2, [pc, #116]	; (8008ae8 <sine_model_configure_weights+0xd8>)
 8008a74:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008a7c:	4a1a      	ldr	r2, [pc, #104]	; (8008ae8 <sine_model_configure_weights+0xd8>)
 8008a7e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008a80:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <sine_model_configure_weights+0xdc>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a88:	4a18      	ldr	r2, [pc, #96]	; (8008aec <sine_model_configure_weights+0xdc>)
 8008a8a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3380      	adds	r3, #128	; 0x80
 8008a90:	4a16      	ldr	r2, [pc, #88]	; (8008aec <sine_model_configure_weights+0xdc>)
 8008a92:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3380      	adds	r3, #128	; 0x80
 8008a98:	4a14      	ldr	r2, [pc, #80]	; (8008aec <sine_model_configure_weights+0xdc>)
 8008a9a:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8008a9c:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <sine_model_configure_weights+0xe0>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aa4:	4a12      	ldr	r2, [pc, #72]	; (8008af0 <sine_model_configure_weights+0xe0>)
 8008aa6:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3340      	adds	r3, #64	; 0x40
 8008aac:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <sine_model_configure_weights+0xe0>)
 8008aae:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3340      	adds	r3, #64	; 0x40
 8008ab4:	4a0e      	ldr	r2, [pc, #56]	; (8008af0 <sine_model_configure_weights+0xe0>)
 8008ab6:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8008ab8:	4b0e      	ldr	r3, [pc, #56]	; (8008af4 <sine_model_configure_weights+0xe4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac0:	4a0c      	ldr	r2, [pc, #48]	; (8008af4 <sine_model_configure_weights+0xe4>)
 8008ac2:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8008ac4:	4a0b      	ldr	r2, [pc, #44]	; (8008af4 <sine_model_configure_weights+0xe4>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8008aca:	4a0a      	ldr	r2, [pc, #40]	; (8008af4 <sine_model_configure_weights+0xe4>)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8008ad0:	2301      	movs	r3, #1
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000c4c 	.word	0x20000c4c
 8008ae4:	20000c5c 	.word	0x20000c5c
 8008ae8:	20000c6c 	.word	0x20000c6c
 8008aec:	20000c7c 	.word	0x20000c7c
 8008af0:	20000c8c 	.word	0x20000c8c
 8008af4:	20000c9c 	.word	0x20000c9c

08008af8 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008b02:	2300      	movs	r3, #0
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	2303      	movs	r3, #3
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4a04      	ldr	r2, [pc, #16]	; (8008b20 <ai_sine_model_create+0x28>)
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f861 	bl	8008bd8 <ai_platform_network_create>
 8008b16:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000bec 	.word	0x20000bec

08008b24 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f8d5 	bl	8008ce0 <ai_platform_network_init>
 8008b36:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <ai_sine_model_init+0x1e>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e02b      	b.n	8008b9a <ai_sine_model_init+0x76>

  ai_bool ok = true;
 8008b42:	2301      	movs	r3, #1
 8008b44:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff ff60 	bl	8008a10 <sine_model_configure_weights>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	3318      	adds	r3, #24
 8008b66:	4619      	mov	r1, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff ff0d 	bl	8008988 <sine_model_configure_activations>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	461a      	mov	r2, r3
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	4013      	ands	r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bf14      	ite	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	2300      	moveq	r3, #0
 8008b7e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f995 	bl	8008eb0 <ai_platform_network_post_init>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bf14      	ite	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	2300      	moveq	r3, #0
 8008b96:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008b98:	7afb      	ldrb	r3, [r7, #11]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	68b9      	ldr	r1, [r7, #8]
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fa28 	bl	8009008 <ai_platform_network_process>
 8008bb8:	4603      	mov	r3, r0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
    0x26, 0x17, 0xbf, 0x41, 0xc1, 0x76, 0xbf, 0x07, 0x51,
    0x3c, 0xbf, 0x71, 0xca, 0x3c, 0xbf, 0x45, 0x8f, 0xf4,
    0x3e, 0xa4, 0xc5, 0xd3, 0x3e, 0x18, 0x93, 0x0c, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <ai_sine_model_data_weights_get+0x10>)

}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	080124dc 	.word	0x080124dc

08008bd8 <ai_platform_network_create>:
 8008bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bda:	4d36      	ldr	r5, [pc, #216]	; (8008cb4 <ai_platform_network_create+0xdc>)
 8008bdc:	b083      	sub	sp, #12
 8008bde:	4e36      	ldr	r6, [pc, #216]	; (8008cb8 <ai_platform_network_create+0xe0>)
 8008be0:	6829      	ldr	r1, [r5, #0]
 8008be2:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8008be6:	f021 0101 	bic.w	r1, r1, #1
 8008bea:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8008bee:	6029      	str	r1, [r5, #0]
 8008bf0:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8008bf4:	6831      	ldr	r1, [r6, #0]
 8008bf6:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8008bfa:	194d      	adds	r5, r1, r5
 8008bfc:	2d01      	cmp	r5, #1
 8008bfe:	d92f      	bls.n	8008c60 <ai_platform_network_create+0x88>
 8008c00:	f240 4549 	movw	r5, #1097	; 0x449
 8008c04:	42a9      	cmp	r1, r5
 8008c06:	d02b      	beq.n	8008c60 <ai_platform_network_create+0x88>
 8008c08:	492c      	ldr	r1, [pc, #176]	; (8008cbc <ai_platform_network_create+0xe4>)
 8008c0a:	6809      	ldr	r1, [r1, #0]
 8008c0c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8008c10:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8008c14:	d015      	beq.n	8008c42 <ai_platform_network_create+0x6a>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d031      	beq.n	8008c7e <ai_platform_network_create+0xa6>
 8008c1a:	461e      	mov	r6, r3
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	4a28      	ldr	r2, [pc, #160]	; (8008cc0 <ai_platform_network_create+0xe8>)
 8008c20:	4605      	mov	r5, r0
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	6003      	str	r3, [r0, #0]
 8008c26:	f001 f801 	bl	8009c2c <core_init>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d02b      	beq.n	8008c86 <ai_platform_network_create+0xae>
 8008c2e:	0223      	lsls	r3, r4, #8
 8008c30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c34:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8008c38:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8008c3c:	d92e      	bls.n	8008c9c <ai_platform_network_create+0xc4>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e022      	b.n	8008c88 <ai_platform_network_create+0xb0>
 8008c42:	4920      	ldr	r1, [pc, #128]	; (8008cc4 <ai_platform_network_create+0xec>)
 8008c44:	2501      	movs	r5, #1
 8008c46:	460e      	mov	r6, r1
 8008c48:	600d      	str	r5, [r1, #0]
 8008c4a:	6831      	ldr	r1, [r6, #0]
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	d1fc      	bne.n	8008c4a <ai_platform_network_create+0x72>
 8008c50:	491d      	ldr	r1, [pc, #116]	; (8008cc8 <ai_platform_network_create+0xf0>)
 8008c52:	4e1e      	ldr	r6, [pc, #120]	; (8008ccc <ai_platform_network_create+0xf4>)
 8008c54:	4d1e      	ldr	r5, [pc, #120]	; (8008cd0 <ai_platform_network_create+0xf8>)
 8008c56:	600e      	str	r6, [r1, #0]
 8008c58:	6809      	ldr	r1, [r1, #0]
 8008c5a:	42a9      	cmp	r1, r5
 8008c5c:	d0db      	beq.n	8008c16 <ai_platform_network_create+0x3e>
 8008c5e:	e7fe      	b.n	8008c5e <ai_platform_network_create+0x86>
 8008c60:	491c      	ldr	r1, [pc, #112]	; (8008cd4 <ai_platform_network_create+0xfc>)
 8008c62:	2501      	movs	r5, #1
 8008c64:	460e      	mov	r6, r1
 8008c66:	600d      	str	r5, [r1, #0]
 8008c68:	6831      	ldr	r1, [r6, #0]
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	d1fc      	bne.n	8008c68 <ai_platform_network_create+0x90>
 8008c6e:	491a      	ldr	r1, [pc, #104]	; (8008cd8 <ai_platform_network_create+0x100>)
 8008c70:	4e16      	ldr	r6, [pc, #88]	; (8008ccc <ai_platform_network_create+0xf4>)
 8008c72:	4d17      	ldr	r5, [pc, #92]	; (8008cd0 <ai_platform_network_create+0xf8>)
 8008c74:	600e      	str	r6, [r1, #0]
 8008c76:	6809      	ldr	r1, [r1, #0]
 8008c78:	42a9      	cmp	r1, r5
 8008c7a:	d0cc      	beq.n	8008c16 <ai_platform_network_create+0x3e>
 8008c7c:	e7fe      	b.n	8008c7c <ai_platform_network_create+0xa4>
 8008c7e:	f241 0010 	movw	r0, #4112	; 0x1010
 8008c82:	b003      	add	sp, #12
 8008c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c86:	2330      	movs	r3, #48	; 0x30
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2210      	movs	r2, #16
 8008c8c:	6029      	str	r1, [r5, #0]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f363 0007 	bfi	r0, r3, #0, #8
 8008c94:	f362 201f 	bfi	r0, r2, #8, #24
 8008c98:	b003      	add	sp, #12
 8008c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <ai_platform_network_create+0x104>)
 8008c9e:	a802      	add	r0, sp, #8
 8008ca0:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008ca4:	f002 fafa 	bl	800b29c <ai_check_custom_types>
 8008ca8:	b110      	cbz	r0, 8008cb0 <ai_platform_network_create+0xd8>
 8008caa:	2200      	movs	r2, #0
 8008cac:	4613      	mov	r3, r2
 8008cae:	e7ee      	b.n	8008c8e <ai_platform_network_create+0xb6>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e7e9      	b.n	8008c88 <ai_platform_network_create+0xb0>
 8008cb4:	e0002000 	.word	0xe0002000
 8008cb8:	e0042000 	.word	0xe0042000
 8008cbc:	5c001000 	.word	0x5c001000
 8008cc0:	a1c00100 	.word	0xa1c00100
 8008cc4:	58024c08 	.word	0x58024c08
 8008cc8:	58024c00 	.word	0x58024c00
 8008ccc:	f407a5c2 	.word	0xf407a5c2
 8008cd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8008cd4:	40023008 	.word	0x40023008
 8008cd8:	40023000 	.word	0x40023000
 8008cdc:	84048403 	.word	0x84048403

08008ce0 <ai_platform_network_init>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d05e      	beq.n	8008da4 <ai_platform_network_init+0xc4>
 8008ce6:	4b68      	ldr	r3, [pc, #416]	; (8008e88 <ai_platform_network_init+0x1a8>)
 8008ce8:	6802      	ldr	r2, [r0, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d15a      	bne.n	8008da4 <ai_platform_network_init+0xc4>
 8008cee:	4a67      	ldr	r2, [pc, #412]	; (8008e8c <ai_platform_network_init+0x1ac>)
 8008cf0:	4c67      	ldr	r4, [pc, #412]	; (8008e90 <ai_platform_network_init+0x1b0>)
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	f023 0301 	bic.w	r3, r3, #1
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d04:	189a      	adds	r2, r3, r2
 8008d06:	2a01      	cmp	r2, #1
 8008d08:	d93d      	bls.n	8008d86 <ai_platform_network_init+0xa6>
 8008d0a:	f240 4249 	movw	r2, #1097	; 0x449
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d039      	beq.n	8008d86 <ai_platform_network_init+0xa6>
 8008d12:	4b60      	ldr	r3, [pc, #384]	; (8008e94 <ai_platform_network_init+0x1b4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008d1e:	d06b      	beq.n	8008df8 <ai_platform_network_init+0x118>
 8008d20:	4605      	mov	r5, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	2900      	cmp	r1, #0
 8008d26:	f000 80a8 	beq.w	8008e7a <ai_platform_network_init+0x19a>
 8008d2a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8008d2c:	690e      	ldr	r6, [r1, #16]
 8008d2e:	2f00      	cmp	r7, #0
 8008d30:	f000 8092 	beq.w	8008e58 <ai_platform_network_init+0x178>
 8008d34:	2e00      	cmp	r6, #0
 8008d36:	d07d      	beq.n	8008e34 <ai_platform_network_init+0x154>
 8008d38:	f104 0718 	add.w	r7, r4, #24
 8008d3c:	f105 0c18 	add.w	ip, r5, #24
 8008d40:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8008d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008d4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d4e:	2403      	movs	r4, #3
 8008d50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8008d54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008d56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008d58:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008d5c:	e886 0003 	stmia.w	r6, {r0, r1}
 8008d60:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008d62:	60ec      	str	r4, [r5, #12]
 8008d64:	b16a      	cbz	r2, 8008d82 <ai_platform_network_init+0xa2>
 8008d66:	68d3      	ldr	r3, [r2, #12]
 8008d68:	6095      	str	r5, [r2, #8]
 8008d6a:	b153      	cbz	r3, 8008d82 <ai_platform_network_init+0xa2>
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d104      	bne.n	8008d7a <ai_platform_network_init+0x9a>
 8008d70:	e007      	b.n	8008d82 <ai_platform_network_init+0xa2>
 8008d72:	429a      	cmp	r2, r3
 8008d74:	4613      	mov	r3, r2
 8008d76:	d004      	beq.n	8008d82 <ai_platform_network_init+0xa2>
 8008d78:	b11a      	cbz	r2, 8008d82 <ai_platform_network_init+0xa2>
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	609d      	str	r5, [r3, #8]
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	d1f7      	bne.n	8008d72 <ai_platform_network_init+0x92>
 8008d82:	4628      	mov	r0, r5
 8008d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d86:	4b44      	ldr	r3, [pc, #272]	; (8008e98 <ai_platform_network_init+0x1b8>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	461c      	mov	r4, r3
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1fc      	bne.n	8008d8e <ai_platform_network_init+0xae>
 8008d94:	4b41      	ldr	r3, [pc, #260]	; (8008e9c <ai_platform_network_init+0x1bc>)
 8008d96:	4c42      	ldr	r4, [pc, #264]	; (8008ea0 <ai_platform_network_init+0x1c0>)
 8008d98:	4a42      	ldr	r2, [pc, #264]	; (8008ea4 <ai_platform_network_init+0x1c4>)
 8008d9a:	601c      	str	r4, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d0be      	beq.n	8008d20 <ai_platform_network_init+0x40>
 8008da2:	e7fe      	b.n	8008da2 <ai_platform_network_init+0xc2>
 8008da4:	4a39      	ldr	r2, [pc, #228]	; (8008e8c <ai_platform_network_init+0x1ac>)
 8008da6:	493a      	ldr	r1, [pc, #232]	; (8008e90 <ai_platform_network_init+0x1b0>)
 8008da8:	6813      	ldr	r3, [r2, #0]
 8008daa:	f023 0301 	bic.w	r3, r3, #1
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	680b      	ldr	r3, [r1, #0]
 8008db2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dba:	185a      	adds	r2, r3, r1
 8008dbc:	2a01      	cmp	r2, #1
 8008dbe:	d90c      	bls.n	8008dda <ai_platform_network_init+0xfa>
 8008dc0:	f240 4249 	movw	r2, #1097	; 0x449
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d008      	beq.n	8008dda <ai_platform_network_init+0xfa>
 8008dc8:	4b32      	ldr	r3, [pc, #200]	; (8008e94 <ai_platform_network_init+0x1b4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008dd4:	d01f      	beq.n	8008e16 <ai_platform_network_init+0x136>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dda:	4b2f      	ldr	r3, [pc, #188]	; (8008e98 <ai_platform_network_init+0x1b8>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4619      	mov	r1, r3
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	680b      	ldr	r3, [r1, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1fc      	bne.n	8008de2 <ai_platform_network_init+0x102>
 8008de8:	4b2c      	ldr	r3, [pc, #176]	; (8008e9c <ai_platform_network_init+0x1bc>)
 8008dea:	492d      	ldr	r1, [pc, #180]	; (8008ea0 <ai_platform_network_init+0x1c0>)
 8008dec:	4a2d      	ldr	r2, [pc, #180]	; (8008ea4 <ai_platform_network_init+0x1c4>)
 8008dee:	6019      	str	r1, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d0ef      	beq.n	8008dd6 <ai_platform_network_init+0xf6>
 8008df6:	e7fe      	b.n	8008df6 <ai_platform_network_init+0x116>
 8008df8:	4b2b      	ldr	r3, [pc, #172]	; (8008ea8 <ai_platform_network_init+0x1c8>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	461c      	mov	r4, r3
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1fc      	bne.n	8008e00 <ai_platform_network_init+0x120>
 8008e06:	4b29      	ldr	r3, [pc, #164]	; (8008eac <ai_platform_network_init+0x1cc>)
 8008e08:	4c25      	ldr	r4, [pc, #148]	; (8008ea0 <ai_platform_network_init+0x1c0>)
 8008e0a:	4a26      	ldr	r2, [pc, #152]	; (8008ea4 <ai_platform_network_init+0x1c4>)
 8008e0c:	601c      	str	r4, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d085      	beq.n	8008d20 <ai_platform_network_init+0x40>
 8008e14:	e7fe      	b.n	8008e14 <ai_platform_network_init+0x134>
 8008e16:	4b24      	ldr	r3, [pc, #144]	; (8008ea8 <ai_platform_network_init+0x1c8>)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	680b      	ldr	r3, [r1, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1fc      	bne.n	8008e1e <ai_platform_network_init+0x13e>
 8008e24:	4b21      	ldr	r3, [pc, #132]	; (8008eac <ai_platform_network_init+0x1cc>)
 8008e26:	491e      	ldr	r1, [pc, #120]	; (8008ea0 <ai_platform_network_init+0x1c0>)
 8008e28:	4a1e      	ldr	r2, [pc, #120]	; (8008ea4 <ai_platform_network_init+0x1c4>)
 8008e2a:	6019      	str	r1, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d0d1      	beq.n	8008dd6 <ai_platform_network_init+0xf6>
 8008e32:	e7fe      	b.n	8008e32 <ai_platform_network_init+0x152>
 8008e34:	8921      	ldrh	r1, [r4, #8]
 8008e36:	88e2      	ldrh	r2, [r4, #6]
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	fb02 f201 	mul.w	r2, r2, r1
 8008e3e:	fb03 f302 	mul.w	r3, r3, r2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f af78 	beq.w	8008d38 <ai_platform_network_init+0x58>
 8008e48:	f105 0010 	add.w	r0, r5, #16
 8008e4c:	2212      	movs	r2, #18
 8008e4e:	2110      	movs	r1, #16
 8008e50:	f000 feee 	bl	8009c30 <core_set_error>
 8008e54:	4630      	mov	r0, r6
 8008e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e58:	8c09      	ldrh	r1, [r1, #32]
 8008e5a:	8be2      	ldrh	r2, [r4, #30]
 8008e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5e:	fb02 f201 	mul.w	r2, r2, r1
 8008e62:	fb03 f302 	mul.w	r3, r3, r2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f43f af64 	beq.w	8008d34 <ai_platform_network_init+0x54>
 8008e6c:	2213      	movs	r2, #19
 8008e6e:	2110      	movs	r1, #16
 8008e70:	3010      	adds	r0, #16
 8008e72:	f000 fedd 	bl	8009c30 <core_set_error>
 8008e76:	4638      	mov	r0, r7
 8008e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7a:	2211      	movs	r2, #17
 8008e7c:	2110      	movs	r1, #16
 8008e7e:	3010      	adds	r0, #16
 8008e80:	f000 fed6 	bl	8009c30 <core_set_error>
 8008e84:	4620      	mov	r0, r4
 8008e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e88:	a1c00100 	.word	0xa1c00100
 8008e8c:	e0002000 	.word	0xe0002000
 8008e90:	e0042000 	.word	0xe0042000
 8008e94:	5c001000 	.word	0x5c001000
 8008e98:	40023008 	.word	0x40023008
 8008e9c:	40023000 	.word	0x40023000
 8008ea0:	f407a5c2 	.word	0xf407a5c2
 8008ea4:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ea8:	58024c08 	.word	0x58024c08
 8008eac:	58024c00 	.word	0x58024c00

08008eb0 <ai_platform_network_post_init>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	b118      	cbz	r0, 8008ebc <ai_platform_network_post_init+0xc>
 8008eb4:	4b4a      	ldr	r3, [pc, #296]	; (8008fe0 <ai_platform_network_post_init+0x130>)
 8008eb6:	6802      	ldr	r2, [r0, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d029      	beq.n	8008f10 <ai_platform_network_post_init+0x60>
 8008ebc:	4a49      	ldr	r2, [pc, #292]	; (8008fe4 <ai_platform_network_post_init+0x134>)
 8008ebe:	494a      	ldr	r1, [pc, #296]	; (8008fe8 <ai_platform_network_post_init+0x138>)
 8008ec0:	6813      	ldr	r3, [r2, #0]
 8008ec2:	f023 0301 	bic.w	r3, r3, #1
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	680b      	ldr	r3, [r1, #0]
 8008eca:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ed2:	185a      	adds	r2, r3, r1
 8008ed4:	2a01      	cmp	r2, #1
 8008ed6:	d90c      	bls.n	8008ef2 <ai_platform_network_post_init+0x42>
 8008ed8:	f240 4249 	movw	r2, #1097	; 0x449
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d008      	beq.n	8008ef2 <ai_platform_network_post_init+0x42>
 8008ee0:	4b42      	ldr	r3, [pc, #264]	; (8008fec <ai_platform_network_post_init+0x13c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ee8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008eec:	d044      	beq.n	8008f78 <ai_platform_network_post_init+0xc8>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
 8008ef2:	4b3f      	ldr	r3, [pc, #252]	; (8008ff0 <ai_platform_network_post_init+0x140>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	680b      	ldr	r3, [r1, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1fc      	bne.n	8008efa <ai_platform_network_post_init+0x4a>
 8008f00:	4b3c      	ldr	r3, [pc, #240]	; (8008ff4 <ai_platform_network_post_init+0x144>)
 8008f02:	493d      	ldr	r1, [pc, #244]	; (8008ff8 <ai_platform_network_post_init+0x148>)
 8008f04:	4a3d      	ldr	r2, [pc, #244]	; (8008ffc <ai_platform_network_post_init+0x14c>)
 8008f06:	6019      	str	r1, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d0ef      	beq.n	8008eee <ai_platform_network_post_init+0x3e>
 8008f0e:	e7fe      	b.n	8008f0e <ai_platform_network_post_init+0x5e>
 8008f10:	4a34      	ldr	r2, [pc, #208]	; (8008fe4 <ai_platform_network_post_init+0x134>)
 8008f12:	4935      	ldr	r1, [pc, #212]	; (8008fe8 <ai_platform_network_post_init+0x138>)
 8008f14:	6813      	ldr	r3, [r2, #0]
 8008f16:	f023 0301 	bic.w	r3, r3, #1
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008f20:	680b      	ldr	r3, [r1, #0]
 8008f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f26:	189a      	adds	r2, r3, r2
 8008f28:	2a01      	cmp	r2, #1
 8008f2a:	d94a      	bls.n	8008fc2 <ai_platform_network_post_init+0x112>
 8008f2c:	f240 4249 	movw	r2, #1097	; 0x449
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d046      	beq.n	8008fc2 <ai_platform_network_post_init+0x112>
 8008f34:	4b2d      	ldr	r3, [pc, #180]	; (8008fec <ai_platform_network_post_init+0x13c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f3c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008f40:	d030      	beq.n	8008fa4 <ai_platform_network_post_init+0xf4>
 8008f42:	68c3      	ldr	r3, [r0, #12]
 8008f44:	4604      	mov	r4, r0
 8008f46:	f013 0502 	ands.w	r5, r3, #2
 8008f4a:	d024      	beq.n	8008f96 <ai_platform_network_post_init+0xe6>
 8008f4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008f4e:	b18b      	cbz	r3, 8008f74 <ai_platform_network_post_init+0xc4>
 8008f50:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8008f52:	b90d      	cbnz	r5, 8008f58 <ai_platform_network_post_init+0xa8>
 8008f54:	e00e      	b.n	8008f74 <ai_platform_network_post_init+0xc4>
 8008f56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4798      	blx	r3
 8008f60:	68ea      	ldr	r2, [r5, #12]
 8008f62:	1b53      	subs	r3, r2, r5
 8008f64:	4615      	mov	r5, r2
 8008f66:	bf18      	it	ne
 8008f68:	2301      	movne	r3, #1
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	bf08      	it	eq
 8008f6e:	2300      	moveq	r3, #0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1f0      	bne.n	8008f56 <ai_platform_network_post_init+0xa6>
 8008f74:	2001      	movs	r0, #1
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	4b21      	ldr	r3, [pc, #132]	; (8009000 <ai_platform_network_post_init+0x150>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	680b      	ldr	r3, [r1, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1fc      	bne.n	8008f80 <ai_platform_network_post_init+0xd0>
 8008f86:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <ai_platform_network_post_init+0x154>)
 8008f88:	491b      	ldr	r1, [pc, #108]	; (8008ff8 <ai_platform_network_post_init+0x148>)
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <ai_platform_network_post_init+0x14c>)
 8008f8c:	6019      	str	r1, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d0ac      	beq.n	8008eee <ai_platform_network_post_init+0x3e>
 8008f94:	e7fe      	b.n	8008f94 <ai_platform_network_post_init+0xe4>
 8008f96:	2210      	movs	r2, #16
 8008f98:	2111      	movs	r1, #17
 8008f9a:	3010      	adds	r0, #16
 8008f9c:	f000 fe48 	bl	8009c30 <core_set_error>
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	4b16      	ldr	r3, [pc, #88]	; (8009000 <ai_platform_network_post_init+0x150>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4619      	mov	r1, r3
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	680b      	ldr	r3, [r1, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1fc      	bne.n	8008fac <ai_platform_network_post_init+0xfc>
 8008fb2:	4b14      	ldr	r3, [pc, #80]	; (8009004 <ai_platform_network_post_init+0x154>)
 8008fb4:	4910      	ldr	r1, [pc, #64]	; (8008ff8 <ai_platform_network_post_init+0x148>)
 8008fb6:	4a11      	ldr	r2, [pc, #68]	; (8008ffc <ai_platform_network_post_init+0x14c>)
 8008fb8:	6019      	str	r1, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d0c0      	beq.n	8008f42 <ai_platform_network_post_init+0x92>
 8008fc0:	e7fe      	b.n	8008fc0 <ai_platform_network_post_init+0x110>
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <ai_platform_network_post_init+0x140>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	680b      	ldr	r3, [r1, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1fc      	bne.n	8008fca <ai_platform_network_post_init+0x11a>
 8008fd0:	4b08      	ldr	r3, [pc, #32]	; (8008ff4 <ai_platform_network_post_init+0x144>)
 8008fd2:	4909      	ldr	r1, [pc, #36]	; (8008ff8 <ai_platform_network_post_init+0x148>)
 8008fd4:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <ai_platform_network_post_init+0x14c>)
 8008fd6:	6019      	str	r1, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d0b1      	beq.n	8008f42 <ai_platform_network_post_init+0x92>
 8008fde:	e7fe      	b.n	8008fde <ai_platform_network_post_init+0x12e>
 8008fe0:	a1c00100 	.word	0xa1c00100
 8008fe4:	e0002000 	.word	0xe0002000
 8008fe8:	e0042000 	.word	0xe0042000
 8008fec:	5c001000 	.word	0x5c001000
 8008ff0:	40023008 	.word	0x40023008
 8008ff4:	40023000 	.word	0x40023000
 8008ff8:	f407a5c2 	.word	0xf407a5c2
 8008ffc:	b5e8b5cd 	.word	0xb5e8b5cd
 8009000:	58024c08 	.word	0x58024c08
 8009004:	58024c00 	.word	0x58024c00

08009008 <ai_platform_network_process>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	4692      	mov	sl, r2
 800900e:	b083      	sub	sp, #12
 8009010:	4604      	mov	r4, r0
 8009012:	b120      	cbz	r0, 800901e <ai_platform_network_process+0x16>
 8009014:	4b86      	ldr	r3, [pc, #536]	; (8009230 <ai_platform_network_process+0x228>)
 8009016:	6802      	ldr	r2, [r0, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	bf18      	it	ne
 800901c:	2400      	movne	r4, #0
 800901e:	4a85      	ldr	r2, [pc, #532]	; (8009234 <ai_platform_network_process+0x22c>)
 8009020:	4885      	ldr	r0, [pc, #532]	; (8009238 <ai_platform_network_process+0x230>)
 8009022:	6813      	ldr	r3, [r2, #0]
 8009024:	f023 0301 	bic.w	r3, r3, #1
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	6803      	ldr	r3, [r0, #0]
 800902c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8009030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009034:	181a      	adds	r2, r3, r0
 8009036:	2a01      	cmp	r2, #1
 8009038:	f240 80c6 	bls.w	80091c8 <ai_platform_network_process+0x1c0>
 800903c:	f240 4249 	movw	r2, #1097	; 0x449
 8009040:	4293      	cmp	r3, r2
 8009042:	f000 80c1 	beq.w	80091c8 <ai_platform_network_process+0x1c0>
 8009046:	4b7d      	ldr	r3, [pc, #500]	; (800923c <ai_platform_network_process+0x234>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800904e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009052:	f000 80a9 	beq.w	80091a8 <ai_platform_network_process+0x1a0>
 8009056:	2c00      	cmp	r4, #0
 8009058:	f000 80db 	beq.w	8009212 <ai_platform_network_process+0x20a>
 800905c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009060:	68e0      	ldr	r0, [r4, #12]
 8009062:	461a      	mov	r2, r3
 8009064:	f000 0003 	and.w	r0, r0, #3
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 80bd 	beq.w	80091e8 <ai_platform_network_process+0x1e0>
 800906e:	2600      	movs	r6, #0
 8009070:	2803      	cmp	r0, #3
 8009072:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009074:	6166      	str	r6, [r4, #20]
 8009076:	f040 80c6 	bne.w	8009206 <ai_platform_network_process+0x1fe>
 800907a:	2900      	cmp	r1, #0
 800907c:	f000 80b7 	beq.w	80091ee <ai_platform_network_process+0x1e6>
 8009080:	fab5 f085 	clz	r0, r5
 8009084:	0940      	lsrs	r0, r0, #5
 8009086:	2800      	cmp	r0, #0
 8009088:	f040 80b1 	bne.w	80091ee <ai_platform_network_process+0x1e6>
 800908c:	882e      	ldrh	r6, [r5, #0]
 800908e:	2e00      	cmp	r6, #0
 8009090:	f000 80ad 	beq.w	80091ee <ai_platform_network_process+0x1e6>
 8009094:	888f      	ldrh	r7, [r1, #4]
 8009096:	686e      	ldr	r6, [r5, #4]
 8009098:	9701      	str	r7, [sp, #4]
 800909a:	2e00      	cmp	r6, #0
 800909c:	f000 825f 	beq.w	800955e <ai_platform_network_process+0x556>
 80090a0:	6836      	ldr	r6, [r6, #0]
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	f000 825b 	beq.w	800955e <ai_platform_network_process+0x556>
 80090a8:	68ab      	ldr	r3, [r5, #8]
 80090aa:	f8d3 9000 	ldr.w	r9, [r3]
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	f000 809c 	beq.w	80091ee <ai_platform_network_process+0x1e6>
 80090b6:	460f      	mov	r7, r1
 80090b8:	4680      	mov	r8, r0
 80090ba:	e05e      	b.n	800917a <ai_platform_network_process+0x172>
 80090bc:	68f3      	ldr	r3, [r6, #12]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	455a      	cmp	r2, fp
 80090c2:	d168      	bne.n	8009196 <ai_platform_network_process+0x18e>
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	4572      	cmp	r2, lr
 80090c8:	d165      	bne.n	8009196 <ai_platform_network_process+0x18e>
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	459c      	cmp	ip, r3
 80090ce:	d162      	bne.n	8009196 <ai_platform_network_process+0x18e>
 80090d0:	6800      	ldr	r0, [r0, #0]
 80090d2:	f005 fb5f 	bl	800e794 <ai_array_get_byte_size>
 80090d6:	68f2      	ldr	r2, [r6, #12]
 80090d8:	6973      	ldr	r3, [r6, #20]
 80090da:	68d2      	ldr	r2, [r2, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	fb03 f302 	mul.w	r3, r3, r2
 80090e2:	4298      	cmp	r0, r3
 80090e4:	d357      	bcc.n	8009196 <ai_platform_network_process+0x18e>
 80090e6:	69b3      	ldr	r3, [r6, #24]
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	f005 fb07 	bl	800e6fc <ai_array_to_buffer_fmt>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	4043      	eors	r3, r0
 80090f2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80090f6:	f040 8229 	bne.w	800954c <ai_platform_network_process+0x544>
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 821d 	beq.w	800953c <ai_platform_network_process+0x534>
 8009102:	88bb      	ldrh	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 808a 	beq.w	800921e <ai_platform_network_process+0x216>
 800910a:	9a01      	ldr	r2, [sp, #4]
 800910c:	68f1      	ldr	r1, [r6, #12]
 800910e:	429a      	cmp	r2, r3
 8009110:	68c9      	ldr	r1, [r1, #12]
 8009112:	bf38      	it	cc
 8009114:	461a      	movcc	r2, r3
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	6972      	ldr	r2, [r6, #20]
 800911a:	68d3      	ldr	r3, [r2, #12]
 800911c:	fb03 f301 	mul.w	r3, r3, r1
 8009120:	f8c9 3008 	str.w	r3, [r9, #8]
 8009124:	88ba      	ldrh	r2, [r7, #4]
 8009126:	fb03 f302 	mul.w	r3, r3, r2
 800912a:	f8c9 300c 	str.w	r3, [r9, #12]
 800912e:	6939      	ldr	r1, [r7, #16]
 8009130:	f8c9 1004 	str.w	r1, [r9, #4]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4413      	add	r3, r2
 8009138:	f8c9 3000 	str.w	r3, [r9]
 800913c:	69b0      	ldr	r0, [r6, #24]
 800913e:	6803      	ldr	r3, [r0, #0]
 8009140:	009a      	lsls	r2, r3, #2
 8009142:	d408      	bmi.n	8009156 <ai_platform_network_process+0x14e>
 8009144:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	4419      	add	r1, r3
 800914c:	6081      	str	r1, [r0, #8]
 800914e:	69b3      	ldr	r3, [r6, #24]
 8009150:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009154:	60da      	str	r2, [r3, #12]
 8009156:	f108 0801 	add.w	r8, r8, #1
 800915a:	882b      	ldrh	r3, [r5, #0]
 800915c:	4598      	cmp	r8, r3
 800915e:	d27b      	bcs.n	8009258 <ai_platform_network_process+0x250>
 8009160:	686b      	ldr	r3, [r5, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d078      	beq.n	8009258 <ai_platform_network_process+0x250>
 8009166:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800916a:	2e00      	cmp	r6, #0
 800916c:	d074      	beq.n	8009258 <ai_platform_network_process+0x250>
 800916e:	68ab      	ldr	r3, [r5, #8]
 8009170:	3718      	adds	r7, #24
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 8009178:	d039      	beq.n	80091ee <ai_platform_network_process+0x1e6>
 800917a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800917e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 8009182:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8009186:	fb0b f30e 	mul.w	r3, fp, lr
 800918a:	69b0      	ldr	r0, [r6, #24]
 800918c:	fb0c f303 	mul.w	r3, ip, r3
 8009190:	6841      	ldr	r1, [r0, #4]
 8009192:	4299      	cmp	r1, r3
 8009194:	d292      	bcs.n	80090bc <ai_platform_network_process+0xb4>
 8009196:	f104 0010 	add.w	r0, r4, #16
 800919a:	2218      	movs	r2, #24
 800919c:	2112      	movs	r1, #18
 800919e:	f04f 0b00 	mov.w	fp, #0
 80091a2:	f000 fd45 	bl	8009c30 <core_set_error>
 80091a6:	e02a      	b.n	80091fe <ai_platform_network_process+0x1f6>
 80091a8:	4b25      	ldr	r3, [pc, #148]	; (8009240 <ai_platform_network_process+0x238>)
 80091aa:	2201      	movs	r2, #1
 80091ac:	4618      	mov	r0, r3
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	6803      	ldr	r3, [r0, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1fc      	bne.n	80091b0 <ai_platform_network_process+0x1a8>
 80091b6:	4b23      	ldr	r3, [pc, #140]	; (8009244 <ai_platform_network_process+0x23c>)
 80091b8:	4823      	ldr	r0, [pc, #140]	; (8009248 <ai_platform_network_process+0x240>)
 80091ba:	4a24      	ldr	r2, [pc, #144]	; (800924c <ai_platform_network_process+0x244>)
 80091bc:	6018      	str	r0, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	f43f af48 	beq.w	8009056 <ai_platform_network_process+0x4e>
 80091c6:	e7fe      	b.n	80091c6 <ai_platform_network_process+0x1be>
 80091c8:	4b21      	ldr	r3, [pc, #132]	; (8009250 <ai_platform_network_process+0x248>)
 80091ca:	2201      	movs	r2, #1
 80091cc:	4618      	mov	r0, r3
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	6803      	ldr	r3, [r0, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1fc      	bne.n	80091d0 <ai_platform_network_process+0x1c8>
 80091d6:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <ai_platform_network_process+0x24c>)
 80091d8:	481b      	ldr	r0, [pc, #108]	; (8009248 <ai_platform_network_process+0x240>)
 80091da:	4a1c      	ldr	r2, [pc, #112]	; (800924c <ai_platform_network_process+0x244>)
 80091dc:	6018      	str	r0, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4293      	cmp	r3, r2
 80091e2:	f43f af38 	beq.w	8009056 <ai_platform_network_process+0x4e>
 80091e6:	e7fe      	b.n	80091e6 <ai_platform_network_process+0x1de>
 80091e8:	2803      	cmp	r0, #3
 80091ea:	6163      	str	r3, [r4, #20]
 80091ec:	d10b      	bne.n	8009206 <ai_platform_network_process+0x1fe>
 80091ee:	f04f 0b00 	mov.w	fp, #0
 80091f2:	f104 0010 	add.w	r0, r4, #16
 80091f6:	2217      	movs	r2, #23
 80091f8:	2112      	movs	r1, #18
 80091fa:	f000 fd19 	bl	8009c30 <core_set_error>
 80091fe:	4658      	mov	r0, fp
 8009200:	b003      	add	sp, #12
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	f104 0010 	add.w	r0, r4, #16
 800920a:	2230      	movs	r2, #48	; 0x30
 800920c:	2111      	movs	r1, #17
 800920e:	f000 fd0f 	bl	8009c30 <core_set_error>
 8009212:	f04f 0b00 	mov.w	fp, #0
 8009216:	4658      	mov	r0, fp
 8009218:	b003      	add	sp, #12
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	f104 0010 	add.w	r0, r4, #16
 8009222:	2221      	movs	r2, #33	; 0x21
 8009224:	2112      	movs	r1, #18
 8009226:	469b      	mov	fp, r3
 8009228:	f000 fd02 	bl	8009c30 <core_set_error>
 800922c:	e7e7      	b.n	80091fe <ai_platform_network_process+0x1f6>
 800922e:	bf00      	nop
 8009230:	a1c00100 	.word	0xa1c00100
 8009234:	e0002000 	.word	0xe0002000
 8009238:	e0042000 	.word	0xe0042000
 800923c:	5c001000 	.word	0x5c001000
 8009240:	58024c08 	.word	0x58024c08
 8009244:	58024c00 	.word	0x58024c00
 8009248:	f407a5c2 	.word	0xf407a5c2
 800924c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009250:	40023008 	.word	0x40023008
 8009254:	40023000 	.word	0x40023000
 8009258:	f1ba 0f00 	cmp.w	sl, #0
 800925c:	f000 808c 	beq.w	8009378 <ai_platform_network_process+0x370>
 8009260:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009264:	2b01      	cmp	r3, #1
 8009266:	f240 813b 	bls.w	80094e0 <ai_platform_network_process+0x4d8>
 800926a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800926c:	f115 0f0c 	cmn.w	r5, #12
 8009270:	f000 8136 	beq.w	80094e0 <ai_platform_network_process+0x4d8>
 8009274:	89ab      	ldrh	r3, [r5, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8132 	beq.w	80094e0 <ai_platform_network_process+0x4d8>
 800927c:	4656      	mov	r6, sl
 800927e:	f04f 0900 	mov.w	r9, #0
 8009282:	9400      	str	r4, [sp, #0]
 8009284:	4599      	cmp	r9, r3
 8009286:	d274      	bcs.n	8009372 <ai_platform_network_process+0x36a>
 8009288:	692b      	ldr	r3, [r5, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d071      	beq.n	8009372 <ai_platform_network_process+0x36a>
 800928e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 8009292:	2f00      	cmp	r7, #0
 8009294:	d06d      	beq.n	8009372 <ai_platform_network_process+0x36a>
 8009296:	696b      	ldr	r3, [r5, #20]
 8009298:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800929c:	f8d3 8000 	ldr.w	r8, [r3]
 80092a0:	eb18 0a04 	adds.w	sl, r8, r4
 80092a4:	f000 8125 	beq.w	80094f2 <ai_platform_network_process+0x4ea>
 80092a8:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 80092ac:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 80092b0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80092b4:	fb0b f30e 	mul.w	r3, fp, lr
 80092b8:	69b8      	ldr	r0, [r7, #24]
 80092ba:	fb0c f303 	mul.w	r3, ip, r3
 80092be:	6841      	ldr	r1, [r0, #4]
 80092c0:	4299      	cmp	r1, r3
 80092c2:	f0c0 810c 	bcc.w	80094de <ai_platform_network_process+0x4d6>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	455a      	cmp	r2, fp
 80092cc:	f040 8107 	bne.w	80094de <ai_platform_network_process+0x4d6>
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	4572      	cmp	r2, lr
 80092d4:	f040 8103 	bne.w	80094de <ai_platform_network_process+0x4d6>
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	459c      	cmp	ip, r3
 80092dc:	f040 80ff 	bne.w	80094de <ai_platform_network_process+0x4d6>
 80092e0:	6800      	ldr	r0, [r0, #0]
 80092e2:	f005 fa57 	bl	800e794 <ai_array_get_byte_size>
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	68d2      	ldr	r2, [r2, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	fb03 f302 	mul.w	r3, r3, r2
 80092f2:	4298      	cmp	r0, r3
 80092f4:	f0c0 80f3 	bcc.w	80094de <ai_platform_network_process+0x4d6>
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f005 f9fe 	bl	800e6fc <ai_array_to_buffer_fmt>
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	4043      	eors	r3, r0
 8009304:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8009308:	f040 810e 	bne.w	8009528 <ai_platform_network_process+0x520>
 800930c:	6933      	ldr	r3, [r6, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 8101 	beq.w	8009516 <ai_platform_network_process+0x50e>
 8009314:	88b3      	ldrh	r3, [r6, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80f4 	beq.w	8009504 <ai_platform_network_process+0x4fc>
 800931c:	9a01      	ldr	r2, [sp, #4]
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	429a      	cmp	r2, r3
 8009322:	68c9      	ldr	r1, [r1, #12]
 8009324:	bf38      	it	cc
 8009326:	461a      	movcc	r2, r3
 8009328:	9201      	str	r2, [sp, #4]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	68d3      	ldr	r3, [r2, #12]
 800932e:	fb03 f301 	mul.w	r3, r3, r1
 8009332:	f8ca 3008 	str.w	r3, [sl, #8]
 8009336:	88b2      	ldrh	r2, [r6, #4]
 8009338:	fb03 f302 	mul.w	r3, r3, r2
 800933c:	f8ca 300c 	str.w	r3, [sl, #12]
 8009340:	6931      	ldr	r1, [r6, #16]
 8009342:	f8ca 1004 	str.w	r1, [sl, #4]
 8009346:	6932      	ldr	r2, [r6, #16]
 8009348:	4413      	add	r3, r2
 800934a:	f848 3004 	str.w	r3, [r8, r4]
 800934e:	69b8      	ldr	r0, [r7, #24]
 8009350:	6803      	ldr	r3, [r0, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	d408      	bmi.n	8009368 <ai_platform_network_process+0x360>
 8009356:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	4419      	add	r1, r3
 800935e:	6081      	str	r1, [r0, #8]
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009366:	60da      	str	r2, [r3, #12]
 8009368:	f109 0901 	add.w	r9, r9, #1
 800936c:	3618      	adds	r6, #24
 800936e:	89ab      	ldrh	r3, [r5, #12]
 8009370:	e788      	b.n	8009284 <ai_platform_network_process+0x27c>
 8009372:	e9dd 4300 	ldrd	r4, r3, [sp]
 8009376:	82a3      	strh	r3, [r4, #20]
 8009378:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800937c:	2a00      	cmp	r2, #0
 800937e:	f000 80a9 	beq.w	80094d4 <ai_platform_network_process+0x4cc>
 8009382:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009384:	2a01      	cmp	r2, #1
 8009386:	f240 80a8 	bls.w	80094da <ai_platform_network_process+0x4d2>
 800938a:	f105 060c 	add.w	r6, r5, #12
 800938e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8009392:	8aa3      	ldrh	r3, [r4, #20]
 8009394:	455b      	cmp	r3, fp
 8009396:	f67f af32 	bls.w	80091fe <ai_platform_network_process+0x1f6>
 800939a:	9400      	str	r4, [sp, #0]
 800939c:	2d00      	cmp	r5, #0
 800939e:	d037      	beq.n	8009410 <ai_platform_network_process+0x408>
 80093a0:	882b      	ldrh	r3, [r5, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d034      	beq.n	8009410 <ai_platform_network_process+0x408>
 80093a6:	686b      	ldr	r3, [r5, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d031      	beq.n	8009410 <ai_platform_network_process+0x408>
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d02e      	beq.n	8009410 <ai_platform_network_process+0x408>
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	e01a      	b.n	80093ee <ai_platform_network_process+0x3e6>
 80093b8:	68d4      	ldr	r4, [r2, #12]
 80093ba:	1b00      	subs	r0, r0, r4
 80093bc:	4401      	add	r1, r0
 80093be:	6091      	str	r1, [r2, #8]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	60da      	str	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f108 0801 	add.w	r8, r8, #1
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	f85a 2009 	ldr.w	r2, [sl, r9]
 80093d2:	440b      	add	r3, r1
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d301      	bcc.n	80093dc <ai_platform_network_process+0x3d4>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	882b      	ldrh	r3, [r5, #0]
 80093e0:	4598      	cmp	r8, r3
 80093e2:	d215      	bcs.n	8009410 <ai_platform_network_process+0x408>
 80093e4:	686b      	ldr	r3, [r5, #4]
 80093e6:	b19b      	cbz	r3, 8009410 <ai_platform_network_process+0x408>
 80093e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80093ec:	b183      	cbz	r3, 8009410 <ai_platform_network_process+0x408>
 80093ee:	68a9      	ldr	r1, [r5, #8]
 80093f0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	f8d1 a000 	ldr.w	sl, [r1]
 80093fa:	6814      	ldr	r4, [r2, #0]
 80093fc:	eb0a 0709 	add.w	r7, sl, r9
 8009400:	6890      	ldr	r0, [r2, #8]
 8009402:	00a4      	lsls	r4, r4, #2
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	d5d7      	bpl.n	80093b8 <ai_platform_network_process+0x3b0>
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	f005 fa9d 	bl	800e948 <memcpy>
 800940e:	e7da      	b.n	80093c6 <ai_platform_network_process+0x3be>
 8009410:	9800      	ldr	r0, [sp, #0]
 8009412:	f001 ff6d 	bl	800b2f0 <ai_layers_forward_all>
 8009416:	2e00      	cmp	r6, #0
 8009418:	d04a      	beq.n	80094b0 <ai_platform_network_process+0x4a8>
 800941a:	8833      	ldrh	r3, [r6, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d047      	beq.n	80094b0 <ai_platform_network_process+0x4a8>
 8009420:	6873      	ldr	r3, [r6, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d044      	beq.n	80094b0 <ai_platform_network_process+0x4a8>
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d041      	beq.n	80094b0 <ai_platform_network_process+0x4a8>
 800942c:	f04f 0800 	mov.w	r8, #0
 8009430:	e019      	b.n	8009466 <ai_platform_network_process+0x45e>
 8009432:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009436:	4291      	cmp	r1, r2
 8009438:	d301      	bcc.n	800943e <ai_platform_network_process+0x436>
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	1a51      	subs	r1, r2, r1
 800943e:	6079      	str	r1, [r7, #4]
 8009440:	f108 0801 	add.w	r8, r8, #1
 8009444:	6998      	ldr	r0, [r3, #24]
 8009446:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800944a:	1b12      	subs	r2, r2, r4
 800944c:	440a      	add	r2, r1
 800944e:	6082      	str	r2, [r0, #8]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	8833      	ldrh	r3, [r6, #0]
 8009458:	4598      	cmp	r8, r3
 800945a:	d229      	bcs.n	80094b0 <ai_platform_network_process+0x4a8>
 800945c:	6873      	ldr	r3, [r6, #4]
 800945e:	b33b      	cbz	r3, 80094b0 <ai_platform_network_process+0x4a8>
 8009460:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009464:	b323      	cbz	r3, 80094b0 <ai_platform_network_process+0x4a8>
 8009466:	68b2      	ldr	r2, [r6, #8]
 8009468:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800946c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8009470:	f8d2 a000 	ldr.w	sl, [r2]
 8009474:	f8de 1000 	ldr.w	r1, [lr]
 8009478:	eb0a 0709 	add.w	r7, sl, r9
 800947c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 8009480:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 8009484:	eb00 0102 	add.w	r1, r0, r2
 8009488:	d0d3      	beq.n	8009432 <ai_platform_network_process+0x42a>
 800948a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800948e:	f005 fa5b 	bl	800e948 <memcpy>
 8009492:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009496:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800949a:	440b      	add	r3, r1
 800949c:	4293      	cmp	r3, r2
 800949e:	d301      	bcc.n	80094a4 <ai_platform_network_process+0x49c>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	607b      	str	r3, [r7, #4]
 80094a6:	f108 0801 	add.w	r8, r8, #1
 80094aa:	8833      	ldrh	r3, [r6, #0]
 80094ac:	4598      	cmp	r8, r3
 80094ae:	d3d5      	bcc.n	800945c <ai_platform_network_process+0x454>
 80094b0:	9b00      	ldr	r3, [sp, #0]
 80094b2:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80094b6:	461a      	mov	r2, r3
 80094b8:	8a9b      	ldrh	r3, [r3, #20]
 80094ba:	f10b 0b01 	add.w	fp, fp, #1
 80094be:	fa1f fb8b 	uxth.w	fp, fp
 80094c2:	455b      	cmp	r3, fp
 80094c4:	f8a2 b016 	strh.w	fp, [r2, #22]
 80094c8:	f63f af68 	bhi.w	800939c <ai_platform_network_process+0x394>
 80094cc:	4658      	mov	r0, fp
 80094ce:	b003      	add	sp, #12
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	4615      	mov	r5, r2
 80094d6:	4616      	mov	r6, r2
 80094d8:	e759      	b.n	800938e <ai_platform_network_process+0x386>
 80094da:	2600      	movs	r6, #0
 80094dc:	e757      	b.n	800938e <ai_platform_network_process+0x386>
 80094de:	9c00      	ldr	r4, [sp, #0]
 80094e0:	f104 0010 	add.w	r0, r4, #16
 80094e4:	2218      	movs	r2, #24
 80094e6:	2113      	movs	r1, #19
 80094e8:	f04f 0b00 	mov.w	fp, #0
 80094ec:	f000 fba0 	bl	8009c30 <core_set_error>
 80094f0:	e685      	b.n	80091fe <ai_platform_network_process+0x1f6>
 80094f2:	9c00      	ldr	r4, [sp, #0]
 80094f4:	2217      	movs	r2, #23
 80094f6:	2113      	movs	r1, #19
 80094f8:	46d3      	mov	fp, sl
 80094fa:	f104 0010 	add.w	r0, r4, #16
 80094fe:	f000 fb97 	bl	8009c30 <core_set_error>
 8009502:	e67c      	b.n	80091fe <ai_platform_network_process+0x1f6>
 8009504:	9c00      	ldr	r4, [sp, #0]
 8009506:	2221      	movs	r2, #33	; 0x21
 8009508:	2113      	movs	r1, #19
 800950a:	469b      	mov	fp, r3
 800950c:	f104 0010 	add.w	r0, r4, #16
 8009510:	f000 fb8e 	bl	8009c30 <core_set_error>
 8009514:	e673      	b.n	80091fe <ai_platform_network_process+0x1f6>
 8009516:	9c00      	ldr	r4, [sp, #0]
 8009518:	2217      	movs	r2, #23
 800951a:	2113      	movs	r1, #19
 800951c:	469b      	mov	fp, r3
 800951e:	f104 0010 	add.w	r0, r4, #16
 8009522:	f000 fb85 	bl	8009c30 <core_set_error>
 8009526:	e66a      	b.n	80091fe <ai_platform_network_process+0x1f6>
 8009528:	9c00      	ldr	r4, [sp, #0]
 800952a:	2219      	movs	r2, #25
 800952c:	2113      	movs	r1, #19
 800952e:	f04f 0b00 	mov.w	fp, #0
 8009532:	f104 0010 	add.w	r0, r4, #16
 8009536:	f000 fb7b 	bl	8009c30 <core_set_error>
 800953a:	e660      	b.n	80091fe <ai_platform_network_process+0x1f6>
 800953c:	f104 0010 	add.w	r0, r4, #16
 8009540:	2217      	movs	r2, #23
 8009542:	2112      	movs	r1, #18
 8009544:	469b      	mov	fp, r3
 8009546:	f000 fb73 	bl	8009c30 <core_set_error>
 800954a:	e658      	b.n	80091fe <ai_platform_network_process+0x1f6>
 800954c:	f104 0010 	add.w	r0, r4, #16
 8009550:	2219      	movs	r2, #25
 8009552:	2112      	movs	r1, #18
 8009554:	f04f 0b00 	mov.w	fp, #0
 8009558:	f000 fb6a 	bl	8009c30 <core_set_error>
 800955c:	e64f      	b.n	80091fe <ai_platform_network_process+0x1f6>
 800955e:	f1ba 0f00 	cmp.w	sl, #0
 8009562:	f47f ae7f 	bne.w	8009264 <ai_platform_network_process+0x25c>
 8009566:	e70d      	b.n	8009384 <ai_platform_network_process+0x37c>

08009568 <node_convert>:
 8009568:	6942      	ldr	r2, [r0, #20]
 800956a:	8813      	ldrh	r3, [r2, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d04b      	beq.n	8009608 <node_convert+0xa0>
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	6852      	ldr	r2, [r2, #4]
 8009574:	b083      	sub	sp, #12
 8009576:	6855      	ldr	r5, [r2, #4]
 8009578:	b105      	cbz	r5, 800957c <node_convert+0x14>
 800957a:	682d      	ldr	r5, [r5, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d940      	bls.n	8009602 <node_convert+0x9a>
 8009580:	6916      	ldr	r6, [r2, #16]
 8009582:	b106      	cbz	r6, 8009586 <node_convert+0x1e>
 8009584:	6836      	ldr	r6, [r6, #0]
 8009586:	68ab      	ldr	r3, [r5, #8]
 8009588:	0a1b      	lsrs	r3, r3, #8
 800958a:	f000 80e1 	beq.w	8009750 <node_convert+0x1e8>
 800958e:	68e9      	ldr	r1, [r5, #12]
 8009590:	2401      	movs	r4, #1
 8009592:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009596:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800959a:	428b      	cmp	r3, r1
 800959c:	fb02 f404 	mul.w	r4, r2, r4
 80095a0:	d1f9      	bne.n	8009596 <node_convert+0x2e>
 80095a2:	69aa      	ldr	r2, [r5, #24]
 80095a4:	69b7      	ldr	r7, [r6, #24]
 80095a6:	6813      	ldr	r3, [r2, #0]
 80095a8:	6890      	ldr	r0, [r2, #8]
 80095aa:	f3c3 4243 	ubfx	r2, r3, #17, #4
 80095ae:	2a01      	cmp	r2, #1
 80095b0:	d055      	beq.n	800965e <node_convert+0xf6>
 80095b2:	6829      	ldr	r1, [r5, #0]
 80095b4:	15da      	asrs	r2, r3, #23
 80095b6:	68bd      	ldr	r5, [r7, #8]
 80095b8:	b341      	cbz	r1, 800960c <node_convert+0xa4>
 80095ba:	684e      	ldr	r6, [r1, #4]
 80095bc:	f002 0201 	and.w	r2, r2, #1
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	f000 80c7 	beq.w	8009754 <node_convert+0x1ec>
 80095c6:	884b      	ldrh	r3, [r1, #2]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8085 	beq.w	80096d8 <node_convert+0x170>
 80095ce:	6833      	ldr	r3, [r6, #0]
 80095d0:	ed93 7a00 	vldr	s14, [r3]
 80095d4:	6873      	ldr	r3, [r6, #4]
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	f000 80d3 	beq.w	8009782 <node_convert+0x21a>
 80095dc:	f993 2000 	ldrsb.w	r2, [r3]
 80095e0:	b16c      	cbz	r4, 80095fe <node_convert+0x96>
 80095e2:	4404      	add	r4, r0
 80095e4:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80095e8:	1a9b      	subs	r3, r3, r2
 80095ea:	42a0      	cmp	r0, r4
 80095ec:	ee07 3a90 	vmov	s15, r3
 80095f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095f8:	ece5 7a01 	vstmia	r5!, {s15}
 80095fc:	d1f2      	bne.n	80095e4 <node_convert+0x7c>
 80095fe:	b003      	add	sp, #12
 8009600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009602:	2300      	movs	r3, #0
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	deff      	udf	#255	; 0xff
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	deff      	udf	#255	; 0xff
 800960c:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8009610:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8009614:	f002 0201 	and.w	r2, r2, #1
 8009618:	1b8e      	subs	r6, r1, r6
 800961a:	2908      	cmp	r1, #8
 800961c:	4629      	mov	r1, r5
 800961e:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8009622:	eba6 0602 	sub.w	r6, r6, r2
 8009626:	4622      	mov	r2, r4
 8009628:	d05c      	beq.n	80096e4 <node_convert+0x17c>
 800962a:	f002 f8cd 	bl	800b7c8 <arm_q15_to_float>
 800962e:	2e00      	cmp	r6, #0
 8009630:	d0e5      	beq.n	80095fe <node_convert+0x96>
 8009632:	ee07 6a90 	vmov	s15, r6
 8009636:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800963a:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800963e:	f008 f907 	bl	8011850 <powf>
 8009642:	2c00      	cmp	r4, #0
 8009644:	d0db      	beq.n	80095fe <node_convert+0x96>
 8009646:	2300      	movs	r3, #0
 8009648:	ecf5 7a01 	vldmia	r5!, {s15}
 800964c:	3301      	adds	r3, #1
 800964e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009652:	429c      	cmp	r4, r3
 8009654:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009658:	d1f6      	bne.n	8009648 <node_convert+0xe0>
 800965a:	b003      	add	sp, #12
 800965c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	6835      	ldr	r5, [r6, #0]
 8009662:	15da      	asrs	r2, r3, #23
 8009664:	2d00      	cmp	r5, #0
 8009666:	f000 808e 	beq.w	8009786 <node_convert+0x21e>
 800966a:	6869      	ldr	r1, [r5, #4]
 800966c:	f002 0301 	and.w	r3, r2, #1
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	2900      	cmp	r1, #0
 8009674:	d039      	beq.n	80096ea <node_convert+0x182>
 8009676:	886d      	ldrh	r5, [r5, #2]
 8009678:	2d00      	cmp	r5, #0
 800967a:	d03c      	beq.n	80096f6 <node_convert+0x18e>
 800967c:	680d      	ldr	r5, [r1, #0]
 800967e:	edd5 7a00 	vldr	s15, [r5]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80b1 	beq.w	80097ea <node_convert+0x282>
 8009688:	684b      	ldr	r3, [r1, #4]
 800968a:	f993 3000 	ldrsb.w	r3, [r3]
 800968e:	ee07 3a10 	vmov	s14, r3
 8009692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009696:	2c00      	cmp	r4, #0
 8009698:	d0b1      	beq.n	80095fe <node_convert+0x96>
 800969a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800969e:	4414      	add	r4, r2
 80096a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80096a4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80096a8:	ecf0 7a01 	vldmia	r0!, {s15}
 80096ac:	eef0 5a47 	vmov.f32	s11, s14
 80096b0:	eee7 5aa6 	vfma.f32	s11, s15, s13
 80096b4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	db3b      	blt.n	8009736 <node_convert+0x1ce>
 80096be:	ee75 7a86 	vadd.f32	s15, s11, s12
 80096c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80096c6:	ee17 3a90 	vmov	r3, s15
 80096ca:	f303 0307 	ssat	r3, #8, r3
 80096ce:	f802 3b01 	strb.w	r3, [r2], #1
 80096d2:	42a2      	cmp	r2, r4
 80096d4:	d1e8      	bne.n	80096a8 <node_convert+0x140>
 80096d6:	e792      	b.n	80095fe <node_convert+0x96>
 80096d8:	2a00      	cmp	r2, #0
 80096da:	d03d      	beq.n	8009758 <node_convert+0x1f0>
 80096dc:	461a      	mov	r2, r3
 80096de:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8009800 <node_convert+0x298>
 80096e2:	e77d      	b.n	80095e0 <node_convert+0x78>
 80096e4:	f002 f8d8 	bl	800b898 <arm_q7_to_float>
 80096e8:	e7a1      	b.n	800962e <node_convert+0xc6>
 80096ea:	b133      	cbz	r3, 80096fa <node_convert+0x192>
 80096ec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009800 <node_convert+0x298>
 80096f0:	eef0 7a47 	vmov.f32	s15, s14
 80096f4:	e7cf      	b.n	8009696 <node_convert+0x12e>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1f8      	bne.n	80096ec <node_convert+0x184>
 80096fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80096fe:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009800 <node_convert+0x298>
 8009702:	2c00      	cmp	r4, #0
 8009704:	f43f af7b 	beq.w	80095fe <node_convert+0x96>
 8009708:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800970c:	4414      	add	r4, r2
 800970e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8009712:	ecf0 7a01 	vldmia	r0!, {s15}
 8009716:	eeb0 6a47 	vmov.f32	s12, s14
 800971a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800971e:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8009722:	ee17 3a90 	vmov	r3, s15
 8009726:	f383 0308 	usat	r3, #8, r3
 800972a:	f802 3b01 	strb.w	r3, [r2], #1
 800972e:	42a2      	cmp	r2, r4
 8009730:	d1ef      	bne.n	8009712 <node_convert+0x1aa>
 8009732:	b003      	add	sp, #12
 8009734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009736:	ee75 7ac6 	vsub.f32	s15, s11, s12
 800973a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800973e:	ee17 3a90 	vmov	r3, s15
 8009742:	f303 0307 	ssat	r3, #8, r3
 8009746:	f802 3b01 	strb.w	r3, [r2], #1
 800974a:	4294      	cmp	r4, r2
 800974c:	d1ac      	bne.n	80096a8 <node_convert+0x140>
 800974e:	e756      	b.n	80095fe <node_convert+0x96>
 8009750:	2401      	movs	r4, #1
 8009752:	e726      	b.n	80095a2 <node_convert+0x3a>
 8009754:	2a00      	cmp	r2, #0
 8009756:	d13f      	bne.n	80097d8 <node_convert+0x270>
 8009758:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009800 <node_convert+0x298>
 800975c:	2c00      	cmp	r4, #0
 800975e:	f43f af4e 	beq.w	80095fe <node_convert+0x96>
 8009762:	4404      	add	r4, r0
 8009764:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	42a0      	cmp	r0, r4
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009778:	ece5 7a01 	vstmia	r5!, {s15}
 800977c:	d1f2      	bne.n	8009764 <node_convert+0x1fc>
 800977e:	b003      	add	sp, #12
 8009780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009782:	781a      	ldrb	r2, [r3, #0]
 8009784:	e7ea      	b.n	800975c <node_convert+0x1f4>
 8009786:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 800978a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800978e:	f002 0201 	and.w	r2, r2, #1
 8009792:	1af3      	subs	r3, r6, r3
 8009794:	3340      	adds	r3, #64	; 0x40
 8009796:	1a9b      	subs	r3, r3, r2
 8009798:	d015      	beq.n	80097c6 <node_convert+0x25e>
 800979a:	425b      	negs	r3, r3
 800979c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80097a0:	9001      	str	r0, [sp, #4]
 80097a2:	ee00 3a90 	vmov	s1, r3
 80097a6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80097aa:	f008 f851 	bl	8011850 <powf>
 80097ae:	9801      	ldr	r0, [sp, #4]
 80097b0:	b14c      	cbz	r4, 80097c6 <node_convert+0x25e>
 80097b2:	4603      	mov	r3, r0
 80097b4:	ecf3 7a01 	vldmia	r3!, {s15}
 80097b8:	3501      	adds	r5, #1
 80097ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80097be:	42ac      	cmp	r4, r5
 80097c0:	ed43 7a01 	vstr	s15, [r3, #-4]
 80097c4:	d1f6      	bne.n	80097b4 <node_convert+0x24c>
 80097c6:	2e08      	cmp	r6, #8
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	4622      	mov	r2, r4
 80097cc:	d008      	beq.n	80097e0 <node_convert+0x278>
 80097ce:	b003      	add	sp, #12
 80097d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80097d4:	f001 be76 	b.w	800b4c4 <arm_float_to_q15>
 80097d8:	4632      	mov	r2, r6
 80097da:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8009800 <node_convert+0x298>
 80097de:	e6ff      	b.n	80095e0 <node_convert+0x78>
 80097e0:	b003      	add	sp, #12
 80097e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80097e6:	f001 bf27 	b.w	800b638 <arm_float_to_q7>
 80097ea:	684b      	ldr	r3, [r1, #4]
 80097ec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	ee07 3a10 	vmov	s14, r3
 80097f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80097fa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80097fe:	e780      	b.n	8009702 <node_convert+0x19a>
 8009800:	00000000 	.word	0x00000000

08009804 <node_convert_integer>:
 8009804:	6942      	ldr	r2, [r0, #20]
 8009806:	8813      	ldrh	r3, [r2, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8084 	beq.w	8009916 <node_convert_integer+0x112>
 800980e:	b4f0      	push	{r4, r5, r6, r7}
 8009810:	6852      	ldr	r2, [r2, #4]
 8009812:	6855      	ldr	r5, [r2, #4]
 8009814:	b105      	cbz	r5, 8009818 <node_convert_integer+0x14>
 8009816:	682d      	ldr	r5, [r5, #0]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d979      	bls.n	8009910 <node_convert_integer+0x10c>
 800981c:	6916      	ldr	r6, [r2, #16]
 800981e:	b106      	cbz	r6, 8009822 <node_convert_integer+0x1e>
 8009820:	6836      	ldr	r6, [r6, #0]
 8009822:	68ab      	ldr	r3, [r5, #8]
 8009824:	0a1b      	lsrs	r3, r3, #8
 8009826:	f000 8178 	beq.w	8009b1a <node_convert_integer+0x316>
 800982a:	68e8      	ldr	r0, [r5, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009836:	4298      	cmp	r0, r3
 8009838:	fb01 f202 	mul.w	r2, r1, r2
 800983c:	d1f9      	bne.n	8009832 <node_convert_integer+0x2e>
 800983e:	0893      	lsrs	r3, r2, #2
 8009840:	682c      	ldr	r4, [r5, #0]
 8009842:	f8d6 c000 	ldr.w	ip, [r6]
 8009846:	b19c      	cbz	r4, 8009870 <node_convert_integer+0x6c>
 8009848:	6861      	ldr	r1, [r4, #4]
 800984a:	b189      	cbz	r1, 8009870 <node_convert_integer+0x6c>
 800984c:	8860      	ldrh	r0, [r4, #2]
 800984e:	b178      	cbz	r0, 8009870 <node_convert_integer+0x6c>
 8009850:	6809      	ldr	r1, [r1, #0]
 8009852:	edd1 6a00 	vldr	s13, [r1]
 8009856:	f1bc 0f00 	cmp.w	ip, #0
 800985a:	d00e      	beq.n	800987a <node_convert_integer+0x76>
 800985c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009860:	b159      	cbz	r1, 800987a <node_convert_integer+0x76>
 8009862:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8009866:	b140      	cbz	r0, 800987a <node_convert_integer+0x76>
 8009868:	6809      	ldr	r1, [r1, #0]
 800986a:	ed91 7a00 	vldr	s14, [r1]
 800986e:	e006      	b.n	800987e <node_convert_integer+0x7a>
 8009870:	eddf 6abf 	vldr	s13, [pc, #764]	; 8009b70 <node_convert_integer+0x36c>
 8009874:	f1bc 0f00 	cmp.w	ip, #0
 8009878:	d1f0      	bne.n	800985c <node_convert_integer+0x58>
 800987a:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8009b70 <node_convert_integer+0x36c>
 800987e:	69a8      	ldr	r0, [r5, #24]
 8009880:	69b7      	ldr	r7, [r6, #24]
 8009882:	6805      	ldr	r5, [r0, #0]
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	022d      	lsls	r5, r5, #8
 8009888:	6880      	ldr	r0, [r0, #8]
 800988a:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	d443      	bmi.n	800991a <node_convert_integer+0x116>
 8009892:	2e00      	cmp	r6, #0
 8009894:	f040 80d4 	bne.w	8009a40 <node_convert_integer+0x23c>
 8009898:	b13c      	cbz	r4, 80098aa <node_convert_integer+0xa6>
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 815b 	beq.w	8009b58 <node_convert_integer+0x354>
 80098a2:	8864      	ldrh	r4, [r4, #2]
 80098a4:	b10c      	cbz	r4, 80098aa <node_convert_integer+0xa6>
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	781c      	ldrb	r4, [r3, #0]
 80098aa:	f1bc 0f00 	cmp.w	ip, #0
 80098ae:	f000 812c 	beq.w	8009b0a <node_convert_integer+0x306>
 80098b2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8127 	beq.w	8009b0a <node_convert_integer+0x306>
 80098bc:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	f000 8122 	beq.w	8009b0a <node_convert_integer+0x306>
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	ee06 3a10 	vmov	s12, r3
 80098d2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80098d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80098da:	eec6 5a87 	vdiv.f32	s11, s13, s14
 80098de:	b1aa      	cbz	r2, 800990c <node_convert_integer+0x108>
 80098e0:	440a      	add	r2, r1
 80098e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80098e6:	1b1b      	subs	r3, r3, r4
 80098e8:	eeb0 7a46 	vmov.f32	s14, s12
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098f4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80098f8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80098fc:	ee17 3a90 	vmov	r3, s15
 8009900:	f383 0308 	usat	r3, #8, r3
 8009904:	f801 3b01 	strb.w	r3, [r1], #1
 8009908:	4291      	cmp	r1, r2
 800990a:	d1ea      	bne.n	80098e2 <node_convert_integer+0xde>
 800990c:	bcf0      	pop	{r4, r5, r6, r7}
 800990e:	4770      	bx	lr
 8009910:	2300      	movs	r3, #0
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	deff      	udf	#255	; 0xff
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	deff      	udf	#255	; 0xff
 800991a:	2e00      	cmp	r6, #0
 800991c:	d047      	beq.n	80099ae <node_convert_integer+0x1aa>
 800991e:	b144      	cbz	r4, 8009932 <node_convert_integer+0x12e>
 8009920:	6863      	ldr	r3, [r4, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 8110 	beq.w	8009b48 <node_convert_integer+0x344>
 8009928:	8864      	ldrh	r4, [r4, #2]
 800992a:	b114      	cbz	r4, 8009932 <node_convert_integer+0x12e>
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f993 4000 	ldrsb.w	r4, [r3]
 8009932:	f1bc 0f00 	cmp.w	ip, #0
 8009936:	f000 80eb 	beq.w	8009b10 <node_convert_integer+0x30c>
 800993a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800993e:	2d00      	cmp	r5, #0
 8009940:	f000 80f9 	beq.w	8009b36 <node_convert_integer+0x332>
 8009944:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 80ef 	beq.w	8009b2c <node_convert_integer+0x328>
 800994e:	686b      	ldr	r3, [r5, #4]
 8009950:	f993 3000 	ldrsb.w	r3, [r3]
 8009954:	ee07 3a90 	vmov	s15, r3
 8009958:	ee86 6a87 	vdiv.f32	s12, s13, s14
 800995c:	2a00      	cmp	r2, #0
 800995e:	d0d5      	beq.n	800990c <node_convert_integer+0x108>
 8009960:	440a      	add	r2, r1
 8009962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009966:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800996a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800996e:	eef0 5a47 	vmov.f32	s11, s14
 8009972:	1b1b      	subs	r3, r3, r4
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800997c:	eee7 5a86 	vfma.f32	s11, s15, s12
 8009980:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8009984:	eef0 7a65 	vmov.f32	s15, s11
 8009988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998c:	bfd4      	ite	le
 800998e:	ee75 7ae6 	vsuble.f32	s15, s11, s13
 8009992:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 8009996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800999a:	ee17 3a90 	vmov	r3, s15
 800999e:	f303 0307 	ssat	r3, #8, r3
 80099a2:	f801 3b01 	strb.w	r3, [r1], #1
 80099a6:	4291      	cmp	r1, r2
 80099a8:	d1df      	bne.n	800996a <node_convert_integer+0x166>
 80099aa:	bcf0      	pop	{r4, r5, r6, r7}
 80099ac:	4770      	bx	lr
 80099ae:	b144      	cbz	r4, 80099c2 <node_convert_integer+0x1be>
 80099b0:	6865      	ldr	r5, [r4, #4]
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	f000 80c2 	beq.w	8009b3c <node_convert_integer+0x338>
 80099b8:	8864      	ldrh	r4, [r4, #2]
 80099ba:	b114      	cbz	r4, 80099c2 <node_convert_integer+0x1be>
 80099bc:	686c      	ldr	r4, [r5, #4]
 80099be:	f994 4000 	ldrsb.w	r4, [r4]
 80099c2:	f1bc 0f00 	cmp.w	ip, #0
 80099c6:	d00c      	beq.n	80099e2 <node_convert_integer+0x1de>
 80099c8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80099cc:	2e00      	cmp	r6, #0
 80099ce:	f000 80b0 	beq.w	8009b32 <node_convert_integer+0x32e>
 80099d2:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	f000 80a6 	beq.w	8009b28 <node_convert_integer+0x324>
 80099dc:	6875      	ldr	r5, [r6, #4]
 80099de:	f895 c000 	ldrb.w	ip, [r5]
 80099e2:	eef4 6a47 	vcmp.f32	s13, s14
 80099e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ea:	d104      	bne.n	80099f6 <node_convert_integer+0x1f2>
 80099ec:	f104 0680 	add.w	r6, r4, #128	; 0x80
 80099f0:	4566      	cmp	r6, ip
 80099f2:	f000 80f8 	beq.w	8009be6 <node_convert_integer+0x3e2>
 80099f6:	ee07 ca90 	vmov	s15, ip
 80099fa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80099fe:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8009a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a06:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	f43f af7e 	beq.w	800990c <node_convert_integer+0x108>
 8009a10:	4402      	add	r2, r0
 8009a12:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009a16:	eef0 6a67 	vmov.f32	s13, s15
 8009a1a:	1b1b      	subs	r3, r3, r4
 8009a1c:	ee07 3a10 	vmov	s14, r3
 8009a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a24:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009a28:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8009a2c:	ee17 3a10 	vmov	r3, s14
 8009a30:	f383 0308 	usat	r3, #8, r3
 8009a34:	4290      	cmp	r0, r2
 8009a36:	f801 3b01 	strb.w	r3, [r1], #1
 8009a3a:	d1ea      	bne.n	8009a12 <node_convert_integer+0x20e>
 8009a3c:	bcf0      	pop	{r4, r5, r6, r7}
 8009a3e:	4770      	bx	lr
 8009a40:	2c00      	cmp	r4, #0
 8009a42:	d068      	beq.n	8009b16 <node_convert_integer+0x312>
 8009a44:	6866      	ldr	r6, [r4, #4]
 8009a46:	2e00      	cmp	r6, #0
 8009a48:	f000 808c 	beq.w	8009b64 <node_convert_integer+0x360>
 8009a4c:	8865      	ldrh	r5, [r4, #2]
 8009a4e:	b10d      	cbz	r5, 8009a54 <node_convert_integer+0x250>
 8009a50:	6875      	ldr	r5, [r6, #4]
 8009a52:	782d      	ldrb	r5, [r5, #0]
 8009a54:	f1bc 0f00 	cmp.w	ip, #0
 8009a58:	d061      	beq.n	8009b1e <node_convert_integer+0x31a>
 8009a5a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	d078      	beq.n	8009b54 <node_convert_integer+0x350>
 8009a62:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8009a66:	b116      	cbz	r6, 8009a6e <node_convert_integer+0x26a>
 8009a68:	687e      	ldr	r6, [r7, #4]
 8009a6a:	f996 6000 	ldrsb.w	r6, [r6]
 8009a6e:	eef4 6a47 	vcmp.f32	s13, s14
 8009a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a76:	d102      	bne.n	8009a7e <node_convert_integer+0x27a>
 8009a78:	3d80      	subs	r5, #128	; 0x80
 8009a7a:	42b5      	cmp	r5, r6
 8009a7c:	d07a      	beq.n	8009b74 <node_convert_integer+0x370>
 8009a7e:	b13c      	cbz	r4, 8009a90 <node_convert_integer+0x28c>
 8009a80:	6863      	ldr	r3, [r4, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 80ce 	beq.w	8009c24 <node_convert_integer+0x420>
 8009a88:	8864      	ldrh	r4, [r4, #2]
 8009a8a:	b10c      	cbz	r4, 8009a90 <node_convert_integer+0x28c>
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	781c      	ldrb	r4, [r3, #0]
 8009a90:	f1bc 0f00 	cmp.w	ip, #0
 8009a94:	d045      	beq.n	8009b22 <node_convert_integer+0x31e>
 8009a96:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	f000 80bf 	beq.w	8009c1e <node_convert_integer+0x41a>
 8009aa0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d05f      	beq.n	8009b68 <node_convert_integer+0x364>
 8009aa8:	686b      	ldr	r3, [r5, #4]
 8009aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	f43f af28 	beq.w	800990c <node_convert_integer+0x108>
 8009abc:	440a      	add	r2, r1
 8009abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ac2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009ac6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009aca:	eef0 5a47 	vmov.f32	s11, s14
 8009ace:	1b1b      	subs	r3, r3, r4
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ad8:	eee7 5a86 	vfma.f32	s11, s15, s12
 8009adc:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8009ae0:	eef0 7a65 	vmov.f32	s15, s11
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	bfd4      	ite	le
 8009aea:	ee75 7ae6 	vsuble.f32	s15, s11, s13
 8009aee:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 8009af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009af6:	ee17 3a90 	vmov	r3, s15
 8009afa:	f303 0307 	ssat	r3, #8, r3
 8009afe:	f801 3b01 	strb.w	r3, [r1], #1
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d1df      	bne.n	8009ac6 <node_convert_integer+0x2c2>
 8009b06:	bcf0      	pop	{r4, r5, r6, r7}
 8009b08:	4770      	bx	lr
 8009b0a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009b0e:	e6e4      	b.n	80098da <node_convert_integer+0xd6>
 8009b10:	ee07 ca90 	vmov	s15, ip
 8009b14:	e720      	b.n	8009958 <node_convert_integer+0x154>
 8009b16:	4625      	mov	r5, r4
 8009b18:	e79c      	b.n	8009a54 <node_convert_integer+0x250>
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	e690      	b.n	8009840 <node_convert_integer+0x3c>
 8009b1e:	4666      	mov	r6, ip
 8009b20:	e7a5      	b.n	8009a6e <node_convert_integer+0x26a>
 8009b22:	ee07 ca90 	vmov	s15, ip
 8009b26:	e7c4      	b.n	8009ab2 <node_convert_integer+0x2ae>
 8009b28:	46ac      	mov	ip, r5
 8009b2a:	e75a      	b.n	80099e2 <node_convert_integer+0x1de>
 8009b2c:	ee07 3a90 	vmov	s15, r3
 8009b30:	e712      	b.n	8009958 <node_convert_integer+0x154>
 8009b32:	46b4      	mov	ip, r6
 8009b34:	e755      	b.n	80099e2 <node_convert_integer+0x1de>
 8009b36:	ee07 5a90 	vmov	s15, r5
 8009b3a:	e70d      	b.n	8009958 <node_convert_integer+0x154>
 8009b3c:	462c      	mov	r4, r5
 8009b3e:	f1bc 0f00 	cmp.w	ip, #0
 8009b42:	f47f af41 	bne.w	80099c8 <node_convert_integer+0x1c4>
 8009b46:	e74c      	b.n	80099e2 <node_convert_integer+0x1de>
 8009b48:	461c      	mov	r4, r3
 8009b4a:	f1bc 0f00 	cmp.w	ip, #0
 8009b4e:	f47f aef4 	bne.w	800993a <node_convert_integer+0x136>
 8009b52:	e7dd      	b.n	8009b10 <node_convert_integer+0x30c>
 8009b54:	463e      	mov	r6, r7
 8009b56:	e78a      	b.n	8009a6e <node_convert_integer+0x26a>
 8009b58:	461c      	mov	r4, r3
 8009b5a:	f1bc 0f00 	cmp.w	ip, #0
 8009b5e:	f47f aea8 	bne.w	80098b2 <node_convert_integer+0xae>
 8009b62:	e7d2      	b.n	8009b0a <node_convert_integer+0x306>
 8009b64:	4635      	mov	r5, r6
 8009b66:	e775      	b.n	8009a54 <node_convert_integer+0x250>
 8009b68:	ee07 3a90 	vmov	s15, r3
 8009b6c:	e7a1      	b.n	8009ab2 <node_convert_integer+0x2ae>
 8009b6e:	bf00      	nop
 8009b70:	00000000 	.word	0x00000000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d057      	beq.n	8009c28 <node_convert_integer+0x424>
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 8009b80:	eb00 0c03 	add.w	ip, r0, r3
 8009b84:	f850 4b04 	ldr.w	r4, [r0], #4
 8009b88:	ea4f 2534 	mov.w	r5, r4, ror #8
 8009b8c:	fa3f f585 	uxtb16	r5, r5
 8009b90:	fad5 f506 	ssub16	r5, r5, r6
 8009b94:	fa3f f484 	uxtb16	r4, r4
 8009b98:	fad4 f406 	ssub16	r4, r4, r6
 8009b9c:	022d      	lsls	r5, r5, #8
 8009b9e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8009ba2:	4560      	cmp	r0, ip
 8009ba4:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 8009ba8:	ea44 0405 	orr.w	r4, r4, r5
 8009bac:	f847 4b04 	str.w	r4, [r7], #4
 8009bb0:	d1e8      	bne.n	8009b84 <node_convert_integer+0x380>
 8009bb2:	4419      	add	r1, r3
 8009bb4:	f012 0203 	ands.w	r2, r2, #3
 8009bb8:	f43f aea8 	beq.w	800990c <node_convert_integer+0x108>
 8009bbc:	f89c 3000 	ldrb.w	r3, [ip]
 8009bc0:	2a01      	cmp	r2, #1
 8009bc2:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8009bc6:	700b      	strb	r3, [r1, #0]
 8009bc8:	f43f aea0 	beq.w	800990c <node_convert_integer+0x108>
 8009bcc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8009bd0:	2a03      	cmp	r2, #3
 8009bd2:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8009bd6:	704b      	strb	r3, [r1, #1]
 8009bd8:	f47f ae98 	bne.w	800990c <node_convert_integer+0x108>
 8009bdc:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8009be0:	3b80      	subs	r3, #128	; 0x80
 8009be2:	708b      	strb	r3, [r1, #2]
 8009be4:	e692      	b.n	800990c <node_convert_integer+0x108>
 8009be6:	b1fb      	cbz	r3, 8009c28 <node_convert_integer+0x424>
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	460f      	mov	r7, r1
 8009bec:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 8009bf0:	eb00 0c03 	add.w	ip, r0, r3
 8009bf4:	f850 4b04 	ldr.w	r4, [r0], #4
 8009bf8:	ea4f 2534 	mov.w	r5, r4, ror #8
 8009bfc:	fa2f f585 	sxtb16	r5, r5
 8009c00:	fa95 f506 	sadd16	r5, r5, r6
 8009c04:	fa2f f484 	sxtb16	r4, r4
 8009c08:	fa94 f406 	sadd16	r4, r4, r6
 8009c0c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8009c10:	4560      	cmp	r0, ip
 8009c12:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8009c16:	f847 4b04 	str.w	r4, [r7], #4
 8009c1a:	d1eb      	bne.n	8009bf4 <node_convert_integer+0x3f0>
 8009c1c:	e7c9      	b.n	8009bb2 <node_convert_integer+0x3ae>
 8009c1e:	ee07 5a90 	vmov	s15, r5
 8009c22:	e746      	b.n	8009ab2 <node_convert_integer+0x2ae>
 8009c24:	461c      	mov	r4, r3
 8009c26:	e733      	b.n	8009a90 <node_convert_integer+0x28c>
 8009c28:	4684      	mov	ip, r0
 8009c2a:	e7c3      	b.n	8009bb4 <node_convert_integer+0x3b0>

08009c2c <core_init>:
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	4770      	bx	lr

08009c30 <core_set_error>:
 8009c30:	4603      	mov	r3, r0
 8009c32:	7800      	ldrb	r0, [r0, #0]
 8009c34:	b930      	cbnz	r0, 8009c44 <core_set_error+0x14>
 8009c36:	7019      	strb	r1, [r3, #0]
 8009c38:	2001      	movs	r0, #1
 8009c3a:	6819      	ldr	r1, [r3, #0]
 8009c3c:	f362 211f 	bfi	r1, r2, #8, #24
 8009c40:	6019      	str	r1, [r3, #0]
 8009c42:	4770      	bx	lr
 8009c44:	2000      	movs	r0, #0
 8009c46:	4770      	bx	lr

08009c48 <ai_dict8_dot_array_f32>:
 8009c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4c:	9d06      	ldr	r5, [sp, #24]
 8009c4e:	4c88      	ldr	r4, [pc, #544]	; (8009e70 <ai_dict8_dot_array_f32+0x228>)
 8009c50:	2d07      	cmp	r5, #7
 8009c52:	442c      	add	r4, r5
 8009c54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c58:	f104 0620 	add.w	r6, r4, #32
 8009c5c:	d817      	bhi.n	8009c8e <ai_dict8_dot_array_f32+0x46>
 8009c5e:	42b3      	cmp	r3, r6
 8009c60:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009e74 <ai_dict8_dot_array_f32+0x22c>
 8009c64:	d20b      	bcs.n	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6a:	ecf3 7a01 	vldmia	r3!, {s15}
 8009c6e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009c72:	42b3      	cmp	r3, r6
 8009c74:	edd4 6a00 	vldr	s13, [r4]
 8009c78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009c7c:	d3f3      	bcc.n	8009c66 <ai_dict8_dot_array_f32+0x1e>
 8009c7e:	edd0 7a00 	vldr	s15, [r0]
 8009c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c86:	ed80 7a00 	vstr	s14, [r0]
 8009c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8e:	f001 0503 	and.w	r5, r1, #3
 8009c92:	2d02      	cmp	r5, #2
 8009c94:	f000 80f0 	beq.w	8009e78 <ai_dict8_dot_array_f32+0x230>
 8009c98:	2d03      	cmp	r5, #3
 8009c9a:	f000 81ff 	beq.w	800a09c <ai_dict8_dot_array_f32+0x454>
 8009c9e:	2d01      	cmp	r5, #1
 8009ca0:	f000 81f0 	beq.w	800a084 <ai_dict8_dot_array_f32+0x43c>
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	f200 81fc 	bhi.w	800a0a2 <ai_dict8_dot_array_f32+0x45a>
 8009caa:	1ae4      	subs	r4, r4, r3
 8009cac:	f101 0810 	add.w	r8, r1, #16
 8009cb0:	f101 0508 	add.w	r5, r1, #8
 8009cb4:	f103 0720 	add.w	r7, r3, #32
 8009cb8:	0964      	lsrs	r4, r4, #5
 8009cba:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009e74 <ai_dict8_dot_array_f32+0x22c>
 8009cbe:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 8009cc2:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 8009cc6:	3508      	adds	r5, #8
 8009cc8:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 8009ccc:	3720      	adds	r7, #32
 8009cce:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009cd2:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 8009cd6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009cda:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 8009cde:	edde 7a00 	vldr	s15, [lr]
 8009ce2:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 8009ce6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009cea:	eddc 5a00 	vldr	s11, [ip]
 8009cee:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 8009cf2:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 8009cf6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009cfa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009cfe:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 8009d02:	ed9c 4a00 	vldr	s8, [ip]
 8009d06:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 8009d0a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009d0e:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 8009d12:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d16:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 8009d1a:	eee4 7a26 	vfma.f32	s15, s8, s13
 8009d1e:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 8009d22:	ed9c 4a00 	vldr	s8, [ip]
 8009d26:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 8009d2a:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 8009d2e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d32:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009d36:	ed9e 5a00 	vldr	s10, [lr]
 8009d3a:	ed9c 4a00 	vldr	s8, [ip]
 8009d3e:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 8009d42:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 8009d46:	4545      	cmp	r5, r8
 8009d48:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8009d4c:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009d50:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009d54:	ed9e 5a00 	vldr	s10, [lr]
 8009d58:	ed9c 6a00 	vldr	s12, [ip]
 8009d5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009d60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009d64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d6c:	d1a9      	bne.n	8009cc2 <ai_dict8_dot_array_f32+0x7a>
 8009d6e:	3401      	adds	r4, #1
 8009d70:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009d74:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	d280      	bcs.n	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009d7c:	461c      	mov	r4, r3
 8009d7e:	780d      	ldrb	r5, [r1, #0]
 8009d80:	ecf4 6a01 	vldmia	r4!, {s13}
 8009d84:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009d88:	42a6      	cmp	r6, r4
 8009d8a:	edd5 7a00 	vldr	s15, [r5]
 8009d8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d92:	f67f af74 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009d96:	784d      	ldrb	r5, [r1, #1]
 8009d98:	f103 0408 	add.w	r4, r3, #8
 8009d9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8009da0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009da4:	42a6      	cmp	r6, r4
 8009da6:	edd5 7a00 	vldr	s15, [r5]
 8009daa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dae:	f67f af66 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009db2:	788d      	ldrb	r5, [r1, #2]
 8009db4:	f103 040c 	add.w	r4, r3, #12
 8009db8:	edd3 6a02 	vldr	s13, [r3, #8]
 8009dbc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009dc0:	42a6      	cmp	r6, r4
 8009dc2:	edd5 7a00 	vldr	s15, [r5]
 8009dc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dca:	f67f af58 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009dce:	78cd      	ldrb	r5, [r1, #3]
 8009dd0:	f103 0410 	add.w	r4, r3, #16
 8009dd4:	edd3 6a03 	vldr	s13, [r3, #12]
 8009dd8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009ddc:	42a6      	cmp	r6, r4
 8009dde:	edd5 7a00 	vldr	s15, [r5]
 8009de2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009de6:	f67f af4a 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009dea:	790d      	ldrb	r5, [r1, #4]
 8009dec:	f103 0414 	add.w	r4, r3, #20
 8009df0:	edd3 6a04 	vldr	s13, [r3, #16]
 8009df4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	edd5 7a00 	vldr	s15, [r5]
 8009dfe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e02:	f67f af3c 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009e06:	794d      	ldrb	r5, [r1, #5]
 8009e08:	f103 0418 	add.w	r4, r3, #24
 8009e0c:	edd3 6a05 	vldr	s13, [r3, #20]
 8009e10:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e14:	42a6      	cmp	r6, r4
 8009e16:	edd5 7a00 	vldr	s15, [r5]
 8009e1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e1e:	f67f af2e 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009e22:	798d      	ldrb	r5, [r1, #6]
 8009e24:	f103 041c 	add.w	r4, r3, #28
 8009e28:	edd3 6a06 	vldr	s13, [r3, #24]
 8009e2c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	edd5 7a00 	vldr	s15, [r5]
 8009e36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e3a:	f67f af20 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009e3e:	79cd      	ldrb	r5, [r1, #7]
 8009e40:	f103 0420 	add.w	r4, r3, #32
 8009e44:	edd3 6a07 	vldr	s13, [r3, #28]
 8009e48:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e4c:	42a6      	cmp	r6, r4
 8009e4e:	edd5 7a00 	vldr	s15, [r5]
 8009e52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e56:	f67f af12 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009e5a:	7a09      	ldrb	r1, [r1, #8]
 8009e5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8009e60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009e64:	edd2 6a00 	vldr	s13, [r2]
 8009e68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e6c:	e707      	b.n	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009e6e:	bf00      	nop
 8009e70:	3ffffff8 	.word	0x3ffffff8
 8009e74:	00000000 	.word	0x00000000
 8009e78:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8009e74 <ai_dict8_dot_array_f32+0x22c>
 8009e7c:	780d      	ldrb	r5, [r1, #0]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009e84:	3101      	adds	r1, #1
 8009e86:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009e8a:	edd5 6a00 	vldr	s13, [r5]
 8009e8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e92:	780d      	ldrb	r5, [r1, #0]
 8009e94:	1d1f      	adds	r7, r3, #4
 8009e96:	edd3 7a00 	vldr	s15, [r3]
 8009e9a:	f101 0c01 	add.w	ip, r1, #1
 8009e9e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009ea2:	42bc      	cmp	r4, r7
 8009ea4:	edd5 6a00 	vldr	s13, [r5]
 8009ea8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009eac:	d365      	bcc.n	8009f7a <ai_dict8_dot_array_f32+0x332>
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	f101 0e11 	add.w	lr, r1, #17
 8009eb4:	3109      	adds	r1, #9
 8009eb6:	eba6 0803 	sub.w	r8, r6, r3
 8009eba:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009ebe:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 8009ec2:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009ec6:	3108      	adds	r1, #8
 8009ec8:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 8009ecc:	3320      	adds	r3, #32
 8009ece:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009ed2:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8009ed6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009eda:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8009ede:	edd5 7a00 	vldr	s15, [r5]
 8009ee2:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 8009ee6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009eea:	edd4 5a00 	vldr	s11, [r4]
 8009eee:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 8009ef2:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8009ef6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009efa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009efe:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009f02:	ed94 4a00 	vldr	s8, [r4]
 8009f06:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 8009f0a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009f0e:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 8009f12:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f16:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 8009f1a:	eee4 7a26 	vfma.f32	s15, s8, s13
 8009f1e:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8009f22:	ed94 4a00 	vldr	s8, [r4]
 8009f26:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 8009f2a:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8009f2e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f32:	eee4 7a05 	vfma.f32	s15, s8, s10
 8009f36:	ed95 5a00 	vldr	s10, [r5]
 8009f3a:	ed94 4a00 	vldr	s8, [r4]
 8009f3e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009f42:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 8009f46:	458e      	cmp	lr, r1
 8009f48:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009f4c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009f50:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009f54:	ed95 5a00 	vldr	s10, [r5]
 8009f58:	ed94 6a00 	vldr	s12, [r4]
 8009f5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009f60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009f64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f6c:	d1a9      	bne.n	8009ec2 <ai_dict8_dot_array_f32+0x27a>
 8009f6e:	f108 0801 	add.w	r8, r8, #1
 8009f72:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8009f76:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 8009f7a:	42b7      	cmp	r7, r6
 8009f7c:	f4bf ae7f 	bcs.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009f80:	463b      	mov	r3, r7
 8009f82:	f89c 1000 	ldrb.w	r1, [ip]
 8009f86:	ecf3 6a01 	vldmia	r3!, {s13}
 8009f8a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009f8e:	429e      	cmp	r6, r3
 8009f90:	edd1 7a00 	vldr	s15, [r1]
 8009f94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f98:	f67f ae71 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009f9c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8009fa0:	f107 0308 	add.w	r3, r7, #8
 8009fa4:	edd7 6a01 	vldr	s13, [r7, #4]
 8009fa8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009fac:	429e      	cmp	r6, r3
 8009fae:	edd1 7a00 	vldr	s15, [r1]
 8009fb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fb6:	f67f ae62 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009fba:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8009fbe:	f107 030c 	add.w	r3, r7, #12
 8009fc2:	edd7 6a02 	vldr	s13, [r7, #8]
 8009fc6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009fca:	429e      	cmp	r6, r3
 8009fcc:	edd1 7a00 	vldr	s15, [r1]
 8009fd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fd4:	f67f ae53 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009fd8:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8009fdc:	f107 0310 	add.w	r3, r7, #16
 8009fe0:	edd7 6a03 	vldr	s13, [r7, #12]
 8009fe4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009fe8:	429e      	cmp	r6, r3
 8009fea:	edd1 7a00 	vldr	s15, [r1]
 8009fee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ff2:	f67f ae44 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 8009ff6:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	edd7 6a04 	vldr	s13, [r7, #16]
 800a002:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a006:	429e      	cmp	r6, r3
 800a008:	edd1 7a00 	vldr	s15, [r1]
 800a00c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a010:	f67f ae35 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 800a014:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800a018:	f107 0318 	add.w	r3, r7, #24
 800a01c:	edd7 6a05 	vldr	s13, [r7, #20]
 800a020:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a024:	429e      	cmp	r6, r3
 800a026:	edd1 7a00 	vldr	s15, [r1]
 800a02a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a02e:	f67f ae26 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 800a032:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800a036:	f107 031c 	add.w	r3, r7, #28
 800a03a:	edd7 6a06 	vldr	s13, [r7, #24]
 800a03e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a042:	429e      	cmp	r6, r3
 800a044:	edd1 7a00 	vldr	s15, [r1]
 800a048:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a04c:	f67f ae17 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 800a050:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800a054:	f107 0320 	add.w	r3, r7, #32
 800a058:	edd7 6a07 	vldr	s13, [r7, #28]
 800a05c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a060:	429e      	cmp	r6, r3
 800a062:	edd1 7a00 	vldr	s15, [r1]
 800a066:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a06a:	f67f ae08 	bls.w	8009c7e <ai_dict8_dot_array_f32+0x36>
 800a06e:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800a072:	edd7 7a08 	vldr	s15, [r7, #32]
 800a076:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a07a:	edd2 6a00 	vldr	s13, [r2]
 800a07e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a082:	e5fc      	b.n	8009c7e <ai_dict8_dot_array_f32+0x36>
 800a084:	780d      	ldrb	r5, [r1, #0]
 800a086:	3304      	adds	r3, #4
 800a088:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a08c:	3101      	adds	r1, #1
 800a08e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a092:	ed95 7a00 	vldr	s14, [r5]
 800a096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a09a:	e6ef      	b.n	8009e7c <ai_dict8_dot_array_f32+0x234>
 800a09c:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8009e74 <ai_dict8_dot_array_f32+0x22c>
 800a0a0:	e6f7      	b.n	8009e92 <ai_dict8_dot_array_f32+0x24a>
 800a0a2:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8009e74 <ai_dict8_dot_array_f32+0x22c>
 800a0a6:	e667      	b.n	8009d78 <ai_dict8_dot_array_f32+0x130>

0800a0a8 <ai_dict4_dot_array_f32>:
 800a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0ae:	f027 0c01 	bic.w	ip, r7, #1
 800a0b2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800a0b6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a0ba:	f000 80ad 	beq.w	800a218 <ai_dict4_dot_array_f32+0x170>
 800a0be:	1d0d      	adds	r5, r1, #4
 800a0c0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800a0c4:	f103 0420 	add.w	r4, r3, #32
 800a0c8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800a220 <ai_dict4_dot_array_f32+0x178>
 800a0cc:	eb05 0e09 	add.w	lr, r5, r9
 800a0d0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800a0d4:	3504      	adds	r5, #4
 800a0d6:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800a0da:	3420      	adds	r4, #32
 800a0dc:	f006 0a0f 	and.w	sl, r6, #15
 800a0e0:	0936      	lsrs	r6, r6, #4
 800a0e2:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800a0e6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a0ea:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800a0ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0f2:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800a0f6:	edda 7a00 	vldr	s15, [sl]
 800a0fa:	edd6 5a00 	vldr	s11, [r6]
 800a0fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a102:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800a106:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800a10a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800a10e:	f006 060f 	and.w	r6, r6, #15
 800a112:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800a116:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800a11a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a11e:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800a122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a126:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800a12a:	ed9a 3a00 	vldr	s6, [sl]
 800a12e:	ed96 5a00 	vldr	s10, [r6]
 800a132:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800a136:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a13a:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800a13e:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800a142:	f00a 0a0f 	and.w	sl, sl, #15
 800a146:	45ae      	cmp	lr, r5
 800a148:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800a14c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800a150:	ed9b 3a00 	vldr	s6, [fp]
 800a154:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800a158:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a15c:	ed9a 4a00 	vldr	s8, [sl]
 800a160:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800a164:	f006 060f 	and.w	r6, r6, #15
 800a168:	ed9a 5a00 	vldr	s10, [sl]
 800a16c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a170:	ed96 6a00 	vldr	s12, [r6]
 800a174:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a178:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a17c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a180:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a184:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a188:	d1a2      	bne.n	800a0d0 <ai_dict4_dot_array_f32+0x28>
 800a18a:	4449      	add	r1, r9
 800a18c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a190:	459c      	cmp	ip, r3
 800a192:	d92d      	bls.n	800a1f0 <ai_dict4_dot_array_f32+0x148>
 800a194:	f10c 0c07 	add.w	ip, ip, #7
 800a198:	f103 0508 	add.w	r5, r3, #8
 800a19c:	f103 0810 	add.w	r8, r3, #16
 800a1a0:	f101 3eff 	add.w	lr, r1, #4294967295
 800a1a4:	ebac 0c05 	sub.w	ip, ip, r5
 800a1a8:	f02c 0407 	bic.w	r4, ip, #7
 800a1ac:	44a0      	add	r8, r4
 800a1ae:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800a1b2:	3508      	adds	r5, #8
 800a1b4:	ed55 5a03 	vldr	s11, [r5, #-12]
 800a1b8:	f004 060f 	and.w	r6, r4, #15
 800a1bc:	0924      	lsrs	r4, r4, #4
 800a1be:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a1c2:	45a8      	cmp	r8, r5
 800a1c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a1cc:	edd6 7a00 	vldr	s15, [r6]
 800a1d0:	ed94 6a00 	vldr	s12, [r4]
 800a1d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a1d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a1dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1e0:	d1e5      	bne.n	800a1ae <ai_dict4_dot_array_f32+0x106>
 800a1e2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a1e6:	f10c 0c01 	add.w	ip, ip, #1
 800a1ea:	4461      	add	r1, ip
 800a1ec:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800a1f0:	07fc      	lsls	r4, r7, #31
 800a1f2:	d509      	bpl.n	800a208 <ai_dict4_dot_array_f32+0x160>
 800a1f4:	7809      	ldrb	r1, [r1, #0]
 800a1f6:	edd3 7a00 	vldr	s15, [r3]
 800a1fa:	090b      	lsrs	r3, r1, #4
 800a1fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a200:	edd2 6a00 	vldr	s13, [r2]
 800a204:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a208:	edd0 7a00 	vldr	s15, [r0]
 800a20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a210:	ed80 7a00 	vstr	s14, [r0]
 800a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a218:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800a220 <ai_dict4_dot_array_f32+0x178>
 800a21c:	e7b8      	b.n	800a190 <ai_dict4_dot_array_f32+0xe8>
 800a21e:	bf00      	nop
 800a220:	00000000 	.word	0x00000000

0800a224 <forward_dense>:
 800a224:	6942      	ldr	r2, [r0, #20]
 800a226:	8813      	ldrh	r3, [r2, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 81c8 	beq.w	800a5be <forward_dense+0x39a>
 800a22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a232:	ed2d 8b08 	vpush	{d8-d11}
 800a236:	6851      	ldr	r1, [r2, #4]
 800a238:	b091      	sub	sp, #68	; 0x44
 800a23a:	684d      	ldr	r5, [r1, #4]
 800a23c:	b105      	cbz	r5, 800a240 <forward_dense+0x1c>
 800a23e:	682d      	ldr	r5, [r5, #0]
 800a240:	2b01      	cmp	r3, #1
 800a242:	f240 81b9 	bls.w	800a5b8 <forward_dense+0x394>
 800a246:	690a      	ldr	r2, [r1, #16]
 800a248:	b102      	cbz	r2, 800a24c <forward_dense+0x28>
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	f000 81b8 	beq.w	800a5c2 <forward_dense+0x39e>
 800a252:	69cb      	ldr	r3, [r1, #28]
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 8209 	beq.w	800a66c <forward_dense+0x448>
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	9008      	str	r0, [sp, #32]
 800a25e:	f111 0018 	adds.w	r0, r1, #24
 800a262:	f000 81dc 	beq.w	800a61e <forward_dense+0x3fa>
 800a266:	8b09      	ldrh	r1, [r1, #24]
 800a268:	2901      	cmp	r1, #1
 800a26a:	f240 81fc 	bls.w	800a666 <forward_dense+0x442>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 81d7 	beq.w	800a622 <forward_dense+0x3fe>
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	9306      	str	r3, [sp, #24]
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	68d6      	ldr	r6, [r2, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	68b0      	ldr	r0, [r6, #8]
 800a280:	681f      	ldr	r7, [r3, #0]
 800a282:	68f4      	ldr	r4, [r6, #12]
 800a284:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800a288:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800a28c:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800a290:	fb04 f000 	mul.w	r0, r4, r0
 800a294:	fa4e f10c 	asr.w	r1, lr, ip
 800a298:	2f04      	cmp	r7, #4
 800a29a:	9007      	str	r0, [sp, #28]
 800a29c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a29e:	68e9      	ldr	r1, [r5, #12]
 800a2a0:	6870      	ldr	r0, [r6, #4]
 800a2a2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800a2a6:	f000 81db 	beq.w	800a660 <forward_dense+0x43c>
 800a2aa:	2f08      	cmp	r7, #8
 800a2ac:	f000 81d8 	beq.w	800a660 <forward_dense+0x43c>
 800a2b0:	f04f 0a00 	mov.w	sl, #0
 800a2b4:	6992      	ldr	r2, [r2, #24]
 800a2b6:	0080      	lsls	r0, r0, #2
 800a2b8:	69a9      	ldr	r1, [r5, #24]
 800a2ba:	6894      	ldr	r4, [r2, #8]
 800a2bc:	9a08      	ldr	r2, [sp, #32]
 800a2be:	9009      	str	r0, [sp, #36]	; 0x24
 800a2c0:	1826      	adds	r6, r4, r0
 800a2c2:	6952      	ldr	r2, [r2, #20]
 800a2c4:	9404      	str	r4, [sp, #16]
 800a2c6:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a2ca:	9a07      	ldr	r2, [sp, #28]
 800a2cc:	688f      	ldr	r7, [r1, #8]
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	f000 81c1 	beq.w	800a656 <forward_dense+0x432>
 800a2d4:	f1a8 0210 	sub.w	r2, r8, #16
 800a2d8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a2dc:	689d      	ldr	r5, [r3, #8]
 800a2de:	0912      	lsrs	r2, r2, #4
 800a2e0:	910a      	str	r1, [sp, #40]	; 0x28
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	9b06      	ldr	r3, [sp, #24]
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	eddf 2acf 	vldr	s5, [pc, #828]	; 800a628 <forward_dense+0x404>
 800a2ec:	9105      	str	r1, [sp, #20]
 800a2ee:	f008 010f 	and.w	r1, r8, #15
 800a2f2:	0192      	lsls	r2, r2, #6
 800a2f4:	910d      	str	r1, [sp, #52]	; 0x34
 800a2f6:	920c      	str	r2, [sp, #48]	; 0x30
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d042      	beq.n	800a382 <forward_dense+0x15e>
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	689c      	ldr	r4, [r3, #8]
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	f1ba 0f00 	cmp.w	sl, #0
 800a306:	d041      	beq.n	800a38c <forward_dense+0x168>
 800a308:	42b3      	cmp	r3, r6
 800a30a:	d229      	bcs.n	800a360 <forward_dense+0x13c>
 800a30c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a30e:	469b      	mov	fp, r3
 800a310:	ab0f      	add	r3, sp, #60	; 0x3c
 800a312:	2a04      	cmp	r2, #4
 800a314:	9303      	str	r3, [sp, #12]
 800a316:	4633      	mov	r3, r6
 800a318:	4646      	mov	r6, r8
 800a31a:	4698      	mov	r8, r3
 800a31c:	f000 8154 	beq.w	800a5c8 <forward_dense+0x3a4>
 800a320:	2c00      	cmp	r4, #0
 800a322:	f000 8183 	beq.w	800a62c <forward_dense+0x408>
 800a326:	f8d4 c000 	ldr.w	ip, [r4]
 800a32a:	463b      	mov	r3, r7
 800a32c:	4629      	mov	r1, r5
 800a32e:	9600      	str	r6, [sp, #0]
 800a330:	4652      	mov	r2, sl
 800a332:	9803      	ldr	r0, [sp, #12]
 800a334:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a338:	f7ff fc86 	bl	8009c48 <ai_dict8_dot_array_f32>
 800a33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a33e:	3404      	adds	r4, #4
 800a340:	444d      	add	r5, r9
 800a342:	f84b 3b04 	str.w	r3, [fp], #4
 800a346:	45c3      	cmp	fp, r8
 800a348:	d3ea      	bcc.n	800a320 <forward_dense+0xfc>
 800a34a:	4643      	mov	r3, r8
 800a34c:	46b0      	mov	r8, r6
 800a34e:	461e      	mov	r6, r3
 800a350:	9a04      	ldr	r2, [sp, #16]
 800a352:	43d3      	mvns	r3, r2
 800a354:	4433      	add	r3, r6
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	3304      	adds	r3, #4
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a362:	9b05      	ldr	r3, [sp, #20]
 800a364:	4417      	add	r7, r2
 800a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a368:	3301      	adds	r3, #1
 800a36a:	4416      	add	r6, r2
 800a36c:	9a07      	ldr	r2, [sp, #28]
 800a36e:	9305      	str	r3, [sp, #20]
 800a370:	4293      	cmp	r3, r2
 800a372:	f000 8170 	beq.w	800a656 <forward_dense+0x432>
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	689d      	ldr	r5, [r3, #8]
 800a37c:	9b06      	ldr	r3, [sp, #24]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1bc      	bne.n	800a2fc <forward_dense+0xd8>
 800a382:	461c      	mov	r4, r3
 800a384:	9b04      	ldr	r3, [sp, #16]
 800a386:	f1ba 0f00 	cmp.w	sl, #0
 800a38a:	d1bd      	bne.n	800a308 <forward_dense+0xe4>
 800a38c:	42b3      	cmp	r3, r6
 800a38e:	d2e7      	bcs.n	800a360 <forward_dense+0x13c>
 800a390:	4618      	mov	r0, r3
 800a392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a394:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800a398:	eb07 0c03 	add.w	ip, r7, r3
 800a39c:	469e      	mov	lr, r3
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	f000 80fe 	beq.w	800a5a0 <forward_dense+0x37c>
 800a3a4:	f1b8 0f0f 	cmp.w	r8, #15
 800a3a8:	ed94 6a00 	vldr	s12, [r4]
 800a3ac:	f104 0404 	add.w	r4, r4, #4
 800a3b0:	f240 80fc 	bls.w	800a5ac <forward_dense+0x388>
 800a3b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a3b8:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800a3bc:	4641      	mov	r1, r8
 800a3be:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800a628 <forward_dense+0x404>
 800a3c2:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800a3c6:	3910      	subs	r1, #16
 800a3c8:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800a3cc:	3240      	adds	r2, #64	; 0x40
 800a3ce:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800a3d2:	290f      	cmp	r1, #15
 800a3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d8:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800a3dc:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800a3e0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a3e4:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800a3e8:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a3ec:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800a3f0:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800a3f4:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800a3f8:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800a3fc:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800a400:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800a404:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a408:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a40c:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a410:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a414:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a418:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800a41c:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800a420:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a424:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800a428:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800a42c:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800a430:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800a434:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800a438:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800a43c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a440:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800a444:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800a448:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800a44c:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800a450:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800a454:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800a458:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a45c:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800a460:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800a464:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a468:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a46c:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a470:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a474:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a478:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a47c:	eee2 7a03 	vfma.f32	s15, s4, s6
 800a480:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a484:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a488:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a48c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a490:	d897      	bhi.n	800a3c2 <forward_dense+0x19e>
 800a492:	eb05 010e 	add.w	r1, r5, lr
 800a496:	465b      	mov	r3, fp
 800a498:	4662      	mov	r2, ip
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d075      	beq.n	800a58a <forward_dense+0x366>
 800a49e:	ed91 7a00 	vldr	s14, [r1]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	edd2 7a00 	vldr	s15, [r2]
 800a4a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4ac:	d06d      	beq.n	800a58a <forward_dense+0x366>
 800a4ae:	ed91 7a01 	vldr	s14, [r1, #4]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	edd2 7a01 	vldr	s15, [r2, #4]
 800a4b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4bc:	d065      	beq.n	800a58a <forward_dense+0x366>
 800a4be:	ed91 7a02 	vldr	s14, [r1, #8]
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	edd2 7a02 	vldr	s15, [r2, #8]
 800a4c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4cc:	d05d      	beq.n	800a58a <forward_dense+0x366>
 800a4ce:	ed91 7a03 	vldr	s14, [r1, #12]
 800a4d2:	2b04      	cmp	r3, #4
 800a4d4:	edd2 7a03 	vldr	s15, [r2, #12]
 800a4d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4dc:	d055      	beq.n	800a58a <forward_dense+0x366>
 800a4de:	ed91 7a04 	vldr	s14, [r1, #16]
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	edd2 7a04 	vldr	s15, [r2, #16]
 800a4e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4ec:	d04d      	beq.n	800a58a <forward_dense+0x366>
 800a4ee:	ed91 7a05 	vldr	s14, [r1, #20]
 800a4f2:	2b06      	cmp	r3, #6
 800a4f4:	edd2 7a05 	vldr	s15, [r2, #20]
 800a4f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4fc:	d045      	beq.n	800a58a <forward_dense+0x366>
 800a4fe:	ed91 7a06 	vldr	s14, [r1, #24]
 800a502:	2b07      	cmp	r3, #7
 800a504:	edd2 7a06 	vldr	s15, [r2, #24]
 800a508:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a50c:	d03d      	beq.n	800a58a <forward_dense+0x366>
 800a50e:	ed91 7a07 	vldr	s14, [r1, #28]
 800a512:	2b08      	cmp	r3, #8
 800a514:	edd2 7a07 	vldr	s15, [r2, #28]
 800a518:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a51c:	d035      	beq.n	800a58a <forward_dense+0x366>
 800a51e:	ed91 7a08 	vldr	s14, [r1, #32]
 800a522:	2b09      	cmp	r3, #9
 800a524:	edd2 7a08 	vldr	s15, [r2, #32]
 800a528:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a52c:	d02d      	beq.n	800a58a <forward_dense+0x366>
 800a52e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a532:	2b0a      	cmp	r3, #10
 800a534:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a538:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a53c:	d025      	beq.n	800a58a <forward_dense+0x366>
 800a53e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a542:	2b0b      	cmp	r3, #11
 800a544:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a548:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a54c:	d01d      	beq.n	800a58a <forward_dense+0x366>
 800a54e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a552:	2b0c      	cmp	r3, #12
 800a554:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a558:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a55c:	d015      	beq.n	800a58a <forward_dense+0x366>
 800a55e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a562:	2b0d      	cmp	r3, #13
 800a564:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a568:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a56c:	d00d      	beq.n	800a58a <forward_dense+0x366>
 800a56e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a572:	2b0e      	cmp	r3, #14
 800a574:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a578:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a57c:	d005      	beq.n	800a58a <forward_dense+0x366>
 800a57e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a582:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a586:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a58a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a58e:	444d      	add	r5, r9
 800a590:	ece0 6a01 	vstmia	r0!, {s13}
 800a594:	42b0      	cmp	r0, r6
 800a596:	f4bf aedb 	bcs.w	800a350 <forward_dense+0x12c>
 800a59a:	2c00      	cmp	r4, #0
 800a59c:	f47f af02 	bne.w	800a3a4 <forward_dense+0x180>
 800a5a0:	f1b8 0f0f 	cmp.w	r8, #15
 800a5a4:	eeb0 6a62 	vmov.f32	s12, s5
 800a5a8:	f63f af04 	bhi.w	800a3b4 <forward_dense+0x190>
 800a5ac:	4643      	mov	r3, r8
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	463a      	mov	r2, r7
 800a5b2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800a628 <forward_dense+0x404>
 800a5b6:	e770      	b.n	800a49a <forward_dense+0x276>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	deff      	udf	#255	; 0xff
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	deff      	udf	#255	; 0xff
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	deff      	udf	#255	; 0xff
 800a5c8:	b1a4      	cbz	r4, 800a5f4 <forward_dense+0x3d0>
 800a5ca:	f8d4 c000 	ldr.w	ip, [r4]
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	9600      	str	r6, [sp, #0]
 800a5d4:	4652      	mov	r2, sl
 800a5d6:	9803      	ldr	r0, [sp, #12]
 800a5d8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a5dc:	f7ff fd64 	bl	800a0a8 <ai_dict4_dot_array_f32>
 800a5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e2:	3404      	adds	r4, #4
 800a5e4:	444d      	add	r5, r9
 800a5e6:	f84b 3b04 	str.w	r3, [fp], #4
 800a5ea:	45c3      	cmp	fp, r8
 800a5ec:	f4bf aead 	bcs.w	800a34a <forward_dense+0x126>
 800a5f0:	2c00      	cmp	r4, #0
 800a5f2:	d1ea      	bne.n	800a5ca <forward_dense+0x3a6>
 800a5f4:	4634      	mov	r4, r6
 800a5f6:	4646      	mov	r6, r8
 800a5f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a5fc:	463b      	mov	r3, r7
 800a5fe:	4629      	mov	r1, r5
 800a600:	9400      	str	r4, [sp, #0]
 800a602:	4652      	mov	r2, sl
 800a604:	4640      	mov	r0, r8
 800a606:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a60a:	f7ff fd4d 	bl	800a0a8 <ai_dict4_dot_array_f32>
 800a60e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a610:	444d      	add	r5, r9
 800a612:	f84b 3b04 	str.w	r3, [fp], #4
 800a616:	45b3      	cmp	fp, r6
 800a618:	d3f0      	bcc.n	800a5fc <forward_dense+0x3d8>
 800a61a:	46a0      	mov	r8, r4
 800a61c:	e698      	b.n	800a350 <forward_dense+0x12c>
 800a61e:	9006      	str	r0, [sp, #24]
 800a620:	e62a      	b.n	800a278 <forward_dense+0x54>
 800a622:	9306      	str	r3, [sp, #24]
 800a624:	e628      	b.n	800a278 <forward_dense+0x54>
 800a626:	bf00      	nop
 800a628:	00000000 	.word	0x00000000
 800a62c:	4634      	mov	r4, r6
 800a62e:	4646      	mov	r6, r8
 800a630:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a634:	463b      	mov	r3, r7
 800a636:	4629      	mov	r1, r5
 800a638:	9400      	str	r4, [sp, #0]
 800a63a:	4652      	mov	r2, sl
 800a63c:	4640      	mov	r0, r8
 800a63e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800a642:	f7ff fb01 	bl	8009c48 <ai_dict8_dot_array_f32>
 800a646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a648:	444d      	add	r5, r9
 800a64a:	f84b 3b04 	str.w	r3, [fp], #4
 800a64e:	45b3      	cmp	fp, r6
 800a650:	d3f0      	bcc.n	800a634 <forward_dense+0x410>
 800a652:	46a0      	mov	r8, r4
 800a654:	e67c      	b.n	800a350 <forward_dense+0x12c>
 800a656:	b011      	add	sp, #68	; 0x44
 800a658:	ecbd 8b08 	vpop	{d8-d11}
 800a65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a660:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800a664:	e626      	b.n	800a2b4 <forward_dense+0x90>
 800a666:	2300      	movs	r3, #0
 800a668:	9306      	str	r3, [sp, #24]
 800a66a:	e605      	b.n	800a278 <forward_dense+0x54>
 800a66c:	9308      	str	r3, [sp, #32]
 800a66e:	e5f6      	b.n	800a25e <forward_dense+0x3a>

0800a670 <func_dummy>:
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop

0800a674 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	6943      	ldr	r3, [r0, #20]
 800a67a:	b0d1      	sub	sp, #324	; 0x144
 800a67c:	881c      	ldrh	r4, [r3, #0]
 800a67e:	b1ec      	cbz	r4, 800a6bc <forward_conv2d_nl_pool_integer_SSSA_ch+0x48>
 800a680:	6859      	ldr	r1, [r3, #4]
 800a682:	684f      	ldr	r7, [r1, #4]
 800a684:	b107      	cbz	r7, 800a688 <forward_conv2d_nl_pool_integer_SSSA_ch+0x14>
 800a686:	683f      	ldr	r7, [r7, #0]
 800a688:	2c01      	cmp	r4, #1
 800a68a:	d914      	bls.n	800a6b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42>
 800a68c:	690b      	ldr	r3, [r1, #16]
 800a68e:	b1bb      	cbz	r3, 800a6c0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4c>
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	9318      	str	r3, [sp, #96]	; 0x60
 800a694:	2c02      	cmp	r4, #2
 800a696:	d00e      	beq.n	800a6b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42>
 800a698:	69ca      	ldr	r2, [r1, #28]
 800a69a:	b19a      	cbz	r2, 800a6c4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50>
 800a69c:	6813      	ldr	r3, [r2, #0]
 800a69e:	f111 0518 	adds.w	r5, r1, #24
 800a6a2:	f000 8317 	beq.w	800acd4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x660>
 800a6a6:	8b0d      	ldrh	r5, [r1, #24]
 800a6a8:	2d01      	cmp	r5, #1
 800a6aa:	f240 8313 	bls.w	800acd4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x660>
 800a6ae:	b15a      	cbz	r2, 800a6c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 800a6b0:	f8d2 b004 	ldr.w	fp, [r2, #4]
 800a6b4:	e009      	b.n	800a6ca <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	deff      	udf	#255	; 0xff
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	deff      	udf	#255	; 0xff
 800a6c0:	9318      	str	r3, [sp, #96]	; 0x60
 800a6c2:	e7e7      	b.n	800a694 <forward_conv2d_nl_pool_integer_SSSA_ch+0x20>
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	e7ea      	b.n	800a69e <forward_conv2d_nl_pool_integer_SSSA_ch+0x2a>
 800a6c8:	4693      	mov	fp, r2
 800a6ca:	2c03      	cmp	r4, #3
 800a6cc:	d0f3      	beq.n	800a6b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42>
 800a6ce:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800a6d0:	2900      	cmp	r1, #0
 800a6d2:	f000 815c 	beq.w	800a98e <forward_conv2d_nl_pool_integer_SSSA_ch+0x31a>
 800a6d6:	6a02      	ldr	r2, [r0, #32]
 800a6d8:	680c      	ldr	r4, [r1, #0]
 800a6da:	922e      	str	r2, [sp, #184]	; 0xb8
 800a6dc:	9419      	str	r4, [sp, #100]	; 0x64
 800a6de:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	f000 82f9 	beq.w	800acda <forward_conv2d_nl_pool_integer_SSSA_ch+0x666>
 800a6e8:	688a      	ldr	r2, [r1, #8]
 800a6ea:	921d      	str	r2, [sp, #116]	; 0x74
 800a6ec:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a6f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a6f2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a6f6:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a6fa:	9414      	str	r4, [sp, #80]	; 0x50
 800a6fc:	b2a4      	uxth	r4, r4
 800a6fe:	6849      	ldr	r1, [r1, #4]
 800a700:	941f      	str	r4, [sp, #124]	; 0x7c
 800a702:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a704:	6816      	ldr	r6, [r2, #0]
 800a706:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800a70a:	9116      	str	r1, [sp, #88]	; 0x58
 800a70c:	b289      	uxth	r1, r1
 800a70e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a710:	9115      	str	r1, [sp, #84]	; 0x54
 800a712:	b2b1      	uxth	r1, r6
 800a714:	e9dc 5802 	ldrd	r5, r8, [ip, #8]
 800a718:	9113      	str	r1, [sp, #76]	; 0x4c
 800a71a:	b2a1      	uxth	r1, r4
 800a71c:	952d      	str	r5, [sp, #180]	; 0xb4
 800a71e:	8895      	ldrh	r5, [r2, #4]
 800a720:	9121      	str	r1, [sp, #132]	; 0x84
 800a722:	9522      	str	r5, [sp, #136]	; 0x88
 800a724:	f8d9 500c 	ldr.w	r5, [r9, #12]
 800a728:	69c1      	ldr	r1, [r0, #28]
 800a72a:	9530      	str	r5, [sp, #192]	; 0xc0
 800a72c:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a730:	6892      	ldr	r2, [r2, #8]
 800a732:	9537      	str	r5, [sp, #220]	; 0xdc
 800a734:	68dd      	ldr	r5, [r3, #12]
 800a736:	68ad      	ldr	r5, [r5, #8]
 800a738:	9517      	str	r5, [sp, #92]	; 0x5c
 800a73a:	68dd      	ldr	r5, [r3, #12]
 800a73c:	686d      	ldr	r5, [r5, #4]
 800a73e:	9526      	str	r5, [sp, #152]	; 0x98
 800a740:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800a742:	682d      	ldr	r5, [r5, #0]
 800a744:	9529      	str	r5, [sp, #164]	; 0xa4
 800a746:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800a748:	686d      	ldr	r5, [r5, #4]
 800a74a:	953a      	str	r5, [sp, #232]	; 0xe8
 800a74c:	8c85      	ldrh	r5, [r0, #36]	; 0x24
 800a74e:	9520      	str	r5, [sp, #128]	; 0x80
 800a750:	6985      	ldr	r5, [r0, #24]
 800a752:	9527      	str	r5, [sp, #156]	; 0x9c
 800a754:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800a756:	9538      	str	r5, [sp, #224]	; 0xe0
 800a758:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800a75a:	9539      	str	r5, [sp, #228]	; 0xe4
 800a75c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800a75e:	9528      	str	r5, [sp, #160]	; 0xa0
 800a760:	2900      	cmp	r1, #0
 800a762:	f000 8299 	beq.w	800ac98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x624>
 800a766:	6889      	ldr	r1, [r1, #8]
 800a768:	9132      	str	r1, [sp, #200]	; 0xc8
 800a76a:	fa1f fe86 	uxth.w	lr, r6
 800a76e:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 800a772:	9024      	str	r0, [sp, #144]	; 0x90
 800a774:	a93d      	add	r1, sp, #244	; 0xf4
 800a776:	fa1e f082 	uxtah	r0, lr, r2
 800a77a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a77c:	f8cd c138 	str.w	ip, [sp, #312]	; 0x138
 800a780:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
 800a784:	69ad      	ldr	r5, [r5, #24]
 800a786:	4440      	add	r0, r8
 800a788:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a78a:	44c6      	add	lr, r8
 800a78c:	f8cd c128 	str.w	ip, [sp, #296]	; 0x128
 800a790:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800a794:	1a82      	subs	r2, r0, r2
 800a796:	931a      	str	r3, [sp, #104]	; 0x68
 800a798:	9531      	str	r5, [sp, #196]	; 0xc4
 800a79a:	b2a3      	uxth	r3, r4
 800a79c:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
 800a7a0:	f240 4c01 	movw	ip, #1025	; 0x401
 800a7a4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a7a6:	f50d 798a 	add.w	r9, sp, #276	; 0x114
 800a7aa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800a7ac:	a849      	add	r0, sp, #292	; 0x124
 800a7ae:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800a7b0:	f8cd c134 	str.w	ip, [sp, #308]	; 0x134
 800a7b4:	69a6      	ldr	r6, [r4, #24]
 800a7b6:	2400      	movs	r4, #0
 800a7b8:	952a      	str	r5, [sp, #168]	; 0xa8
 800a7ba:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a7bc:	f8da 8018 	ldr.w	r8, [sl, #24]
 800a7c0:	f8cd e094 	str.w	lr, [sp, #148]	; 0x94
 800a7c4:	931e      	str	r3, [sp, #120]	; 0x78
 800a7c6:	9449      	str	r4, [sp, #292]	; 0x124
 800a7c8:	943d      	str	r4, [sp, #244]	; 0xf4
 800a7ca:	9441      	str	r4, [sp, #260]	; 0x104
 800a7cc:	914c      	str	r1, [sp, #304]	; 0x130
 800a7ce:	9442      	str	r4, [sp, #264]	; 0x108
 800a7d0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a7d2:	9440      	str	r4, [sp, #256]	; 0x100
 800a7d4:	944f      	str	r4, [sp, #316]	; 0x13c
 800a7d6:	9443      	str	r4, [sp, #268]	; 0x10c
 800a7d8:	9444      	str	r4, [sp, #272]	; 0x110
 800a7da:	fbb2 fcf3 	udiv	ip, r2, r3
 800a7de:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
 800a7e2:	f10c 0301 	add.w	r3, ip, #1
 800a7e6:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
 800a7ea:	6d6d      	ldr	r5, [r5, #84]	; 0x54
 800a7ec:	932c      	str	r3, [sp, #176]	; 0xb0
 800a7ee:	953b      	str	r5, [sp, #236]	; 0xec
 800a7f0:	f003 fff8 	bl	800e7e4 <core_tensor_clone>
 800a7f4:	4648      	mov	r0, r9
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	f004 f826 	bl	800e848 <core_array_clone>
 800a7fc:	f8cd 913c 	str.w	r9, [sp, #316]	; 0x13c
 800a800:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a802:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a806:	6999      	ldr	r1, [r3, #24]
 800a808:	6893      	ldr	r3, [r2, #8]
 800a80a:	6838      	ldr	r0, [r7, #0]
 800a80c:	9319      	str	r3, [sp, #100]	; 0x64
 800a80e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a810:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	f8da 1000 	ldr.w	r1, [sl]
 800a81a:	922b      	str	r2, [sp, #172]	; 0xac
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f000 80b8 	beq.w	800a992 <forward_conv2d_nl_pool_integer_SSSA_ch+0x31e>
 800a822:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a826:	f1bc 0f00 	cmp.w	ip, #0
 800a82a:	f000 80b2 	beq.w	800a992 <forward_conv2d_nl_pool_integer_SSSA_ch+0x31e>
 800a82e:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 800a832:	f1be 0f00 	cmp.w	lr, #0
 800a836:	f000 80ac 	beq.w	800a992 <forward_conv2d_nl_pool_integer_SSSA_ch+0x31e>
 800a83a:	f8dc c000 	ldr.w	ip, [ip]
 800a83e:	ed9c 0a00 	vldr	s0, [ip]
 800a842:	2900      	cmp	r1, #0
 800a844:	f000 80aa 	beq.w	800a99c <forward_conv2d_nl_pool_integer_SSSA_ch+0x328>
 800a848:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800a84c:	f1bc 0f00 	cmp.w	ip, #0
 800a850:	f000 80a4 	beq.w	800a99c <forward_conv2d_nl_pool_integer_SSSA_ch+0x328>
 800a854:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 800a858:	f1be 0f00 	cmp.w	lr, #0
 800a85c:	f000 809e 	beq.w	800a99c <forward_conv2d_nl_pool_integer_SSSA_ch+0x328>
 800a860:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a862:	f8dc c000 	ldr.w	ip, [ip]
 800a866:	2a01      	cmp	r2, #1
 800a868:	eddc 0a00 	vldr	s1, [ip]
 800a86c:	f040 809c 	bne.w	800a9a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x334>
 800a870:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a872:	2a01      	cmp	r2, #1
 800a874:	f040 8098 	bne.w	800a9a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x334>
 800a878:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a87a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a87c:	432a      	orrs	r2, r5
 800a87e:	f040 8093 	bne.w	800a9a8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x334>
 800a882:	e9dd 2520 	ldrd	r2, r5, [sp, #128]	; 0x80
 800a886:	2a01      	cmp	r2, #1
 800a888:	bf08      	it	eq
 800a88a:	2d01      	cmpeq	r5, #1
 800a88c:	bf0c      	ite	eq
 800a88e:	f04f 0c01 	moveq.w	ip, #1
 800a892:	f04f 0c00 	movne.w	ip, #0
 800a896:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	921c      	str	r2, [sp, #112]	; 0x70
 800a89e:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	921b      	str	r2, [sp, #108]	; 0x6c
 800a8a6:	f8db 2018 	ldr.w	r2, [fp, #24]
 800a8aa:	69bf      	ldr	r7, [r7, #24]
 800a8ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ae:	6893      	ldr	r3, [r2, #8]
 800a8b0:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800a8b4:	9323      	str	r3, [sp, #140]	; 0x8c
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f000 81d9 	beq.w	800ac6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x5fa>
 800a8bc:	6843      	ldr	r3, [r0, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 81f0 	beq.w	800aca4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x630>
 800a8c4:	8842      	ldrh	r2, [r0, #2]
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	f000 81ea 	beq.w	800aca0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x62c>
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f993 3000 	ldrsb.w	r3, [r3]
 800a8d2:	9314      	str	r3, [sp, #80]	; 0x50
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	f000 81ce 	beq.w	800ac76 <forward_conv2d_nl_pool_integer_SSSA_ch+0x602>
 800a8da:	684b      	ldr	r3, [r1, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 8201 	beq.w	800ace4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x670>
 800a8e2:	884a      	ldrh	r2, [r1, #2]
 800a8e4:	2a00      	cmp	r2, #0
 800a8e6:	f000 81d9 	beq.w	800ac9c <forward_conv2d_nl_pool_integer_SSSA_ch+0x628>
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f993 3000 	ldrsb.w	r3, [r3]
 800a8f0:	9316      	str	r3, [sp, #88]	; 0x58
 800a8f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 81c3 	beq.w	800ac80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60c>
 800a8fa:	6858      	ldr	r0, [r3, #4]
 800a8fc:	b100      	cbz	r0, 800a900 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 800a8fe:	6800      	ldr	r0, [r0, #0]
 800a900:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a902:	2b01      	cmp	r3, #1
 800a904:	f000 81c1 	beq.w	800ac8a <forward_conv2d_nl_pool_integer_SSSA_ch+0x616>
 800a908:	461a      	mov	r2, r3
 800a90a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a90c:	4293      	cmp	r3, r2
 800a90e:	bf0c      	ite	eq
 800a910:	2317      	moveq	r3, #23
 800a912:	2300      	movne	r3, #0
 800a914:	9333      	str	r3, [sp, #204]	; 0xcc
 800a916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a918:	464a      	mov	r2, r9
 800a91a:	eb09 0183 	add.w	r1, r9, r3, lsl #2
 800a91e:	912b      	str	r1, [sp, #172]	; 0xac
 800a920:	460b      	mov	r3, r1
 800a922:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a924:	f001 f85e 	bl	800b9e4 <align_factor_ch>
 800a928:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800a92a:	2900      	cmp	r1, #0
 800a92c:	f000 80eb 	beq.w	800ab06 <forward_conv2d_nl_pool_integer_SSSA_ch+0x492>
 800a930:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a932:	2000      	movs	r0, #0
 800a934:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800a936:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a938:	fb01 f305 	mul.w	r3, r1, r5
 800a93c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a93e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a940:	fb05 f202 	mul.w	r2, r5, r2
 800a944:	9017      	str	r0, [sp, #92]	; 0x5c
 800a946:	922f      	str	r2, [sp, #188]	; 0xbc
 800a948:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800a94c:	921b      	str	r2, [sp, #108]	; 0x6c
 800a94e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a950:	fb02 f303 	mul.w	r3, r2, r3
 800a954:	fb01 f202 	mul.w	r2, r1, r2
 800a958:	9335      	str	r3, [sp, #212]	; 0xd4
 800a95a:	b2bb      	uxth	r3, r7
 800a95c:	9236      	str	r2, [sp, #216]	; 0xd8
 800a95e:	931c      	str	r3, [sp, #112]	; 0x70
 800a960:	b28b      	uxth	r3, r1
 800a962:	932d      	str	r3, [sp, #180]	; 0xb4
 800a964:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 800a968:	9334      	str	r3, [sp, #208]	; 0xd0
 800a96a:	464b      	mov	r3, r9
 800a96c:	46b9      	mov	r9, r7
 800a96e:	461f      	mov	r7, r3
 800a970:	e9cd 4026 	strd	r4, r0, [sp, #152]	; 0x98
 800a974:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a976:	2b00      	cmp	r3, #0
 800a978:	dd5b      	ble.n	800aa32 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3be>
 800a97a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800a97c:	2b17      	cmp	r3, #23
 800a97e:	f000 8147 	beq.w	800ac10 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59c>
 800a982:	2b18      	cmp	r3, #24
 800a984:	f000 80f5 	beq.w	800ab72 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 800a988:	2b16      	cmp	r3, #22
 800a98a:	d010      	beq.n	800a9ae <forward_conv2d_nl_pool_integer_SSSA_ch+0x33a>
 800a98c:	e7fe      	b.n	800a98c <forward_conv2d_nl_pool_integer_SSSA_ch+0x318>
 800a98e:	68cb      	ldr	r3, [r1, #12]
 800a990:	deff      	udf	#255	; 0xff
 800a992:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 800ac0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x598>
 800a996:	2900      	cmp	r1, #0
 800a998:	f47f af56 	bne.w	800a848 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1d4>
 800a99c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a99e:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800ac0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x598>
 800a9a2:	2a01      	cmp	r2, #1
 800a9a4:	f43f af64 	beq.w	800a870 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1fc>
 800a9a8:	f04f 0c00 	mov.w	ip, #0
 800a9ac:	e773      	b.n	800a896 <forward_conv2d_nl_pool_integer_SSSA_ch+0x222>
 800a9ae:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a9b6:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9b8:	fa1f f289 	uxth.w	r2, r9
 800a9bc:	910e      	str	r1, [sp, #56]	; 0x38
 800a9be:	9710      	str	r7, [sp, #64]	; 0x40
 800a9c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a9c4:	950c      	str	r5, [sp, #48]	; 0x30
 800a9c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a9c8:	900d      	str	r0, [sp, #52]	; 0x34
 800a9ca:	4658      	mov	r0, fp
 800a9cc:	950b      	str	r5, [sp, #44]	; 0x2c
 800a9ce:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800a9d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9d2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a9d4:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
 800a9d8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800a9da:	9508      	str	r5, [sp, #32]
 800a9dc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800a9de:	9507      	str	r5, [sp, #28]
 800a9e0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a9e2:	9506      	str	r5, [sp, #24]
 800a9e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a9e6:	9505      	str	r5, [sp, #20]
 800a9e8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800a9ea:	9504      	str	r5, [sp, #16]
 800a9ec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a9ee:	9503      	str	r5, [sp, #12]
 800a9f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9f2:	9502      	str	r5, [sp, #8]
 800a9f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a9f6:	9501      	str	r5, [sp, #4]
 800a9f8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a9fa:	9500      	str	r5, [sp, #0]
 800a9fc:	f002 f8c2 	bl	800cb84 <st_sssa8_ch_convolve_1x1>
 800aa00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa02:	9925      	ldr	r1, [sp, #148]	; 0x94
 800aa04:	428b      	cmp	r3, r1
 800aa06:	f000 80e9 	beq.w	800abdc <forward_conv2d_nl_pool_integer_SSSA_ch+0x568>
 800aa0a:	1acb      	subs	r3, r1, r3
 800aa0c:	4599      	cmp	r9, r3
 800aa0e:	9325      	str	r3, [sp, #148]	; 0x94
 800aa10:	bf28      	it	cs
 800aa12:	4699      	movcs	r9, r3
 800aa14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f040 80e8 	bne.w	800abec <forward_conv2d_nl_pool_integer_SSSA_ch+0x578>
 800aa1c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800aa1e:	449b      	add	fp, r3
 800aa20:	3401      	adds	r4, #1
 800aa22:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800aa24:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800aa26:	4641      	mov	r1, r8
 800aa28:	4630      	mov	r0, r6
 800aa2a:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 800aa2c:	47a8      	blx	r5
 800aa2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800aa30:	b224      	sxth	r4, r4
 800aa32:	3b01      	subs	r3, #1
 800aa34:	932c      	str	r3, [sp, #176]	; 0xb0
 800aa36:	d472      	bmi.n	800ab1e <forward_conv2d_nl_pool_integer_SSSA_ch+0x4aa>
 800aa38:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	db38      	blt.n	800aab0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x43c>
 800aa3e:	f8bd c0a8 	ldrh.w	ip, [sp, #168]	; 0xa8
 800aa42:	2301      	movs	r3, #1
 800aa44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa46:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800aa48:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 800aa4c:	9208      	str	r2, [sp, #32]
 800aa4e:	ebac 0201 	sub.w	r2, ip, r1
 800aa52:	f8bd 10dc 	ldrh.w	r1, [sp, #220]	; 0xdc
 800aa56:	1a24      	subs	r4, r4, r0
 800aa58:	f8cd c004 	str.w	ip, [sp, #4]
 800aa5c:	b292      	uxth	r2, r2
 800aa5e:	f8bd c0e4 	ldrh.w	ip, [sp, #228]	; 0xe4
 800aa62:	b224      	sxth	r4, r4
 800aa64:	9005      	str	r0, [sp, #20]
 800aa66:	9307      	str	r3, [sp, #28]
 800aa68:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
 800aa6c:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
 800aa70:	9106      	str	r1, [sp, #24]
 800aa72:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 800aa76:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800aa78:	9100      	str	r1, [sp, #0]
 800aa7a:	f8cd c010 	str.w	ip, [sp, #16]
 800aa7e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800aa82:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800aa86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa88:	a849      	add	r0, sp, #292	; 0x124
 800aa8a:	47a8      	blx	r5
 800aa8c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800aa8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa90:	3501      	adds	r5, #1
 800aa92:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 800aa96:	6951      	ldr	r1, [r2, #20]
 800aa98:	9517      	str	r5, [sp, #92]	; 0x5c
 800aa9a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800aa9c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 800aa9e:	1aeb      	subs	r3, r5, r3
 800aaa0:	68c9      	ldr	r1, [r1, #12]
 800aaa2:	6882      	ldr	r2, [r0, #8]
 800aaa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aaa8:	440a      	add	r2, r1
 800aaaa:	b21b      	sxth	r3, r3
 800aaac:	6082      	str	r2, [r0, #8]
 800aaae:	9326      	str	r3, [sp, #152]	; 0x98
 800aab0:	f8da 3014 	ldr.w	r3, [sl, #20]
 800aab4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aabe:	f8c8 3008 	str.w	r3, [r8, #8]
 800aac2:	6a12      	ldr	r2, [r2, #32]
 800aac4:	b13a      	cbz	r2, 800aad6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x462>
 800aac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aac8:	695a      	ldr	r2, [r3, #20]
 800aaca:	68b3      	ldr	r3, [r6, #8]
 800aacc:	68d2      	ldr	r2, [r2, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	60b3      	str	r3, [r6, #8]
 800aad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aad6:	f8da 1014 	ldr.w	r1, [sl, #20]
 800aada:	f8da 200c 	ldr.w	r2, [sl, #12]
 800aade:	68c8      	ldr	r0, [r1, #12]
 800aae0:	68d2      	ldr	r2, [r2, #12]
 800aae2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800aae6:	fb00 1202 	mla	r2, r0, r2, r1
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d306      	bcc.n	800aafc <forward_conv2d_nl_pool_integer_SSSA_ch+0x488>
 800aaee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aaf0:	f8c8 1008 	str.w	r1, [r8, #8]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	b10b      	cbz	r3, 800aafc <forward_conv2d_nl_pool_integer_SSSA_ch+0x488>
 800aaf8:	68f3      	ldr	r3, [r6, #12]
 800aafa:	60b3      	str	r3, [r6, #8]
 800aafc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aafe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800ab00:	4293      	cmp	r3, r2
 800ab02:	f4ff af37 	bcc.w	800a974 <forward_conv2d_nl_pool_integer_SSSA_ch+0x300>
 800ab06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab0a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800ab0c:	f8c8 3008 	str.w	r3, [r8, #8]
 800ab10:	68f3      	ldr	r3, [r6, #12]
 800ab12:	60b3      	str	r3, [r6, #8]
 800ab14:	68d3      	ldr	r3, [r2, #12]
 800ab16:	6093      	str	r3, [r2, #8]
 800ab18:	b051      	add	sp, #324	; 0x144
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 800ab22:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800ab24:	fb03 2314 	mls	r3, r3, r4, r2
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	d901      	bls.n	800ab30 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4bc>
 800ab2c:	6870      	ldr	r0, [r6, #4]
 800ab2e:	4403      	add	r3, r0
 800ab30:	68d0      	ldr	r0, [r2, #12]
 800ab32:	4298      	cmp	r0, r3
 800ab34:	d212      	bcs.n	800ab5c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4e8>
 800ab36:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800ab38:	4284      	cmp	r4, r0
 800ab3a:	d00f      	beq.n	800ab5c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4e8>
 800ab3c:	6870      	ldr	r0, [r6, #4]
 800ab3e:	4401      	add	r1, r0
 800ab40:	428b      	cmp	r3, r1
 800ab42:	d20b      	bcs.n	800ab5c <forward_conv2d_nl_pool_integer_SSSA_ch+0x4e8>
 800ab44:	3a01      	subs	r2, #1
 800ab46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ab48:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ab4c:	f802 1f01 	strb.w	r1, [r2, #1]!
 800ab50:	68f1      	ldr	r1, [r6, #12]
 800ab52:	6870      	ldr	r0, [r6, #4]
 800ab54:	4401      	add	r1, r0
 800ab56:	428b      	cmp	r3, r1
 800ab58:	d3f6      	bcc.n	800ab48 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4d4>
 800ab5a:	9513      	str	r5, [sp, #76]	; 0x4c
 800ab5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ab5e:	b2a4      	uxth	r4, r4
 800ab60:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ab62:	4413      	add	r3, r2
 800ab64:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ab66:	1b1b      	subs	r3, r3, r4
 800ab68:	4414      	add	r4, r2
 800ab6a:	b21b      	sxth	r3, r3
 800ab6c:	b224      	sxth	r4, r4
 800ab6e:	9327      	str	r3, [sp, #156]	; 0x9c
 800ab70:	e762      	b.n	800aa38 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3c4>
 800ab72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d103      	bne.n	800ab80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800ab78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 8094 	beq.w	800aca8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x634>
 800ab80:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800ab84:	2201      	movs	r2, #1
 800ab86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ab88:	920f      	str	r2, [sp, #60]	; 0x3c
 800ab8a:	fa1f f289 	uxth.w	r2, r9
 800ab8e:	910e      	str	r1, [sp, #56]	; 0x38
 800ab90:	9710      	str	r7, [sp, #64]	; 0x40
 800ab92:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ab96:	950c      	str	r5, [sp, #48]	; 0x30
 800ab98:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ab9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab9c:	950b      	str	r5, [sp, #44]	; 0x2c
 800ab9e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800aba0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800aba2:	900d      	str	r0, [sp, #52]	; 0x34
 800aba4:	4658      	mov	r0, fp
 800aba6:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
 800abaa:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800abac:	9508      	str	r5, [sp, #32]
 800abae:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800abb0:	9507      	str	r5, [sp, #28]
 800abb2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800abb4:	9506      	str	r5, [sp, #24]
 800abb6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800abb8:	9505      	str	r5, [sp, #20]
 800abba:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800abbc:	9504      	str	r5, [sp, #16]
 800abbe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800abc0:	9503      	str	r5, [sp, #12]
 800abc2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800abc4:	9502      	str	r5, [sp, #8]
 800abc6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800abc8:	9501      	str	r5, [sp, #4]
 800abca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800abcc:	9500      	str	r5, [sp, #0]
 800abce:	f001 fdab 	bl	800c728 <st_sssa8_ch_convolve>
 800abd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800abd4:	9925      	ldr	r1, [sp, #148]	; 0x94
 800abd6:	428b      	cmp	r3, r1
 800abd8:	f47f af17 	bne.w	800aa0a <forward_conv2d_nl_pool_integer_SSSA_ch+0x396>
 800abdc:	f04f 0900 	mov.w	r9, #0
 800abe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abe2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f43f af18 	beq.w	800aa1c <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a8>
 800abec:	461a      	mov	r2, r3
 800abee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	d505      	bpl.n	800ac00 <forward_conv2d_nl_pool_integer_SSSA_ch+0x58c>
 800abf4:	4611      	mov	r1, r2
 800abf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800abf8:	1a55      	subs	r5, r2, r1
 800abfa:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800abfc:	fb02 bb05 	mla	fp, r2, r5, fp
 800ac00:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 800ac04:	b2ab      	uxth	r3, r5
 800ac06:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac08:	e70a      	b.n	800aa20 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ac>
 800ac0a:	bf00      	nop
 800ac0c:	00000000 	.word	0x00000000
 800ac10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac12:	b913      	cbnz	r3, 800ac1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a6>
 800ac14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800ac16:	429c      	cmp	r4, r3
 800ac18:	d054      	beq.n	800acc4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x650>
 800ac1a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800ac1e:	2201      	movs	r2, #1
 800ac20:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ac22:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac24:	fa1f f289 	uxth.w	r2, r9
 800ac28:	910e      	str	r1, [sp, #56]	; 0x38
 800ac2a:	9710      	str	r7, [sp, #64]	; 0x40
 800ac2c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800ac30:	950c      	str	r5, [sp, #48]	; 0x30
 800ac32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ac34:	900d      	str	r0, [sp, #52]	; 0x34
 800ac36:	4658      	mov	r0, fp
 800ac38:	950b      	str	r5, [sp, #44]	; 0x2c
 800ac3a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ac3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac3e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ac40:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
 800ac44:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800ac46:	9508      	str	r5, [sp, #32]
 800ac48:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800ac4a:	9507      	str	r5, [sp, #28]
 800ac4c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ac4e:	9506      	str	r5, [sp, #24]
 800ac50:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ac52:	9505      	str	r5, [sp, #20]
 800ac54:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800ac56:	9504      	str	r5, [sp, #16]
 800ac58:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ac5a:	9503      	str	r5, [sp, #12]
 800ac5c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ac5e:	9502      	str	r5, [sp, #8]
 800ac60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ac62:	9501      	str	r5, [sp, #4]
 800ac64:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ac66:	9500      	str	r5, [sp, #0]
 800ac68:	f000 ffce 	bl	800bc08 <st_sssa8_ch_convolve_dw>
 800ac6c:	e6c8      	b.n	800aa00 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38c>
 800ac6e:	9014      	str	r0, [sp, #80]	; 0x50
 800ac70:	2900      	cmp	r1, #0
 800ac72:	f47f ae32 	bne.w	800a8da <forward_conv2d_nl_pool_integer_SSSA_ch+0x266>
 800ac76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800ac78:	9116      	str	r1, [sp, #88]	; 0x58
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f47f ae3d 	bne.w	800a8fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x286>
 800ac80:	4618      	mov	r0, r3
 800ac82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	f47f ae3f 	bne.w	800a908 <forward_conv2d_nl_pool_integer_SSSA_ch+0x294>
 800ac8a:	f1bc 0f00 	cmp.w	ip, #0
 800ac8e:	bf14      	ite	ne
 800ac90:	2316      	movne	r3, #22
 800ac92:	2318      	moveq	r3, #24
 800ac94:	9333      	str	r3, [sp, #204]	; 0xcc
 800ac96:	e63e      	b.n	800a916 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2a2>
 800ac98:	9132      	str	r1, [sp, #200]	; 0xc8
 800ac9a:	e566      	b.n	800a76a <forward_conv2d_nl_pool_integer_SSSA_ch+0xf6>
 800ac9c:	9216      	str	r2, [sp, #88]	; 0x58
 800ac9e:	e628      	b.n	800a8f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x27e>
 800aca0:	9214      	str	r2, [sp, #80]	; 0x50
 800aca2:	e617      	b.n	800a8d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x260>
 800aca4:	9314      	str	r3, [sp, #80]	; 0x50
 800aca6:	e615      	b.n	800a8d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x260>
 800aca8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acaa:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800acac:	981c      	ldr	r0, [sp, #112]	; 0x70
 800acae:	9202      	str	r2, [sp, #8]
 800acb0:	9101      	str	r1, [sp, #4]
 800acb2:	9000      	str	r0, [sp, #0]
 800acb4:	9703      	str	r7, [sp, #12]
 800acb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acba:	991a      	ldr	r1, [sp, #104]	; 0x68
 800acbc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800acbe:	f001 fcab 	bl	800c618 <st_sssa8_ch_convolve_rank1upd>
 800acc2:	e75d      	b.n	800ab80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50c>
 800acc4:	9700      	str	r7, [sp, #0]
 800acc6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800acc8:	981a      	ldr	r0, [sp, #104]	; 0x68
 800acca:	e9dd 231b 	ldrd	r2, r3, [sp, #108]	; 0x6c
 800acce:	f000 fee5 	bl	800ba9c <st_sssa8_ch_conv_dw_Wadapt>
 800acd2:	e7a2      	b.n	800ac1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a6>
 800acd4:	f04f 0b00 	mov.w	fp, #0
 800acd8:	e4f7      	b.n	800a6ca <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 800acda:	4a03      	ldr	r2, [pc, #12]	; (800ace8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x674>)
 800acdc:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
 800ace0:	922e      	str	r2, [sp, #184]	; 0xb8
 800ace2:	e503      	b.n	800a6ec <forward_conv2d_nl_pool_integer_SSSA_ch+0x78>
 800ace4:	9316      	str	r3, [sp, #88]	; 0x58
 800ace6:	e604      	b.n	800a8f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x27e>
 800ace8:	0800a671 	.word	0x0800a671

0800acec <forward_dense_integer_SSSA>:
 800acec:	6943      	ldr	r3, [r0, #20]
 800acee:	8818      	ldrh	r0, [r3, #0]
 800acf0:	2800      	cmp	r0, #0
 800acf2:	f000 80b2 	beq.w	800ae5a <forward_dense_integer_SSSA+0x16e>
 800acf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	685c      	ldr	r4, [r3, #4]
 800acfc:	b093      	sub	sp, #76	; 0x4c
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	b103      	cbz	r3, 800ad04 <forward_dense_integer_SSSA+0x18>
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2801      	cmp	r0, #1
 800ad06:	f240 809f 	bls.w	800ae48 <forward_dense_integer_SSSA+0x15c>
 800ad0a:	6922      	ldr	r2, [r4, #16]
 800ad0c:	b102      	cbz	r2, 800ad10 <forward_dense_integer_SSSA+0x24>
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	2802      	cmp	r0, #2
 800ad12:	f000 809f 	beq.w	800ae54 <forward_dense_integer_SSSA+0x168>
 800ad16:	69e5      	ldr	r5, [r4, #28]
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	f000 80ed 	beq.w	800aef8 <forward_dense_integer_SSSA+0x20c>
 800ad1e:	6829      	ldr	r1, [r5, #0]
 800ad20:	f114 0618 	adds.w	r6, r4, #24
 800ad24:	d007      	beq.n	800ad36 <forward_dense_integer_SSSA+0x4a>
 800ad26:	8b26      	ldrh	r6, [r4, #24]
 800ad28:	2e01      	cmp	r6, #1
 800ad2a:	f240 80d8 	bls.w	800aede <forward_dense_integer_SSSA+0x1f2>
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	f000 80cc 	beq.w	800aecc <forward_dense_integer_SSSA+0x1e0>
 800ad34:	686e      	ldr	r6, [r5, #4]
 800ad36:	2803      	cmp	r0, #3
 800ad38:	f000 8089 	beq.w	800ae4e <forward_dense_integer_SSSA+0x162>
 800ad3c:	68d0      	ldr	r0, [r2, #12]
 800ad3e:	68dd      	ldr	r5, [r3, #12]
 800ad40:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800ad44:	9509      	str	r5, [sp, #36]	; 0x24
 800ad46:	fa1f f58a 	uxth.w	r5, sl
 800ad4a:	69b7      	ldr	r7, [r6, #24]
 800ad4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad4e:	950f      	str	r5, [sp, #60]	; 0x3c
 800ad50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad52:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 800ad56:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800ad5a:	fb00 f904 	mul.w	r9, r0, r4
 800ad5e:	68bd      	ldr	r5, [r7, #8]
 800ad60:	fa1f f08b 	uxth.w	r0, fp
 800ad64:	699c      	ldr	r4, [r3, #24]
 800ad66:	950e      	str	r5, [sp, #56]	; 0x38
 800ad68:	900d      	str	r0, [sp, #52]	; 0x34
 800ad6a:	6990      	ldr	r0, [r2, #24]
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	f000 80c5 	beq.w	800aefc <forward_dense_integer_SSSA+0x210>
 800ad72:	6835      	ldr	r5, [r6, #0]
 800ad74:	2d00      	cmp	r5, #0
 800ad76:	f000 809d 	beq.w	800aeb4 <forward_dense_integer_SSSA+0x1c8>
 800ad7a:	69ad      	ldr	r5, [r5, #24]
 800ad7c:	68ad      	ldr	r5, [r5, #8]
 800ad7e:	9509      	str	r5, [sp, #36]	; 0x24
 800ad80:	681f      	ldr	r7, [r3, #0]
 800ad82:	698b      	ldr	r3, [r1, #24]
 800ad84:	6812      	ldr	r2, [r2, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	68a5      	ldr	r5, [r4, #8]
 800ad8a:	6886      	ldr	r6, [r0, #8]
 800ad8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad8e:	6809      	ldr	r1, [r1, #0]
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	d071      	beq.n	800ae78 <forward_dense_integer_SSSA+0x18c>
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	4604      	mov	r4, r0
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d060      	beq.n	800ae5e <forward_dense_integer_SSSA+0x172>
 800ad9c:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800ada0:	f1bc 0f00 	cmp.w	ip, #0
 800ada4:	f000 8088 	beq.w	800aeb8 <forward_dense_integer_SSSA+0x1cc>
 800ada8:	6803      	ldr	r3, [r0, #0]
 800adaa:	edd3 7a00 	vldr	s15, [r3]
 800adae:	2a00      	cmp	r2, #0
 800adb0:	f000 80ac 	beq.w	800af0c <forward_dense_integer_SSSA+0x220>
 800adb4:	6853      	ldr	r3, [r2, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 8081 	beq.w	800aebe <forward_dense_integer_SSSA+0x1d2>
 800adbc:	8850      	ldrh	r0, [r2, #2]
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d063      	beq.n	800ae8a <forward_dense_integer_SSSA+0x19e>
 800adc2:	681c      	ldr	r4, [r3, #0]
 800adc4:	ed94 0a00 	vldr	s0, [r4]
 800adc8:	2f00      	cmp	r7, #0
 800adca:	f040 808a 	bne.w	800aee2 <forward_dense_integer_SSSA+0x1f6>
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f993 3000 	ldrsb.w	r3, [r3]
 800add4:	930b      	str	r3, [sp, #44]	; 0x2c
 800add6:	2900      	cmp	r1, #0
 800add8:	d048      	beq.n	800ae6c <forward_dense_integer_SSSA+0x180>
 800adda:	684b      	ldr	r3, [r1, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d045      	beq.n	800ae6c <forward_dense_integer_SSSA+0x180>
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2400      	movs	r4, #0
 800ade4:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 800ade8:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 800adec:	9411      	str	r4, [sp, #68]	; 0x44
 800adee:	4640      	mov	r0, r8
 800adf0:	ed93 7a00 	vldr	s14, [r3]
 800adf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adf8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800adfc:	f000 fdb2 	bl	800b964 <align_factor>
 800ae00:	9011      	str	r0, [sp, #68]	; 0x44
 800ae02:	f1b9 0f00 	cmp.w	r9, #0
 800ae06:	d01c      	beq.n	800ae42 <forward_dense_integer_SSSA+0x156>
 800ae08:	fa1f fb8b 	uxth.w	fp, fp
 800ae0c:	970c      	str	r7, [sp, #48]	; 0x30
 800ae0e:	fa1f fa8a 	uxth.w	sl, sl
 800ae12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae14:	af11      	add	r7, sp, #68	; 0x44
 800ae16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae18:	3401      	adds	r4, #1
 800ae1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ae1c:	9103      	str	r1, [sp, #12]
 800ae1e:	9002      	str	r0, [sp, #8]
 800ae20:	4628      	mov	r0, r5
 800ae22:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae24:	445d      	add	r5, fp
 800ae26:	f8cd 8004 	str.w	r8, [sp, #4]
 800ae2a:	9700      	str	r7, [sp, #0]
 800ae2c:	e9cd 6305 	strd	r6, r3, [sp, #20]
 800ae30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ae34:	4456      	add	r6, sl
 800ae36:	9204      	str	r2, [sp, #16]
 800ae38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae3a:	f001 ff15 	bl	800cc68 <st_sssa8_fully_connected>
 800ae3e:	454c      	cmp	r4, r9
 800ae40:	d1e7      	bne.n	800ae12 <forward_dense_integer_SSSA+0x126>
 800ae42:	b013      	add	sp, #76	; 0x4c
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	2300      	movs	r3, #0
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	deff      	udf	#255	; 0xff
 800ae4e:	2300      	movs	r3, #0
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	deff      	udf	#255	; 0xff
 800ae54:	2300      	movs	r3, #0
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	deff      	udf	#255	; 0xff
 800ae5a:	6843      	ldr	r3, [r0, #4]
 800ae5c:	deff      	udf	#255	; 0xff
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	d036      	beq.n	800aed0 <forward_dense_integer_SSSA+0x1e4>
 800ae62:	6853      	ldr	r3, [r2, #4]
 800ae64:	b963      	cbnz	r3, 800ae80 <forward_dense_integer_SSSA+0x194>
 800ae66:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800ae6a:	e011      	b.n	800ae90 <forward_dense_integer_SSSA+0x1a4>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800ae72:	9311      	str	r3, [sp, #68]	; 0x44
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	deff      	udf	#255	; 0xff
 800ae78:	b352      	cbz	r2, 800aed0 <forward_dense_integer_SSSA+0x1e4>
 800ae7a:	6853      	ldr	r3, [r2, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d03f      	beq.n	800af00 <forward_dense_integer_SSSA+0x214>
 800ae80:	8850      	ldrh	r0, [r2, #2]
 800ae82:	eddf 7a25 	vldr	s15, [pc, #148]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d19b      	bne.n	800adc2 <forward_dense_integer_SSSA+0xd6>
 800ae8a:	2f00      	cmp	r7, #0
 800ae8c:	d03b      	beq.n	800af06 <forward_dense_integer_SSSA+0x21a>
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	4604      	mov	r4, r0
 800ae92:	b358      	cbz	r0, 800aeec <forward_dense_integer_SSSA+0x200>
 800ae94:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800ae98:	887f      	ldrh	r7, [r7, #2]
 800ae9a:	b127      	cbz	r7, 800aea6 <forward_dense_integer_SSSA+0x1ba>
 800ae9c:	6863      	ldr	r3, [r4, #4]
 800ae9e:	f993 7000 	ldrsb.w	r7, [r3]
 800aea2:	b33a      	cbz	r2, 800aef4 <forward_dense_integer_SSSA+0x208>
 800aea4:	6853      	ldr	r3, [r2, #4]
 800aea6:	b11b      	cbz	r3, 800aeb0 <forward_dense_integer_SSSA+0x1c4>
 800aea8:	8850      	ldrh	r0, [r2, #2]
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d18f      	bne.n	800adce <forward_dense_integer_SSSA+0xe2>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb2:	e790      	b.n	800add6 <forward_dense_integer_SSSA+0xea>
 800aeb4:	9509      	str	r5, [sp, #36]	; 0x24
 800aeb6:	e763      	b.n	800ad80 <forward_dense_integer_SSSA+0x94>
 800aeb8:	eddf 7a17 	vldr	s15, [pc, #92]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800aebc:	e777      	b.n	800adae <forward_dense_integer_SSSA+0xc2>
 800aebe:	2f00      	cmp	r7, #0
 800aec0:	d1e6      	bne.n	800ae90 <forward_dense_integer_SSSA+0x1a4>
 800aec2:	2700      	movs	r7, #0
 800aec4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800aec8:	970b      	str	r7, [sp, #44]	; 0x2c
 800aeca:	e784      	b.n	800add6 <forward_dense_integer_SSSA+0xea>
 800aecc:	462e      	mov	r6, r5
 800aece:	e732      	b.n	800ad36 <forward_dense_integer_SSSA+0x4a>
 800aed0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800aed4:	4617      	mov	r7, r2
 800aed6:	920b      	str	r2, [sp, #44]	; 0x2c
 800aed8:	eeb0 0a67 	vmov.f32	s0, s15
 800aedc:	e77b      	b.n	800add6 <forward_dense_integer_SSSA+0xea>
 800aede:	2600      	movs	r6, #0
 800aee0:	e729      	b.n	800ad36 <forward_dense_integer_SSSA+0x4a>
 800aee2:	687c      	ldr	r4, [r7, #4]
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	d1d7      	bne.n	800ae98 <forward_dense_integer_SSSA+0x1ac>
 800aee8:	4627      	mov	r7, r4
 800aeea:	e7de      	b.n	800aeaa <forward_dense_integer_SSSA+0x1be>
 800aeec:	4607      	mov	r7, r0
 800aeee:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800aef2:	e7d8      	b.n	800aea6 <forward_dense_integer_SSSA+0x1ba>
 800aef4:	920b      	str	r2, [sp, #44]	; 0x2c
 800aef6:	e76e      	b.n	800add6 <forward_dense_integer_SSSA+0xea>
 800aef8:	4629      	mov	r1, r5
 800aefa:	e711      	b.n	800ad20 <forward_dense_integer_SSSA+0x34>
 800aefc:	9609      	str	r6, [sp, #36]	; 0x24
 800aefe:	e73f      	b.n	800ad80 <forward_dense_integer_SSSA+0x94>
 800af00:	eddf 7a05 	vldr	s15, [pc, #20]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800af04:	e7dd      	b.n	800aec2 <forward_dense_integer_SSSA+0x1d6>
 800af06:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800af0a:	e7d0      	b.n	800aeae <forward_dense_integer_SSSA+0x1c2>
 800af0c:	f1bc 0f00 	cmp.w	ip, #0
 800af10:	d0d7      	beq.n	800aec2 <forward_dense_integer_SSSA+0x1d6>
 800af12:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af18 <forward_dense_integer_SSSA+0x22c>
 800af16:	e7c1      	b.n	800ae9c <forward_dense_integer_SSSA+0x1b0>
 800af18:	00000000 	.word	0x00000000

0800af1c <nl_func_relu_generic_array_f32>:
 800af1c:	b470      	push	{r4, r5, r6}
 800af1e:	edd3 6a02 	vldr	s13, [r3, #8]
 800af22:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800af26:	6880      	ldr	r0, [r0, #8]
 800af28:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800af2c:	4414      	add	r4, r2
 800af2e:	688d      	ldr	r5, [r1, #8]
 800af30:	00a4      	lsls	r4, r4, #2
 800af32:	ed93 7a00 	vldr	s14, [r3]
 800af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3a:	ed93 6a01 	vldr	s12, [r3, #4]
 800af3e:	eb00 0204 	add.w	r2, r0, r4
 800af42:	442c      	add	r4, r5
 800af44:	d420      	bmi.n	800af88 <nl_func_relu_generic_array_f32+0x6c>
 800af46:	42ac      	cmp	r4, r5
 800af48:	d33b      	bcc.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800af4a:	1d23      	adds	r3, r4, #4
 800af4c:	3204      	adds	r2, #4
 800af4e:	e010      	b.n	800af72 <nl_func_relu_generic_array_f32+0x56>
 800af50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800af54:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800af58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af5c:	dd01      	ble.n	800af62 <nl_func_relu_generic_array_f32+0x46>
 800af5e:	ee65 7a86 	vmul.f32	s15, s11, s12
 800af62:	f1a3 0408 	sub.w	r4, r3, #8
 800af66:	ed62 7a01 	vstmdb	r2!, {s15}
 800af6a:	4603      	mov	r3, r0
 800af6c:	6888      	ldr	r0, [r1, #8]
 800af6e:	4284      	cmp	r4, r0
 800af70:	d327      	bcc.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800af72:	ed53 7a01 	vldr	s15, [r3, #-4]
 800af76:	1f18      	subs	r0, r3, #4
 800af78:	eef4 6ae7 	vcmpe.f32	s13, s15
 800af7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af80:	dce6      	bgt.n	800af50 <nl_func_relu_generic_array_f32+0x34>
 800af82:	eef0 7a66 	vmov.f32	s15, s13
 800af86:	e7ec      	b.n	800af62 <nl_func_relu_generic_array_f32+0x46>
 800af88:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800af8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af90:	d019      	beq.n	800afc6 <nl_func_relu_generic_array_f32+0xaa>
 800af92:	42ac      	cmp	r4, r5
 800af94:	d315      	bcc.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800af96:	1d23      	adds	r3, r4, #4
 800af98:	3204      	adds	r2, #4
 800af9a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800af9e:	1f18      	subs	r0, r3, #4
 800afa0:	f1a3 0508 	sub.w	r5, r3, #8
 800afa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afa8:	4603      	mov	r3, r0
 800afaa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800afb6:	d51c      	bpl.n	800aff2 <nl_func_relu_generic_array_f32+0xd6>
 800afb8:	ed62 6a01 	vstmdb	r2!, {s13}
 800afbc:	6888      	ldr	r0, [r1, #8]
 800afbe:	42a8      	cmp	r0, r5
 800afc0:	d9eb      	bls.n	800af9a <nl_func_relu_generic_array_f32+0x7e>
 800afc2:	bc70      	pop	{r4, r5, r6}
 800afc4:	4770      	bx	lr
 800afc6:	42ac      	cmp	r4, r5
 800afc8:	d3fb      	bcc.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800afca:	1d23      	adds	r3, r4, #4
 800afcc:	3204      	adds	r2, #4
 800afce:	2600      	movs	r6, #0
 800afd0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800afd4:	1f18      	subs	r0, r3, #4
 800afd6:	f1a3 0508 	sub.w	r5, r3, #8
 800afda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afde:	4603      	mov	r3, r0
 800afe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe4:	d80b      	bhi.n	800affe <nl_func_relu_generic_array_f32+0xe2>
 800afe6:	ed62 7a01 	vstmdb	r2!, {s15}
 800afea:	6888      	ldr	r0, [r1, #8]
 800afec:	42a8      	cmp	r0, r5
 800afee:	d9ef      	bls.n	800afd0 <nl_func_relu_generic_array_f32+0xb4>
 800aff0:	e7e7      	b.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800aff2:	ed62 7a01 	vstmdb	r2!, {s15}
 800aff6:	6888      	ldr	r0, [r1, #8]
 800aff8:	42a8      	cmp	r0, r5
 800affa:	d9ce      	bls.n	800af9a <nl_func_relu_generic_array_f32+0x7e>
 800affc:	e7e1      	b.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800affe:	f842 6d04 	str.w	r6, [r2, #-4]!
 800b002:	6888      	ldr	r0, [r1, #8]
 800b004:	42a8      	cmp	r0, r5
 800b006:	d9e3      	bls.n	800afd0 <nl_func_relu_generic_array_f32+0xb4>
 800b008:	e7db      	b.n	800afc2 <nl_func_relu_generic_array_f32+0xa6>
 800b00a:	bf00      	nop

0800b00c <forward_relu>:
 800b00c:	6942      	ldr	r2, [r0, #20]
 800b00e:	8813      	ldrh	r3, [r2, #0]
 800b010:	b33b      	cbz	r3, 800b062 <forward_relu+0x56>
 800b012:	b4f0      	push	{r4, r5, r6, r7}
 800b014:	6852      	ldr	r2, [r2, #4]
 800b016:	6855      	ldr	r5, [r2, #4]
 800b018:	b105      	cbz	r5, 800b01c <forward_relu+0x10>
 800b01a:	682d      	ldr	r5, [r5, #0]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d91d      	bls.n	800b05c <forward_relu+0x50>
 800b020:	6913      	ldr	r3, [r2, #16]
 800b022:	b103      	cbz	r3, 800b026 <forward_relu+0x1a>
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6982      	ldr	r2, [r0, #24]
 800b028:	68ac      	ldr	r4, [r5, #8]
 800b02a:	6998      	ldr	r0, [r3, #24]
 800b02c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800b030:	69a9      	ldr	r1, [r5, #24]
 800b032:	2a00      	cmp	r2, #0
 800b034:	d040      	beq.n	800b0b8 <forward_relu+0xac>
 800b036:	e9d2 6301 	ldrd	r6, r3, [r2, #4]
 800b03a:	2e01      	cmp	r6, #1
 800b03c:	d013      	beq.n	800b066 <forward_relu+0x5a>
 800b03e:	2c00      	cmp	r4, #0
 800b040:	d068      	beq.n	800b114 <forward_relu+0x108>
 800b042:	68ee      	ldr	r6, [r5, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b04a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b04e:	42a6      	cmp	r6, r4
 800b050:	fb05 f202 	mul.w	r2, r5, r2
 800b054:	d1f9      	bne.n	800b04a <forward_relu+0x3e>
 800b056:	bcf0      	pop	{r4, r5, r6, r7}
 800b058:	f7ff bf60 	b.w	800af1c <nl_func_relu_generic_array_f32>
 800b05c:	2300      	movs	r3, #0
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	deff      	udf	#255	; 0xff
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	deff      	udf	#255	; 0xff
 800b066:	6887      	ldr	r7, [r0, #8]
 800b068:	688a      	ldr	r2, [r1, #8]
 800b06a:	ed93 7a00 	vldr	s14, [r3]
 800b06e:	b184      	cbz	r4, 800b092 <forward_relu+0x86>
 800b070:	68ed      	ldr	r5, [r5, #12]
 800b072:	4630      	mov	r0, r6
 800b074:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800b078:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800b07c:	42a5      	cmp	r5, r4
 800b07e:	fb03 f000 	mul.w	r0, r3, r0
 800b082:	d1f9      	bne.n	800b078 <forward_relu+0x6c>
 800b084:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b088:	4403      	add	r3, r0
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	18d2      	adds	r2, r2, r3
 800b08e:	441f      	add	r7, r3
 800b090:	d236      	bcs.n	800b100 <forward_relu+0xf4>
 800b092:	1d13      	adds	r3, r2, #4
 800b094:	2500      	movs	r5, #0
 800b096:	1d3a      	adds	r2, r7, #4
 800b098:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b09c:	1f18      	subs	r0, r3, #4
 800b09e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a6:	d82d      	bhi.n	800b104 <forward_relu+0xf8>
 800b0a8:	ed62 7a01 	vstmdb	r2!, {s15}
 800b0ac:	3b08      	subs	r3, #8
 800b0ae:	688c      	ldr	r4, [r1, #8]
 800b0b0:	429c      	cmp	r4, r3
 800b0b2:	d825      	bhi.n	800b100 <forward_relu+0xf4>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	e7ef      	b.n	800b098 <forward_relu+0x8c>
 800b0b8:	6880      	ldr	r0, [r0, #8]
 800b0ba:	688b      	ldr	r3, [r1, #8]
 800b0bc:	b184      	cbz	r4, 800b0e0 <forward_relu+0xd4>
 800b0be:	68ee      	ldr	r6, [r5, #12]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b0c6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0ca:	42a6      	cmp	r6, r4
 800b0cc:	fb05 f202 	mul.w	r2, r5, r2
 800b0d0:	d1f9      	bne.n	800b0c6 <forward_relu+0xba>
 800b0d2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800b0d6:	4414      	add	r4, r2
 800b0d8:	00a2      	lsls	r2, r4, #2
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	4410      	add	r0, r2
 800b0de:	d20f      	bcs.n	800b100 <forward_relu+0xf4>
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	3004      	adds	r0, #4
 800b0e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b118 <forward_relu+0x10c>
 800b0e8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b0ec:	f1a3 0208 	sub.w	r2, r3, #8
 800b0f0:	3b04      	subs	r3, #4
 800b0f2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800b0f6:	ed60 7a01 	vstmdb	r0!, {s15}
 800b0fa:	688c      	ldr	r4, [r1, #8]
 800b0fc:	4294      	cmp	r4, r2
 800b0fe:	d9f3      	bls.n	800b0e8 <forward_relu+0xdc>
 800b100:	bcf0      	pop	{r4, r5, r6, r7}
 800b102:	4770      	bx	lr
 800b104:	f842 5d04 	str.w	r5, [r2, #-4]!
 800b108:	3b08      	subs	r3, #8
 800b10a:	688c      	ldr	r4, [r1, #8]
 800b10c:	429c      	cmp	r4, r3
 800b10e:	d8f7      	bhi.n	800b100 <forward_relu+0xf4>
 800b110:	4603      	mov	r3, r0
 800b112:	e7c1      	b.n	800b098 <forward_relu+0x8c>
 800b114:	2201      	movs	r2, #1
 800b116:	e79e      	b.n	800b056 <forward_relu+0x4a>
 800b118:	00000000 	.word	0x00000000

0800b11c <forward_sm>:
 800b11c:	6942      	ldr	r2, [r0, #20]
 800b11e:	8813      	ldrh	r3, [r2, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 8085 	beq.w	800b230 <forward_sm+0x114>
 800b126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12a:	ed2d 8b04 	vpush	{d8-d9}
 800b12e:	6852      	ldr	r2, [r2, #4]
 800b130:	b085      	sub	sp, #20
 800b132:	6855      	ldr	r5, [r2, #4]
 800b134:	b105      	cbz	r5, 800b138 <forward_sm+0x1c>
 800b136:	682d      	ldr	r5, [r5, #0]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d971      	bls.n	800b220 <forward_sm+0x104>
 800b13c:	6913      	ldr	r3, [r2, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d06c      	beq.n	800b21c <forward_sm+0x100>
 800b142:	681f      	ldr	r7, [r3, #0]
 800b144:	68e9      	ldr	r1, [r5, #12]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	68ab      	ldr	r3, [r5, #8]
 800b14a:	6850      	ldr	r0, [r2, #4]
 800b14c:	0a1b      	lsrs	r3, r3, #8
 800b14e:	684a      	ldr	r2, [r1, #4]
 800b150:	9201      	str	r2, [sp, #4]
 800b152:	d06f      	beq.n	800b234 <forward_sm+0x118>
 800b154:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b158:	2401      	movs	r4, #1
 800b15a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b15e:	4299      	cmp	r1, r3
 800b160:	fb02 f404 	mul.w	r4, r2, r4
 800b164:	d1f9      	bne.n	800b15a <forward_sm+0x3e>
 800b166:	9901      	ldr	r1, [sp, #4]
 800b168:	69ae      	ldr	r6, [r5, #24]
 800b16a:	1a63      	subs	r3, r4, r1
 800b16c:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800b170:	1a24      	subs	r4, r4, r0
 800b172:	68b5      	ldr	r5, [r6, #8]
 800b174:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800b178:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800b17c:	68f3      	ldr	r3, [r6, #12]
 800b17e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b182:	429d      	cmp	r5, r3
 800b184:	d340      	bcc.n	800b208 <forward_sm+0xec>
 800b186:	008b      	lsls	r3, r1, #2
 800b188:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800b18c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	425b      	negs	r3, r3
 800b194:	f1c8 0200 	rsb	r2, r8, #0
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	9203      	str	r2, [sp, #12]
 800b19c:	9b01      	ldr	r3, [sp, #4]
 800b19e:	60b5      	str	r5, [r6, #8]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	f8c9 4008 	str.w	r4, [r9, #8]
 800b1a6:	68b2      	ldr	r2, [r6, #8]
 800b1a8:	ed92 8a00 	vldr	s16, [r2]
 800b1ac:	d93b      	bls.n	800b226 <forward_sm+0x10a>
 800b1ae:	9900      	ldr	r1, [sp, #0]
 800b1b0:	1d13      	adds	r3, r2, #4
 800b1b2:	1857      	adds	r7, r2, r1
 800b1b4:	ecf3 7a01 	vldmia	r3!, {s15}
 800b1b8:	429f      	cmp	r7, r3
 800b1ba:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800b1be:	d1f9      	bne.n	800b1b4 <forward_sm+0x98>
 800b1c0:	4692      	mov	sl, r2
 800b1c2:	46a3      	mov	fp, r4
 800b1c4:	46a0      	mov	r8, r4
 800b1c6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800b23c <forward_sm+0x120>
 800b1ca:	ecba 0a01 	vldmia	sl!, {s0}
 800b1ce:	ee30 0a48 	vsub.f32	s0, s0, s16
 800b1d2:	f006 fab1 	bl	8011738 <expf>
 800b1d6:	4557      	cmp	r7, sl
 800b1d8:	eca8 0a01 	vstmia	r8!, {s0}
 800b1dc:	ee78 8a80 	vadd.f32	s17, s17, s0
 800b1e0:	d1f3      	bne.n	800b1ca <forward_sm+0xae>
 800b1e2:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	18e2      	adds	r2, r4, r3
 800b1ea:	eddb 7a00 	vldr	s15, [fp]
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	eceb 7a01 	vstmia	fp!, {s15}
 800b1f6:	455a      	cmp	r2, fp
 800b1f8:	d1f7      	bne.n	800b1ea <forward_sm+0xce>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	9a03      	ldr	r2, [sp, #12]
 800b1fe:	441d      	add	r5, r3
 800b200:	68f3      	ldr	r3, [r6, #12]
 800b202:	4414      	add	r4, r2
 800b204:	429d      	cmp	r5, r3
 800b206:	d2c9      	bcs.n	800b19c <forward_sm+0x80>
 800b208:	60b3      	str	r3, [r6, #8]
 800b20a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b20e:	f8c9 3008 	str.w	r3, [r9, #8]
 800b212:	b005      	add	sp, #20
 800b214:	ecbd 8b04 	vpop	{d8-d9}
 800b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	deff      	udf	#255	; 0xff
 800b220:	2300      	movs	r3, #0
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	deff      	udf	#255	; 0xff
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0e7      	beq.n	800b1fa <forward_sm+0xde>
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	18d7      	adds	r7, r2, r3
 800b22e:	e7c7      	b.n	800b1c0 <forward_sm+0xa4>
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	deff      	udf	#255	; 0xff
 800b234:	2401      	movs	r4, #1
 800b236:	4611      	mov	r1, r2
 800b238:	e796      	b.n	800b168 <forward_sm+0x4c>
 800b23a:	bf00      	nop
 800b23c:	00000000 	.word	0x00000000

0800b240 <nl_func_clip_array_integer>:
 800b240:	b470      	push	{r4, r5, r6}
 800b242:	680e      	ldr	r6, [r1, #0]
 800b244:	781d      	ldrb	r5, [r3, #0]
 800b246:	785c      	ldrb	r4, [r3, #1]
 800b248:	0233      	lsls	r3, r6, #8
 800b24a:	6880      	ldr	r0, [r0, #8]
 800b24c:	6889      	ldr	r1, [r1, #8]
 800b24e:	d512      	bpl.n	800b276 <nl_func_clip_array_integer+0x36>
 800b250:	b26d      	sxtb	r5, r5
 800b252:	b264      	sxtb	r4, r4
 800b254:	b16a      	cbz	r2, 800b272 <nl_func_clip_array_integer+0x32>
 800b256:	3901      	subs	r1, #1
 800b258:	4402      	add	r2, r0
 800b25a:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 800b25e:	42ab      	cmp	r3, r5
 800b260:	bfb8      	it	lt
 800b262:	462b      	movlt	r3, r5
 800b264:	42a3      	cmp	r3, r4
 800b266:	bfa8      	it	ge
 800b268:	4623      	movge	r3, r4
 800b26a:	f800 3b01 	strb.w	r3, [r0], #1
 800b26e:	4290      	cmp	r0, r2
 800b270:	d1f3      	bne.n	800b25a <nl_func_clip_array_integer+0x1a>
 800b272:	bc70      	pop	{r4, r5, r6}
 800b274:	4770      	bx	lr
 800b276:	2a00      	cmp	r2, #0
 800b278:	d0fb      	beq.n	800b272 <nl_func_clip_array_integer+0x32>
 800b27a:	3901      	subs	r1, #1
 800b27c:	4402      	add	r2, r0
 800b27e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b282:	42ab      	cmp	r3, r5
 800b284:	bf38      	it	cc
 800b286:	462b      	movcc	r3, r5
 800b288:	42a3      	cmp	r3, r4
 800b28a:	bfa8      	it	ge
 800b28c:	4623      	movge	r3, r4
 800b28e:	f800 3b01 	strb.w	r3, [r0], #1
 800b292:	4290      	cmp	r0, r2
 800b294:	d1f3      	bne.n	800b27e <nl_func_clip_array_integer+0x3e>
 800b296:	bc70      	pop	{r4, r5, r6}
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop

0800b29c <ai_check_custom_types>:
 800b29c:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <ai_check_custom_types+0x50>)
 800b29e:	b082      	sub	sp, #8
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	b118      	cbz	r0, 800b2ae <ai_check_custom_types+0x12>
 800b2a6:	7803      	ldrb	r3, [r0, #0]
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d002      	beq.n	800b2b2 <ai_check_custom_types+0x16>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	b002      	add	sp, #8
 800b2b0:	4770      	bx	lr
 800b2b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d004      	beq.n	800b2c4 <ai_check_custom_types+0x28>
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	f080 0001 	eor.w	r0, r0, #1
 800b2c0:	b002      	add	sp, #8
 800b2c2:	4770      	bx	lr
 800b2c4:	7842      	ldrb	r2, [r0, #1]
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d1f4      	bne.n	800b2ba <ai_check_custom_types+0x1e>
 800b2d0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b2d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d1ee      	bne.n	800b2ba <ai_check_custom_types+0x1e>
 800b2dc:	7842      	ldrb	r2, [r0, #1]
 800b2de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d1e9      	bne.n	800b2ba <ai_check_custom_types+0x1e>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	e7e8      	b.n	800b2bc <ai_check_custom_types+0x20>
 800b2ea:	bf00      	nop
 800b2ec:	08011dc4 	.word	0x08011dc4

0800b2f0 <ai_layers_forward_all>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800b2f8:	b316      	cbz	r6, 800b340 <ai_layers_forward_all+0x50>
 800b2fa:	b1c5      	cbz	r5, 800b32e <ai_layers_forward_all+0x3e>
 800b2fc:	6545      	str	r5, [r0, #84]	; 0x54
 800b2fe:	4629      	mov	r1, r5
 800b300:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800b302:	2001      	movs	r0, #1
 800b304:	47b0      	blx	r6
 800b306:	2700      	movs	r7, #0
 800b308:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b30a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b30c:	2002      	movs	r0, #2
 800b30e:	47b0      	blx	r6
 800b310:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800b312:	692b      	ldr	r3, [r5, #16]
 800b314:	4628      	mov	r0, r5
 800b316:	4798      	blx	r3
 800b318:	68eb      	ldr	r3, [r5, #12]
 800b31a:	2003      	movs	r0, #3
 800b31c:	429d      	cmp	r5, r3
 800b31e:	4619      	mov	r1, r3
 800b320:	d006      	beq.n	800b330 <ai_layers_forward_all+0x40>
 800b322:	6563      	str	r3, [r4, #84]	; 0x54
 800b324:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b326:	47b0      	blx	r6
 800b328:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d1ed      	bne.n	800b30a <ai_layers_forward_all+0x1a>
 800b32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b330:	2100      	movs	r1, #0
 800b332:	6567      	str	r7, [r4, #84]	; 0x54
 800b334:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b336:	47b0      	blx	r6
 800b338:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b33a:	2900      	cmp	r1, #0
 800b33c:	d1e5      	bne.n	800b30a <ai_layers_forward_all+0x1a>
 800b33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b340:	2d00      	cmp	r5, #0
 800b342:	d0f4      	beq.n	800b32e <ai_layers_forward_all+0x3e>
 800b344:	6545      	str	r5, [r0, #84]	; 0x54
 800b346:	692b      	ldr	r3, [r5, #16]
 800b348:	4628      	mov	r0, r5
 800b34a:	4798      	blx	r3
 800b34c:	68eb      	ldr	r3, [r5, #12]
 800b34e:	42ab      	cmp	r3, r5
 800b350:	461d      	mov	r5, r3
 800b352:	d003      	beq.n	800b35c <ai_layers_forward_all+0x6c>
 800b354:	6563      	str	r3, [r4, #84]	; 0x54
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1f5      	bne.n	800b346 <ai_layers_forward_all+0x56>
 800b35a:	e7e8      	b.n	800b32e <ai_layers_forward_all+0x3e>
 800b35c:	2300      	movs	r3, #0
 800b35e:	6563      	str	r3, [r4, #84]	; 0x54
 800b360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b362:	bf00      	nop

0800b364 <pool_func_ap_array_integer_INT8>:
 800b364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b368:	b093      	sub	sp, #76	; 0x4c
 800b36a:	6985      	ldr	r5, [r0, #24]
 800b36c:	460f      	mov	r7, r1
 800b36e:	469c      	mov	ip, r3
 800b370:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800b372:	6803      	ldr	r3, [r0, #0]
 800b374:	69a1      	ldr	r1, [r4, #24]
 800b376:	68a8      	ldr	r0, [r5, #8]
 800b378:	6825      	ldr	r5, [r4, #0]
 800b37a:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 800b37e:	6889      	ldr	r1, [r1, #8]
 800b380:	940d      	str	r4, [sp, #52]	; 0x34
 800b382:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 800b386:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 800b38a:	940e      	str	r4, [sp, #56]	; 0x38
 800b38c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800b390:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800b394:	940f      	str	r4, [sp, #60]	; 0x3c
 800b396:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 800b39a:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800b39e:	9410      	str	r4, [sp, #64]	; 0x40
 800b3a0:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d03c      	beq.n	800b422 <pool_func_ap_array_integer_INT8+0xbe>
 800b3a8:	685e      	ldr	r6, [r3, #4]
 800b3aa:	46b3      	mov	fp, r6
 800b3ac:	2e00      	cmp	r6, #0
 800b3ae:	d031      	beq.n	800b414 <pool_func_ap_array_integer_INT8+0xb0>
 800b3b0:	885c      	ldrh	r4, [r3, #2]
 800b3b2:	9411      	str	r4, [sp, #68]	; 0x44
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	d051      	beq.n	800b45c <pool_func_ap_array_integer_INT8+0xf8>
 800b3b8:	6834      	ldr	r4, [r6, #0]
 800b3ba:	ed94 0a00 	vldr	s0, [r4]
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	d069      	beq.n	800b496 <pool_func_ap_array_integer_INT8+0x132>
 800b3c2:	686c      	ldr	r4, [r5, #4]
 800b3c4:	2c00      	cmp	r4, #0
 800b3c6:	d054      	beq.n	800b472 <pool_func_ap_array_integer_INT8+0x10e>
 800b3c8:	886e      	ldrh	r6, [r5, #2]
 800b3ca:	9611      	str	r6, [sp, #68]	; 0x44
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	d033      	beq.n	800b438 <pool_func_ap_array_integer_INT8+0xd4>
 800b3d0:	6826      	ldr	r6, [r4, #0]
 800b3d2:	edd6 0a00 	vldr	s1, [r6]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d155      	bne.n	800b486 <pool_func_ap_array_integer_INT8+0x122>
 800b3da:	6864      	ldr	r4, [r4, #4]
 800b3dc:	f994 4000 	ldrsb.w	r4, [r4]
 800b3e0:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3e4:	f8cd 801c 	str.w	r8, [sp, #28]
 800b3e8:	f8cd e018 	str.w	lr, [sp, #24]
 800b3ec:	f8cd c000 	str.w	ip, [sp]
 800b3f0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 800b3f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	463a      	mov	r2, r7
 800b3fa:	9405      	str	r4, [sp, #20]
 800b3fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b3fe:	9404      	str	r4, [sp, #16]
 800b400:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b402:	9403      	str	r4, [sp, #12]
 800b404:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b406:	e9cd a401 	strd	sl, r4, [sp, #4]
 800b40a:	f003 f851 	bl	800e4b0 <st_int8_avepool>
 800b40e:	b013      	add	sp, #76	; 0x4c
 800b410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b414:	2d00      	cmp	r5, #0
 800b416:	d02f      	beq.n	800b478 <pool_func_ap_array_integer_INT8+0x114>
 800b418:	686c      	ldr	r4, [r5, #4]
 800b41a:	b93c      	cbnz	r4, 800b42c <pool_func_ap_array_integer_INT8+0xc8>
 800b41c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b420:	e00d      	b.n	800b43e <pool_func_ap_array_integer_INT8+0xda>
 800b422:	2d00      	cmp	r5, #0
 800b424:	d028      	beq.n	800b478 <pool_func_ap_array_integer_INT8+0x114>
 800b426:	686c      	ldr	r4, [r5, #4]
 800b428:	2c00      	cmp	r4, #0
 800b42a:	d03f      	beq.n	800b4ac <pool_func_ap_array_integer_INT8+0x148>
 800b42c:	886e      	ldrh	r6, [r5, #2]
 800b42e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b432:	9611      	str	r6, [sp, #68]	; 0x44
 800b434:	2e00      	cmp	r6, #0
 800b436:	d1cb      	bne.n	800b3d0 <pool_func_ap_array_integer_INT8+0x6c>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d03e      	beq.n	800b4ba <pool_func_ap_array_integer_INT8+0x156>
 800b43c:	685e      	ldr	r6, [r3, #4]
 800b43e:	46b3      	mov	fp, r6
 800b440:	2e00      	cmp	r6, #0
 800b442:	d02f      	beq.n	800b4a4 <pool_func_ap_array_integer_INT8+0x140>
 800b444:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b448:	885b      	ldrh	r3, [r3, #2]
 800b44a:	b953      	cbnz	r3, 800b462 <pool_func_ap_array_integer_INT8+0xfe>
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	d0c7      	beq.n	800b3e0 <pool_func_ap_array_integer_INT8+0x7c>
 800b450:	886d      	ldrh	r5, [r5, #2]
 800b452:	9511      	str	r5, [sp, #68]	; 0x44
 800b454:	2d00      	cmp	r5, #0
 800b456:	d1c0      	bne.n	800b3da <pool_func_ap_array_integer_INT8+0x76>
 800b458:	2400      	movs	r4, #0
 800b45a:	e7c1      	b.n	800b3e0 <pool_func_ap_array_integer_INT8+0x7c>
 800b45c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b460:	e7ad      	b.n	800b3be <pool_func_ap_array_integer_INT8+0x5a>
 800b462:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b466:	f993 3000 	ldrsb.w	r3, [r3]
 800b46a:	2d00      	cmp	r5, #0
 800b46c:	d0f4      	beq.n	800b458 <pool_func_ap_array_integer_INT8+0xf4>
 800b46e:	686c      	ldr	r4, [r5, #4]
 800b470:	e7ec      	b.n	800b44c <pool_func_ap_array_integer_INT8+0xe8>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e3      	bne.n	800b43e <pool_func_ap_array_integer_INT8+0xda>
 800b476:	e01b      	b.n	800b4b0 <pool_func_ap_array_integer_INT8+0x14c>
 800b478:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b47c:	462b      	mov	r3, r5
 800b47e:	462c      	mov	r4, r5
 800b480:	eef0 0a40 	vmov.f32	s1, s0
 800b484:	e7ac      	b.n	800b3e0 <pool_func_ap_array_integer_INT8+0x7c>
 800b486:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800b48a:	f1bb 0f00 	cmp.w	fp, #0
 800b48e:	d1db      	bne.n	800b448 <pool_func_ap_array_integer_INT8+0xe4>
 800b490:	465b      	mov	r3, fp
 800b492:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b494:	e7de      	b.n	800b454 <pool_func_ap_array_integer_INT8+0xf0>
 800b496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b498:	eddf 0a09 	vldr	s1, [pc, #36]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e0      	bne.n	800b462 <pool_func_ap_array_integer_INT8+0xfe>
 800b4a0:	461c      	mov	r4, r3
 800b4a2:	e79d      	b.n	800b3e0 <pool_func_ap_array_integer_INT8+0x7c>
 800b4a4:	4633      	mov	r3, r6
 800b4a6:	eddf 0a06 	vldr	s1, [pc, #24]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b4aa:	e7cf      	b.n	800b44c <pool_func_ap_array_integer_INT8+0xe8>
 800b4ac:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	eddf 0a03 	vldr	s1, [pc, #12]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	e792      	b.n	800b3e0 <pool_func_ap_array_integer_INT8+0x7c>
 800b4ba:	eddf 0a01 	vldr	s1, [pc, #4]	; 800b4c0 <pool_func_ap_array_integer_INT8+0x15c>
 800b4be:	e7cb      	b.n	800b458 <pool_func_ap_array_integer_INT8+0xf4>
 800b4c0:	00000000 	.word	0x00000000

0800b4c4 <arm_float_to_q15>:
 800b4c4:	b4f0      	push	{r4, r5, r6, r7}
 800b4c6:	0897      	lsrs	r7, r2, #2
 800b4c8:	d06b      	beq.n	800b5a2 <arm_float_to_q15+0xde>
 800b4ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b4ce:	f100 0510 	add.w	r5, r0, #16
 800b4d2:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800b4d6:	f101 0408 	add.w	r4, r1, #8
 800b4da:	463e      	mov	r6, r7
 800b4dc:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800b634 <arm_float_to_q15+0x170>
 800b4e0:	e00b      	b.n	800b4fa <arm_float_to_q15+0x36>
 800b4e2:	ee17 3a10 	vmov	r3, s14
 800b4e6:	f303 030f 	ssat	r3, #16, r3
 800b4ea:	3e01      	subs	r6, #1
 800b4ec:	f824 3c02 	strh.w	r3, [r4, #-2]
 800b4f0:	f105 0510 	add.w	r5, r5, #16
 800b4f4:	f104 0408 	add.w	r4, r4, #8
 800b4f8:	d04f      	beq.n	800b59a <arm_float_to_q15+0xd6>
 800b4fa:	ed55 7a04 	vldr	s15, [r5, #-16]
 800b4fe:	ee27 7a86 	vmul.f32	s14, s15, s12
 800b502:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800b50e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b516:	ee17 3a90 	vmov	r3, s15
 800b51a:	f303 030f 	ssat	r3, #16, r3
 800b51e:	f824 3c08 	strh.w	r3, [r4, #-8]
 800b522:	ed55 7a03 	vldr	s15, [r5, #-12]
 800b526:	ee27 7a86 	vmul.f32	s14, s15, s12
 800b52a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b532:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800b536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b53a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b53e:	ee17 3a90 	vmov	r3, s15
 800b542:	f303 030f 	ssat	r3, #16, r3
 800b546:	f824 3c06 	strh.w	r3, [r4, #-6]
 800b54a:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b54e:	ee27 7a86 	vmul.f32	s14, s15, s12
 800b552:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b55a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800b55e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b566:	ee17 3a90 	vmov	r3, s15
 800b56a:	f303 030f 	ssat	r3, #16, r3
 800b56e:	f824 3c04 	strh.w	r3, [r4, #-4]
 800b572:	ed55 7a01 	vldr	s15, [r5, #-4]
 800b576:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b57a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b57e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b58a:	dcaa      	bgt.n	800b4e2 <arm_float_to_q15+0x1e>
 800b58c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b594:	ee17 3a90 	vmov	r3, s15
 800b598:	e7a5      	b.n	800b4e6 <arm_float_to_q15+0x22>
 800b59a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b59e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800b5a2:	f012 0203 	ands.w	r2, r2, #3
 800b5a6:	d042      	beq.n	800b62e <arm_float_to_q15+0x16a>
 800b5a8:	edd0 7a00 	vldr	s15, [r0]
 800b5ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5b0:	eddf 5a20 	vldr	s11, [pc, #128]	; 800b634 <arm_float_to_q15+0x170>
 800b5b4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800b5b8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800b5bc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 800b5c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5d0:	ee17 3a90 	vmov	r3, s15
 800b5d4:	f303 030f 	ssat	r3, #16, r3
 800b5d8:	2a01      	cmp	r2, #1
 800b5da:	800b      	strh	r3, [r1, #0]
 800b5dc:	d027      	beq.n	800b62e <arm_float_to_q15+0x16a>
 800b5de:	edd0 7a01 	vldr	s15, [r0, #4]
 800b5e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b5e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ee:	fe77 6a06 	vselgt.f32	s13, s14, s12
 800b5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5fa:	ee17 3a90 	vmov	r3, s15
 800b5fe:	f303 030f 	ssat	r3, #16, r3
 800b602:	2a02      	cmp	r2, #2
 800b604:	804b      	strh	r3, [r1, #2]
 800b606:	d012      	beq.n	800b62e <arm_float_to_q15+0x16a>
 800b608:	edd0 7a02 	vldr	s15, [r0, #8]
 800b60c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800b610:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800b614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b618:	fe37 7a06 	vselgt.f32	s14, s14, s12
 800b61c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b620:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b624:	ee17 3a10 	vmov	r3, s14
 800b628:	f303 030f 	ssat	r3, #16, r3
 800b62c:	808b      	strh	r3, [r1, #4]
 800b62e:	bcf0      	pop	{r4, r5, r6, r7}
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	47000000 	.word	0x47000000

0800b638 <arm_float_to_q7>:
 800b638:	b4f0      	push	{r4, r5, r6, r7}
 800b63a:	0897      	lsrs	r7, r2, #2
 800b63c:	d066      	beq.n	800b70c <arm_float_to_q7+0xd4>
 800b63e:	1d0c      	adds	r4, r1, #4
 800b640:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800b644:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b648:	f100 0510 	add.w	r5, r0, #16
 800b64c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800b650:	eb04 060c 	add.w	r6, r4, ip
 800b654:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800b7c4 <arm_float_to_q7+0x18c>
 800b658:	ed55 7a04 	vldr	s15, [r5, #-16]
 800b65c:	ee27 7a86 	vmul.f32	s14, s15, s12
 800b660:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800b66c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b674:	ee17 3a90 	vmov	r3, s15
 800b678:	b21b      	sxth	r3, r3
 800b67a:	f303 0307 	ssat	r3, #8, r3
 800b67e:	f804 3c04 	strb.w	r3, [r4, #-4]
 800b682:	ed55 7a03 	vldr	s15, [r5, #-12]
 800b686:	ee27 7a86 	vmul.f32	s14, s15, s12
 800b68a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b692:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800b696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b69a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b69e:	ee17 3a90 	vmov	r3, s15
 800b6a2:	b21b      	sxth	r3, r3
 800b6a4:	f303 0307 	ssat	r3, #8, r3
 800b6a8:	f804 3c03 	strb.w	r3, [r4, #-3]
 800b6ac:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b6b0:	ee27 7a86 	vmul.f32	s14, s15, s12
 800b6b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 800b6c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6c8:	ee17 3a90 	vmov	r3, s15
 800b6cc:	b21b      	sxth	r3, r3
 800b6ce:	f303 0307 	ssat	r3, #8, r3
 800b6d2:	f804 3c02 	strb.w	r3, [r4, #-2]
 800b6d6:	ed55 7a01 	vldr	s15, [r5, #-4]
 800b6da:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b6de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b6e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6e6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	ee17 3a10 	vmov	r3, s14
 800b6f2:	b21b      	sxth	r3, r3
 800b6f4:	dd55      	ble.n	800b7a2 <arm_float_to_q7+0x16a>
 800b6f6:	f303 0307 	ssat	r3, #8, r3
 800b6fa:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b6fe:	3404      	adds	r4, #4
 800b700:	3510      	adds	r5, #16
 800b702:	42a6      	cmp	r6, r4
 800b704:	d1a8      	bne.n	800b658 <arm_float_to_q7+0x20>
 800b706:	4461      	add	r1, ip
 800b708:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800b70c:	f012 0203 	ands.w	r2, r2, #3
 800b710:	d045      	beq.n	800b79e <arm_float_to_q7+0x166>
 800b712:	edd0 7a00 	vldr	s15, [r0]
 800b716:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b71a:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 800b7c4 <arm_float_to_q7+0x18c>
 800b71e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800b722:	ee67 6a85 	vmul.f32	s13, s15, s10
 800b726:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800b72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72e:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b73a:	ee17 3a90 	vmov	r3, s15
 800b73e:	b21b      	sxth	r3, r3
 800b740:	f303 0307 	ssat	r3, #8, r3
 800b744:	2a01      	cmp	r2, #1
 800b746:	700b      	strb	r3, [r1, #0]
 800b748:	d029      	beq.n	800b79e <arm_float_to_q7+0x166>
 800b74a:	edd0 6a01 	vldr	s13, [r0, #4]
 800b74e:	ee26 6a85 	vmul.f32	s12, s13, s10
 800b752:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800b756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b75a:	fe77 6a25 	vselgt.f32	s13, s14, s11
 800b75e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b762:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b766:	ee16 3a90 	vmov	r3, s13
 800b76a:	b21b      	sxth	r3, r3
 800b76c:	f303 0307 	ssat	r3, #8, r3
 800b770:	2a02      	cmp	r2, #2
 800b772:	704b      	strb	r3, [r1, #1]
 800b774:	d013      	beq.n	800b79e <arm_float_to_q7+0x166>
 800b776:	edd0 7a02 	vldr	s15, [r0, #8]
 800b77a:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b77e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800b782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b786:	fe77 7a25 	vselgt.f32	s15, s14, s11
 800b78a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b78e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b792:	ee17 3a90 	vmov	r3, s15
 800b796:	b21b      	sxth	r3, r3
 800b798:	f303 0307 	ssat	r3, #8, r3
 800b79c:	708b      	strb	r3, [r1, #2]
 800b79e:	bcf0      	pop	{r4, r5, r6, r7}
 800b7a0:	4770      	bx	lr
 800b7a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b7a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7aa:	ee17 3a90 	vmov	r3, s15
 800b7ae:	b21b      	sxth	r3, r3
 800b7b0:	f303 0307 	ssat	r3, #8, r3
 800b7b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b7b8:	3404      	adds	r4, #4
 800b7ba:	3510      	adds	r5, #16
 800b7bc:	42b4      	cmp	r4, r6
 800b7be:	f47f af4b 	bne.w	800b658 <arm_float_to_q7+0x20>
 800b7c2:	e7a0      	b.n	800b706 <arm_float_to_q7+0xce>
 800b7c4:	43000000 	.word	0x43000000

0800b7c8 <arm_q15_to_float>:
 800b7c8:	b470      	push	{r4, r5, r6}
 800b7ca:	0896      	lsrs	r6, r2, #2
 800b7cc:	d038      	beq.n	800b840 <arm_q15_to_float+0x78>
 800b7ce:	f100 0408 	add.w	r4, r0, #8
 800b7d2:	f101 0310 	add.w	r3, r1, #16
 800b7d6:	4635      	mov	r5, r6
 800b7d8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800b894 <arm_q15_to_float+0xcc>
 800b7dc:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 800b7e0:	3d01      	subs	r5, #1
 800b7e2:	f104 0408 	add.w	r4, r4, #8
 800b7e6:	f103 0310 	add.w	r3, r3, #16
 800b7ea:	ee07 ca90 	vmov	s15, ip
 800b7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7f6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800b7fa:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 800b7fe:	ee07 ca90 	vmov	s15, ip
 800b802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b80a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800b80e:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 800b812:	ee07 ca90 	vmov	s15, ip
 800b816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b81a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b81e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800b822:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 800b826:	ee07 ca90 	vmov	s15, ip
 800b82a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b82e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b832:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b836:	d1d1      	bne.n	800b7dc <arm_q15_to_float+0x14>
 800b838:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800b83c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800b840:	f012 0203 	ands.w	r2, r2, #3
 800b844:	d023      	beq.n	800b88e <arm_q15_to_float+0xc6>
 800b846:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b84a:	2a01      	cmp	r2, #1
 800b84c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b894 <arm_q15_to_float+0xcc>
 800b850:	ee07 3a90 	vmov	s15, r3
 800b854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b85c:	edc1 7a00 	vstr	s15, [r1]
 800b860:	d015      	beq.n	800b88e <arm_q15_to_float+0xc6>
 800b862:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b866:	2a02      	cmp	r2, #2
 800b868:	ee07 3a90 	vmov	s15, r3
 800b86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b870:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b874:	edc1 7a01 	vstr	s15, [r1, #4]
 800b878:	d009      	beq.n	800b88e <arm_q15_to_float+0xc6>
 800b87a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b87e:	ee07 3a90 	vmov	s15, r3
 800b882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b88a:	edc1 7a02 	vstr	s15, [r1, #8]
 800b88e:	bc70      	pop	{r4, r5, r6}
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	38000000 	.word	0x38000000

0800b898 <arm_q7_to_float>:
 800b898:	b470      	push	{r4, r5, r6}
 800b89a:	0895      	lsrs	r5, r2, #2
 800b89c:	d036      	beq.n	800b90c <arm_q7_to_float+0x74>
 800b89e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 800b8a2:	f101 0310 	add.w	r3, r1, #16
 800b8a6:	3004      	adds	r0, #4
 800b8a8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800b960 <arm_q7_to_float+0xc8>
 800b8ac:	1d34      	adds	r4, r6, #4
 800b8ae:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 800b8b2:	3004      	adds	r0, #4
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	ee07 ca90 	vmov	s15, ip
 800b8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8c2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 800b8c6:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 800b8ca:	ee07 ca90 	vmov	s15, ip
 800b8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8d6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 800b8da:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 800b8de:	ee07 ca90 	vmov	s15, ip
 800b8e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8ea:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 800b8ee:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 800b8f2:	42a0      	cmp	r0, r4
 800b8f4:	ee07 ca90 	vmov	s15, ip
 800b8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b900:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b904:	d1d3      	bne.n	800b8ae <arm_q7_to_float+0x16>
 800b906:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b90a:	4630      	mov	r0, r6
 800b90c:	f012 0203 	ands.w	r2, r2, #3
 800b910:	d023      	beq.n	800b95a <arm_q7_to_float+0xc2>
 800b912:	f990 3000 	ldrsb.w	r3, [r0]
 800b916:	2a01      	cmp	r2, #1
 800b918:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b960 <arm_q7_to_float+0xc8>
 800b91c:	ee07 3a90 	vmov	s15, r3
 800b920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b924:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b928:	edc1 7a00 	vstr	s15, [r1]
 800b92c:	d015      	beq.n	800b95a <arm_q7_to_float+0xc2>
 800b92e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b932:	2a02      	cmp	r2, #2
 800b934:	ee07 3a90 	vmov	s15, r3
 800b938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b93c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b940:	edc1 7a01 	vstr	s15, [r1, #4]
 800b944:	d009      	beq.n	800b95a <arm_q7_to_float+0xc2>
 800b946:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b952:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b956:	edc1 7a02 	vstr	s15, [r1, #8]
 800b95a:	bc70      	pop	{r4, r5, r6}
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	3c000000 	.word	0x3c000000

0800b964 <align_factor>:
 800b964:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b968:	b508      	push	{r3, lr}
 800b96a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b96e:	2300      	movs	r3, #0
 800b970:	8003      	strh	r3, [r0, #0]
 800b972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b976:	d41f      	bmi.n	800b9b8 <align_factor+0x54>
 800b978:	dd0e      	ble.n	800b998 <align_factor+0x34>
 800b97a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b97e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b982:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b986:	1e5a      	subs	r2, r3, #1
 800b988:	b219      	sxth	r1, r3
 800b98a:	b293      	uxth	r3, r2
 800b98c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	dcf5      	bgt.n	800b982 <align_factor+0x1e>
 800b996:	8001      	strh	r1, [r0, #0]
 800b998:	eddf 7a11 	vldr	s15, [pc, #68]	; 800b9e0 <align_factor+0x7c>
 800b99c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b9a0:	ee17 0a90 	vmov	r0, s15
 800b9a4:	f7f4 fcbc 	bl	8000320 <__aeabi_f2lz>
 800b9a8:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800b9ac:	d003      	beq.n	800b9b6 <align_factor+0x52>
 800b9ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800b9b2:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800b9b6:	bd08      	pop	{r3, pc}
 800b9b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b9bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c4:	d5e8      	bpl.n	800b998 <align_factor+0x34>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	b219      	sxth	r1, r3
 800b9d0:	b293      	uxth	r3, r2
 800b9d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9da:	d4f5      	bmi.n	800b9c8 <align_factor+0x64>
 800b9dc:	e7db      	b.n	800b996 <align_factor+0x32>
 800b9de:	bf00      	nop
 800b9e0:	4f000000 	.word	0x4f000000

0800b9e4 <align_factor_ch>:
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d055      	beq.n	800ba94 <align_factor_ch+0xb0>
 800b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ec:	ed2d 8b04 	vpush	{d8-d9}
 800b9f0:	eec0 9a20 	vdiv.f32	s19, s0, s1
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	f1a2 0804 	sub.w	r8, r2, #4
 800b9fa:	1e9f      	subs	r7, r3, #2
 800b9fc:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800ba00:	ed9f 9a25 	vldr	s18, [pc, #148]	; 800ba98 <align_factor_ch+0xb4>
 800ba04:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800ba08:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ba0c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800ba10:	ecf4 7a01 	vldmia	r4!, {s15}
 800ba14:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800ba18:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ba1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba20:	d420      	bmi.n	800ba64 <align_factor_ch+0x80>
 800ba22:	f04f 0300 	mov.w	r3, #0
 800ba26:	dd08      	ble.n	800ba3a <align_factor_ch+0x56>
 800ba28:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b21b      	sxth	r3, r3
 800ba30:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ba34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba38:	dcf6      	bgt.n	800ba28 <align_factor_ch+0x44>
 800ba3a:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ba3e:	f827 3f02 	strh.w	r3, [r7, #2]!
 800ba42:	ee17 0a90 	vmov	r0, s15
 800ba46:	f7f4 fc6b 	bl	8000320 <__aeabi_f2lz>
 800ba4a:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800ba4e:	d019      	beq.n	800ba84 <align_factor_ch+0xa0>
 800ba50:	ea86 71e1 	eor.w	r1, r6, r1, asr #31
 800ba54:	42a5      	cmp	r5, r4
 800ba56:	f848 1f04 	str.w	r1, [r8, #4]!
 800ba5a:	d1d9      	bne.n	800ba10 <align_factor_ch+0x2c>
 800ba5c:	ecbd 8b04 	vpop	{d8-d9}
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba64:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ba68:	2300      	movs	r3, #0
 800ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6e:	d5e4      	bpl.n	800ba3a <align_factor_ch+0x56>
 800ba70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba74:	3301      	adds	r3, #1
 800ba76:	b21b      	sxth	r3, r3
 800ba78:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ba7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba80:	d4f6      	bmi.n	800ba70 <align_factor_ch+0x8c>
 800ba82:	e7da      	b.n	800ba3a <align_factor_ch+0x56>
 800ba84:	42a5      	cmp	r5, r4
 800ba86:	f848 0f04 	str.w	r0, [r8, #4]!
 800ba8a:	d1c1      	bne.n	800ba10 <align_factor_ch+0x2c>
 800ba8c:	ecbd 8b04 	vpop	{d8-d9}
 800ba90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	4f000000 	.word	0x4f000000

0800ba9c <st_sssa8_ch_conv_dw_Wadapt>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	b089      	sub	sp, #36	; 0x24
 800baa2:	4615      	mov	r5, r2
 800baa4:	ea5f 0a91 	movs.w	sl, r1, lsr #2
 800baa8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800baaa:	9204      	str	r2, [sp, #16]
 800baac:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800bab0:	9007      	str	r0, [sp, #28]
 800bab2:	9305      	str	r3, [sp, #20]
 800bab4:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800bab8:	d07a      	beq.n	800bbb0 <st_sssa8_ch_conv_dw_Wadapt+0x114>
 800baba:	fb03 fb05 	mul.w	fp, r3, r5
 800babe:	f10a 32ff 	add.w	r2, sl, #4294967295
 800bac2:	4606      	mov	r6, r0
 800bac4:	3004      	adds	r0, #4
 800bac6:	f3cb 044f 	ubfx	r4, fp, #1, #16
 800baca:	b292      	uxth	r2, r2
 800bacc:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800bad0:	f8cd a018 	str.w	sl, [sp, #24]
 800bad4:	9400      	str	r4, [sp, #0]
 800bad6:	fb15 f403 	smulbb	r4, r5, r3
 800bada:	9b00      	ldr	r3, [sp, #0]
 800badc:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 800bae0:	f004 0201 	and.w	r2, r4, #1
 800bae4:	46b1      	mov	r9, r6
 800bae6:	3b01      	subs	r3, #1
 800bae8:	f8df c118 	ldr.w	ip, [pc, #280]	; 800bc04 <st_sssa8_ch_conv_dw_Wadapt+0x168>
 800baec:	9201      	str	r2, [sp, #4]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	011a      	lsls	r2, r3, #4
 800baf2:	3301      	adds	r3, #1
 800baf4:	3220      	adds	r2, #32
 800baf6:	9203      	str	r2, [sp, #12]
 800baf8:	fb03 f208 	mul.w	r2, r3, r8
 800bafc:	011b      	lsls	r3, r3, #4
 800bafe:	469a      	mov	sl, r3
 800bb00:	9202      	str	r2, [sp, #8]
 800bb02:	9b00      	ldr	r3, [sp, #0]
 800bb04:	464e      	mov	r6, r9
 800bb06:	b33b      	cbz	r3, 800bb58 <st_sssa8_ch_conv_dw_Wadapt+0xbc>
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	f107 0510 	add.w	r5, r7, #16
 800bb0e:	eb07 0e03 	add.w	lr, r7, r3
 800bb12:	6833      	ldr	r3, [r6, #0]
 800bb14:	5872      	ldr	r2, [r6, r1]
 800bb16:	4446      	add	r6, r8
 800bb18:	b29c      	uxth	r4, r3
 800bb1a:	ea02 000c 	and.w	r0, r2, ip
 800bb1e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800bb22:	ea40 4313 	orr.w	r3, r0, r3, lsr #16
 800bb26:	ea4f 2032 	mov.w	r0, r2, ror #8
 800bb2a:	fa2f f282 	sxtb16	r2, r2
 800bb2e:	fa2f f080 	sxtb16	r0, r0
 800bb32:	f845 2c10 	str.w	r2, [r5, #-16]
 800bb36:	ea4f 2233 	mov.w	r2, r3, ror #8
 800bb3a:	f845 0c0c 	str.w	r0, [r5, #-12]
 800bb3e:	fa2f f282 	sxtb16	r2, r2
 800bb42:	fa2f f383 	sxtb16	r3, r3
 800bb46:	e945 3202 	strd	r3, r2, [r5, #-8]
 800bb4a:	3510      	adds	r5, #16
 800bb4c:	45ae      	cmp	lr, r5
 800bb4e:	d1e0      	bne.n	800bb12 <st_sssa8_ch_conv_dw_Wadapt+0x76>
 800bb50:	9b02      	ldr	r3, [sp, #8]
 800bb52:	4457      	add	r7, sl
 800bb54:	eb09 0603 	add.w	r6, r9, r3
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	b1fb      	cbz	r3, 800bb9c <st_sssa8_ch_conv_dw_Wadapt+0x100>
 800bb5c:	6833      	ldr	r3, [r6, #0]
 800bb5e:	2400      	movs	r4, #0
 800bb60:	3708      	adds	r7, #8
 800bb62:	ea03 020c 	and.w	r2, r3, ip
 800bb66:	4620      	mov	r0, r4
 800bb68:	ea0c 2503 	and.w	r5, ip, r3, lsl #8
 800bb6c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	ea4f 4232 	mov.w	r2, r2, ror #16
 800bb76:	432b      	orrs	r3, r5
 800bb78:	fa2f f282 	sxtb16	r2, r2
 800bb7c:	fa2f f383 	sxtb16	r3, r3
 800bb80:	f362 040f 	bfi	r4, r2, #0, #16
 800bb84:	f363 000f 	bfi	r0, r3, #0, #16
 800bb88:	0c12      	lsrs	r2, r2, #16
 800bb8a:	0c1b      	lsrs	r3, r3, #16
 800bb8c:	f362 441f 	bfi	r4, r2, #16, #16
 800bb90:	f363 401f 	bfi	r0, r3, #16, #16
 800bb94:	f847 4c04 	str.w	r4, [r7, #-4]
 800bb98:	f847 0c08 	str.w	r0, [r7, #-8]
 800bb9c:	f109 0904 	add.w	r9, r9, #4
 800bba0:	45cb      	cmp	fp, r9
 800bba2:	d1ae      	bne.n	800bb02 <st_sssa8_ch_conv_dw_Wadapt+0x66>
 800bba4:	f8dd a018 	ldr.w	sl, [sp, #24]
 800bba8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800bbac:	fa1f fa8a 	uxth.w	sl, sl
 800bbb0:	f011 0603 	ands.w	r6, r1, #3
 800bbb4:	d023      	beq.n	800bbfe <st_sssa8_ch_conv_dw_Wadapt+0x162>
 800bbb6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800bbba:	fb13 f302 	smulbb	r3, r3, r2
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	b1eb      	cbz	r3, 800bbfe <st_sssa8_ch_conv_dw_Wadapt+0x162>
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	4456      	add	r6, sl
 800bbc6:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	b2b6      	uxth	r6, r6
 800bbce:	f103 0c01 	add.w	ip, r3, #1
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800bbd8:	1c9d      	adds	r5, r3, #2
 800bbda:	f10a 0001 	add.w	r0, sl, #1
 800bbde:	eb0e 020a 	add.w	r2, lr, sl
 800bbe2:	197c      	adds	r4, r7, r5
 800bbe4:	463b      	mov	r3, r7
 800bbe6:	fa1f fa80 	uxth.w	sl, r0
 800bbea:	f992 0000 	ldrsb.w	r0, [r2]
 800bbee:	440a      	add	r2, r1
 800bbf0:	f823 0b02 	strh.w	r0, [r3], #2
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	d1f8      	bne.n	800bbea <st_sssa8_ch_conv_dw_Wadapt+0x14e>
 800bbf8:	45b2      	cmp	sl, r6
 800bbfa:	4467      	add	r7, ip
 800bbfc:	d1ed      	bne.n	800bbda <st_sssa8_ch_conv_dw_Wadapt+0x13e>
 800bbfe:	b009      	add	sp, #36	; 0x24
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	ffff0000 	.word	0xffff0000

0800bc08 <st_sssa8_ch_convolve_dw>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	b0dd      	sub	sp, #372	; 0x174
 800bc0e:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 800bc12:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 800bc16:	9020      	str	r0, [sp, #128]	; 0x80
 800bc18:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800bc1c:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 800bc20:	007e      	lsls	r6, r7, #1
 800bc22:	910a      	str	r1, [sp, #40]	; 0x28
 800bc24:	eb08 0107 	add.w	r1, r8, r7
 800bc28:	fb04 f900 	mul.w	r9, r4, r0
 800bc2c:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 800bc30:	921a      	str	r2, [sp, #104]	; 0x68
 800bc32:	fb07 1109 	mla	r1, r7, r9, r1
 800bc36:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 800bc38:	9033      	str	r0, [sp, #204]	; 0xcc
 800bc3a:	19f0      	adds	r0, r6, r7
 800bc3c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800bc40:	931f      	str	r3, [sp, #124]	; 0x7c
 800bc42:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800bc44:	9219      	str	r2, [sp, #100]	; 0x64
 800bc46:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 800bc4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800bc4e:	9438      	str	r4, [sp, #224]	; 0xe0
 800bc50:	9232      	str	r2, [sp, #200]	; 0xc8
 800bc52:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 800bc56:	9615      	str	r6, [sp, #84]	; 0x54
 800bc58:	9239      	str	r2, [sp, #228]	; 0xe4
 800bc5a:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 800bc5e:	9326      	str	r3, [sp, #152]	; 0x98
 800bc60:	9223      	str	r2, [sp, #140]	; 0x8c
 800bc62:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 800bc66:	9237      	str	r2, [sp, #220]	; 0xdc
 800bc68:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 800bc6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc6e:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 800bc72:	9225      	str	r2, [sp, #148]	; 0x94
 800bc74:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 800bc78:	923a      	str	r2, [sp, #232]	; 0xe8
 800bc7a:	b19f      	cbz	r7, 800bca4 <st_sssa8_ch_convolve_dw+0x9c>
 800bc7c:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 800bc7e:	1f1c      	subs	r4, r3, #4
 800bc80:	f04f 0c01 	mov.w	ip, #1
 800bc84:	198e      	adds	r6, r1, r6
 800bc86:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800bc8a:	fa0c f003 	lsl.w	r0, ip, r3
 800bc8e:	fa05 f203 	lsl.w	r2, r5, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800bc98:	f340 84b3 	ble.w	800c602 <st_sssa8_ch_convolve_dw+0x9fa>
 800bc9c:	428e      	cmp	r6, r1
 800bc9e:	f844 2f04 	str.w	r2, [r4, #4]!
 800bca2:	d1f0      	bne.n	800bc86 <st_sssa8_ch_convolve_dw+0x7e>
 800bca4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bca6:	a944      	add	r1, sp, #272	; 0x110
 800bca8:	ab40      	add	r3, sp, #256	; 0x100
 800bcaa:	aa3c      	add	r2, sp, #240	; 0xf0
 800bcac:	943e      	str	r4, [sp, #248]	; 0xf8
 800bcae:	a848      	add	r0, sp, #288	; 0x120
 800bcb0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800bcb2:	9100      	str	r1, [sp, #0]
 800bcb4:	a952      	add	r1, sp, #328	; 0x148
 800bcb6:	943d      	str	r4, [sp, #244]	; 0xf4
 800bcb8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bcba:	9442      	str	r4, [sp, #264]	; 0x108
 800bcbc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800bcbe:	9441      	str	r4, [sp, #260]	; 0x104
 800bcc0:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800bcc2:	9446      	str	r4, [sp, #280]	; 0x118
 800bcc4:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800bcc6:	9445      	str	r4, [sp, #276]	; 0x114
 800bcc8:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800bcca:	9454      	str	r4, [sp, #336]	; 0x150
 800bccc:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 800bcce:	9455      	str	r4, [sp, #340]	; 0x154
 800bcd0:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800bcd2:	9456      	str	r4, [sp, #344]	; 0x158
 800bcd4:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 800bcd6:	9457      	str	r4, [sp, #348]	; 0x15c
 800bcd8:	f001 fa6c 	bl	800d1b4 <ai_padding_opt_init>
 800bcdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bcde:	fbb7 f3f3 	udiv	r3, r7, r3
 800bce2:	079a      	lsls	r2, r3, #30
 800bce4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bce6:	f040 8493 	bne.w	800c610 <st_sssa8_ch_convolve_dw+0xa08>
 800bcea:	109c      	asrs	r4, r3, #2
 800bcec:	2304      	movs	r3, #4
 800bcee:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf2:	425b      	negs	r3, r3
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 800bcfa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 8243 	beq.w	800c188 <st_sssa8_ch_convolve_dw+0x580>
 800bd02:	f3c9 014f 	ubfx	r1, r9, #1, #16
 800bd06:	08ba      	lsrs	r2, r7, #2
 800bd08:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800bd0a:	1e4d      	subs	r5, r1, #1
 800bd0c:	9110      	str	r1, [sp, #64]	; 0x40
 800bd0e:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 800bd10:	fa1f fa85 	uxth.w	sl, r5
 800bd14:	2500      	movs	r5, #0
 800bd16:	f101 0e20 	add.w	lr, r1, #32
 800bd1a:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800bd1c:	9536      	str	r5, [sp, #216]	; 0xd8
 800bd1e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800bd20:	f1c1 0c00 	rsb	ip, r1, #0
 800bd24:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800bd26:	9224      	str	r2, [sp, #144]	; 0x90
 800bd28:	4629      	mov	r1, r5
 800bd2a:	fb13 f300 	smulbb	r3, r3, r0
 800bd2e:	3a01      	subs	r2, #1
 800bd30:	fb01 f104 	mul.w	r1, r1, r4
 800bd34:	9826      	ldr	r0, [sp, #152]	; 0x98
 800bd36:	b292      	uxth	r2, r2
 800bd38:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800bd3a:	4440      	add	r0, r8
 800bd3c:	9135      	str	r1, [sp, #212]	; 0xd4
 800bd3e:	f102 0901 	add.w	r9, r2, #1
 800bd42:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 800bd46:	eba7 0808 	sub.w	r8, r7, r8
 800bd4a:	9029      	str	r0, [sp, #164]	; 0xa4
 800bd4c:	9112      	str	r1, [sp, #72]	; 0x48
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 800bd54:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 800bd56:	ea4f 1009 	mov.w	r0, r9, lsl #4
 800bd5a:	931c      	str	r3, [sp, #112]	; 0x70
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	9628      	str	r6, [sp, #160]	; 0xa0
 800bd60:	4401      	add	r1, r0
 800bd62:	f10a 0601 	add.w	r6, sl, #1
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	46b8      	mov	r8, r7
 800bd6a:	9130      	str	r1, [sp, #192]	; 0xc0
 800bd6c:	1821      	adds	r1, r4, r0
 800bd6e:	3301      	adds	r3, #1
 800bd70:	2400      	movs	r4, #0
 800bd72:	912d      	str	r1, [sp, #180]	; 0xb4
 800bd74:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 800bd76:	4401      	add	r1, r0
 800bd78:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800bd7a:	912c      	str	r1, [sp, #176]	; 0xb0
 800bd7c:	0059      	lsls	r1, r3, #1
 800bd7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bd80:	911e      	str	r1, [sp, #120]	; 0x78
 800bd82:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 800bd86:	912f      	str	r1, [sp, #188]	; 0xbc
 800bd88:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bd8a:	fb06 f101 	mul.w	r1, r6, r1
 800bd8e:	9116      	str	r1, [sp, #88]	; 0x58
 800bd90:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800bd94:	912b      	str	r1, [sp, #172]	; 0xac
 800bd96:	f003 0101 	and.w	r1, r3, #1
 800bd9a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800bd9c:	9111      	str	r1, [sp, #68]	; 0x44
 800bd9e:	ea4f 110a 	mov.w	r1, sl, lsl #4
 800bda2:	fb05 f303 	mul.w	r3, r5, r3
 800bda6:	912a      	str	r1, [sp, #168]	; 0xa8
 800bda8:	0131      	lsls	r1, r6, #4
 800bdaa:	933b      	str	r3, [sp, #236]	; 0xec
 800bdac:	9117      	str	r1, [sp, #92]	; 0x5c
 800bdae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bdb0:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 800bdb4:	0093      	lsls	r3, r2, #2
 800bdb6:	932e      	str	r3, [sp, #184]	; 0xb8
 800bdb8:	f007 0303 	and.w	r3, r7, #3
 800bdbc:	9322      	str	r3, [sp, #136]	; 0x88
 800bdbe:	fa1f f38c 	uxth.w	r3, ip
 800bdc2:	9334      	str	r3, [sp, #208]	; 0xd0
 800bdc4:	a848      	add	r0, sp, #288	; 0x120
 800bdc6:	f001 fa4f 	bl	800d268 <ai_padding_opt_phase1>
 800bdca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 81cd 	beq.w	800c16c <st_sssa8_ch_convolve_dw+0x564>
 800bdd2:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	46c3      	mov	fp, r8
 800bdda:	9027      	str	r0, [sp, #156]	; 0x9c
 800bddc:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800bdde:	9121      	str	r1, [sp, #132]	; 0x84
 800bde0:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 800bde4:	1a9a      	subs	r2, r3, r2
 800bde6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800bde8:	425b      	negs	r3, r3
 800bdea:	fb00 2204 	mla	r2, r0, r4, r2
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	9218      	str	r2, [sp, #96]	; 0x60
 800bdf2:	460a      	mov	r2, r1
 800bdf4:	931d      	str	r3, [sp, #116]	; 0x74
 800bdf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	9314      	str	r3, [sp, #80]	; 0x50
 800bdfc:	9b48      	ldr	r3, [sp, #288]	; 0x120
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f000 82af 	beq.w	800c362 <st_sssa8_ch_convolve_dw+0x75a>
 800be04:	3b01      	subs	r3, #1
 800be06:	2101      	movs	r1, #1
 800be08:	9348      	str	r3, [sp, #288]	; 0x120
 800be0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be0c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800be10:	2b01      	cmp	r3, #1
 800be12:	f000 82f4 	beq.w	800c3fe <st_sssa8_ch_convolve_dw+0x7f6>
 800be16:	2b04      	cmp	r3, #4
 800be18:	f000 838d 	beq.w	800c536 <st_sssa8_ch_convolve_dw+0x92e>
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800be20:	4618      	mov	r0, r3
 800be22:	f000 8330 	beq.w	800c486 <st_sssa8_ch_convolve_dw+0x87e>
 800be26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800be28:	4298      	cmp	r0, r3
 800be2a:	dd45      	ble.n	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800be2c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800be2e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800be30:	fb02 0201 	mla	r2, r2, r1, r0
 800be34:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800be36:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800be3a:	1a12      	subs	r2, r2, r0
 800be3c:	9109      	str	r1, [sp, #36]	; 0x24
 800be3e:	4291      	cmp	r1, r2
 800be40:	9203      	str	r2, [sp, #12]
 800be42:	da39      	bge.n	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800be44:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800be48:	46d9      	mov	r9, fp
 800be4a:	461a      	mov	r2, r3
 800be4c:	9305      	str	r3, [sp, #20]
 800be4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be50:	0fd2      	lsrs	r2, r2, #31
 800be52:	981a      	ldr	r0, [sp, #104]	; 0x68
 800be54:	f1ca 0b00 	rsb	fp, sl, #0
 800be58:	fb01 f103 	mul.w	r1, r1, r3
 800be5c:	4298      	cmp	r0, r3
 800be5e:	bfd8      	it	le
 800be60:	f042 0201 	orrle.w	r2, r2, #1
 800be64:	9107      	str	r1, [sp, #28]
 800be66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be68:	9204      	str	r2, [sp, #16]
 800be6a:	4688      	mov	r8, r1
 800be6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be6e:	428b      	cmp	r3, r1
 800be70:	bfcc      	ite	gt
 800be72:	2300      	movgt	r3, #0
 800be74:	2301      	movle	r3, #1
 800be76:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 800be7a:	d103      	bne.n	800be84 <st_sssa8_ch_convolve_dw+0x27c>
 800be7c:	9b04      	ldr	r3, [sp, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 81de 	beq.w	800c240 <st_sssa8_ch_convolve_dw+0x638>
 800be84:	464a      	mov	r2, r9
 800be86:	4651      	mov	r1, sl
 800be88:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 800be8c:	f001 fa08 	bl	800d2a0 <st_uint8_fill>
 800be90:	f108 0801 	add.w	r8, r8, #1
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	44ca      	add	sl, r9
 800be98:	ebab 0b09 	sub.w	fp, fp, r9
 800be9c:	fa0f f888 	sxth.w	r8, r8
 800bea0:	4598      	cmp	r8, r3
 800bea2:	4641      	mov	r1, r8
 800bea4:	dbe2      	blt.n	800be6c <st_sssa8_ch_convolve_dw+0x264>
 800bea6:	9b05      	ldr	r3, [sp, #20]
 800bea8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800beaa:	3301      	adds	r3, #1
 800beac:	b21b      	sxth	r3, r3
 800beae:	428b      	cmp	r3, r1
 800beb0:	461a      	mov	r2, r3
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	dbcb      	blt.n	800be4e <st_sssa8_ch_convolve_dw+0x246>
 800beb6:	46cb      	mov	fp, r9
 800beb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 8288 	beq.w	800c3d0 <st_sssa8_ch_convolve_dw+0x7c8>
 800bec0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bec2:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 800bec4:	f102 0810 	add.w	r8, r2, #16
 800bec8:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 800beca:	3310      	adds	r3, #16
 800becc:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800bed0:	3204      	adds	r2, #4
 800bed2:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 800bed6:	9309      	str	r3, [sp, #36]	; 0x24
 800bed8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800beda:	9205      	str	r2, [sp, #20]
 800bedc:	3308      	adds	r3, #8
 800bede:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bee0:	9306      	str	r3, [sp, #24]
 800bee2:	9208      	str	r2, [sp, #32]
 800bee4:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800bee6:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 800beea:	3310      	adds	r3, #16
 800beec:	3220      	adds	r2, #32
 800beee:	f8cd c01c 	str.w	ip, [sp, #28]
 800bef2:	469b      	mov	fp, r3
 800bef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef6:	9213      	str	r2, [sp, #76]	; 0x4c
 800bef8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800befc:	920e      	str	r2, [sp, #56]	; 0x38
 800befe:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800bf02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf06:	9908      	ldr	r1, [sp, #32]
 800bf08:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 800bf0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d04b      	beq.n	800bfaa <st_sssa8_ch_convolve_dw+0x3a2>
 800bf12:	9b07      	ldr	r3, [sp, #28]
 800bf14:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bf16:	461a      	mov	r2, r3
 800bf18:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800bf1c:	eb03 0c07 	add.w	ip, r3, r7
 800bf20:	464f      	mov	r7, r9
 800bf22:	3210      	adds	r2, #16
 800bf24:	e9cd 8b0c 	strd	r8, fp, [sp, #48]	; 0x30
 800bf28:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800bf2c:	e9cd 4003 	strd	r4, r0, [sp, #12]
 800bf30:	f8d1 8000 	ldr.w	r8, [r1]
 800bf34:	f851 900a 	ldr.w	r9, [r1, sl]
 800bf38:	4bc0      	ldr	r3, [pc, #768]	; (800c23c <st_sssa8_ch_convolve_dw+0x634>)
 800bf3a:	fa1f fe88 	uxth.w	lr, r8
 800bf3e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800bf42:	ea09 0303 	and.w	r3, r9, r3
 800bf46:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 800bf4a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800bf4e:	fa27 f88e 	sxtab16	r8, r7, lr
 800bf52:	fb20 6608 	smlad	r6, r0, r8, r6
 800bf56:	ea4f 2e3e 	mov.w	lr, lr, ror #8
 800bf5a:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800bf5e:	fa27 fe8e 	sxtab16	lr, r7, lr
 800bf62:	fb20 550e 	smlad	r5, r0, lr, r5
 800bf66:	fa27 fe83 	sxtab16	lr, r7, r3
 800bf6a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800bf6e:	9c03      	ldr	r4, [sp, #12]
 800bf70:	fb20 400e 	smlad	r0, r0, lr, r4
 800bf74:	9003      	str	r0, [sp, #12]
 800bf76:	ea4f 2333 	mov.w	r3, r3, ror #8
 800bf7a:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bf7e:	fa27 f383 	sxtab16	r3, r7, r3
 800bf82:	9c04      	ldr	r4, [sp, #16]
 800bf84:	fb20 4303 	smlad	r3, r0, r3, r4
 800bf88:	3210      	adds	r2, #16
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	4459      	add	r1, fp
 800bf8e:	4594      	cmp	ip, r2
 800bf90:	d1ce      	bne.n	800bf30 <st_sssa8_ch_convolve_dw+0x328>
 800bf92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf94:	4618      	mov	r0, r3
 800bf96:	9b07      	ldr	r3, [sp, #28]
 800bf98:	46b9      	mov	r9, r7
 800bf9a:	9c03      	ldr	r4, [sp, #12]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	9a08      	ldr	r2, [sp, #32]
 800bfa0:	9307      	str	r3, [sp, #28]
 800bfa2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bfa4:	e9dd 8b0c 	ldrd	r8, fp, [sp, #48]	; 0x30
 800bfa8:	1899      	adds	r1, r3, r2
 800bfaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfac:	b30b      	cbz	r3, 800bff2 <st_sssa8_ch_convolve_dw+0x3ea>
 800bfae:	680b      	ldr	r3, [r1, #0]
 800bfb0:	9a07      	ldr	r2, [sp, #28]
 800bfb2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bfb4:	fa4f fc83 	sxtb.w	ip, r3
 800bfb8:	f8b2 e000 	ldrh.w	lr, [r2]
 800bfbc:	f343 2107 	sbfx	r1, r3, #8, #8
 800bfc0:	f343 4207 	sbfx	r2, r3, #16, #8
 800bfc4:	ebc7 6a23 	rsb	sl, r7, r3, asr #24
 800bfc8:	ebac 0c07 	sub.w	ip, ip, r7
 800bfcc:	1bc9      	subs	r1, r1, r7
 800bfce:	1bd2      	subs	r2, r2, r7
 800bfd0:	9f07      	ldr	r7, [sp, #28]
 800bfd2:	fb1e 660c 	smlabb	r6, lr, ip, r6
 800bfd6:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800bfda:	463b      	mov	r3, r7
 800bfdc:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 800bfe0:	fb1c 5501 	smlabb	r5, ip, r1, r5
 800bfe4:	88f9      	ldrh	r1, [r7, #6]
 800bfe6:	fb1e 4402 	smlabb	r4, lr, r2, r4
 800bfea:	3308      	adds	r3, #8
 800bfec:	fb11 000a 	smlabb	r0, r1, sl, r0
 800bff0:	9307      	str	r3, [sp, #28]
 800bff2:	9b06      	ldr	r3, [sp, #24]
 800bff4:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 800bff8:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800bffc:	f858 2c10 	ldr.w	r2, [r8, #-16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	f340 80fe 	ble.w	800c202 <st_sssa8_ch_convolve_dw+0x5fa>
 800c006:	0076      	lsls	r6, r6, #1
 800c008:	fb56 2601 	smmla	r6, r6, r1, r2
 800c00c:	411e      	asrs	r6, r3
 800c00e:	f306 0607 	ssat	r6, #8, r6
 800c012:	9b05      	ldr	r3, [sp, #20]
 800c014:	f803 6c04 	strb.w	r6, [r3, #-4]
 800c018:	9b06      	ldr	r3, [sp, #24]
 800c01a:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 800c01e:	2900      	cmp	r1, #0
 800c020:	f340 80dc 	ble.w	800c1dc <st_sssa8_ch_convolve_dw+0x5d4>
 800c024:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 800c028:	006d      	lsls	r5, r5, #1
 800c02a:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 800c02e:	fb55 2503 	smmla	r5, r5, r3, r2
 800c032:	410d      	asrs	r5, r1
 800c034:	f305 0507 	ssat	r5, #8, r5
 800c038:	9b05      	ldr	r3, [sp, #20]
 800c03a:	f803 5c03 	strb.w	r5, [r3, #-3]
 800c03e:	9b06      	ldr	r3, [sp, #24]
 800c040:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800c044:	2900      	cmp	r1, #0
 800c046:	f340 80b6 	ble.w	800c1b6 <st_sssa8_ch_convolve_dw+0x5ae>
 800c04a:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 800c04e:	0064      	lsls	r4, r4, #1
 800c050:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800c054:	fb54 2403 	smmla	r4, r4, r3, r2
 800c058:	410c      	asrs	r4, r1
 800c05a:	f304 0407 	ssat	r4, #8, r4
 800c05e:	9b05      	ldr	r3, [sp, #20]
 800c060:	f803 4c02 	strb.w	r4, [r3, #-2]
 800c064:	9b06      	ldr	r3, [sp, #24]
 800c066:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800c06a:	2900      	cmp	r1, #0
 800c06c:	f340 8090 	ble.w	800c190 <st_sssa8_ch_convolve_dw+0x588>
 800c070:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800c074:	0040      	lsls	r0, r0, #1
 800c076:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c07a:	fb50 2003 	smmla	r0, r0, r3, r2
 800c07e:	4108      	asrs	r0, r1
 800c080:	f300 0007 	ssat	r0, #8, r0
 800c084:	9b05      	ldr	r3, [sp, #20]
 800c086:	f803 0c01 	strb.w	r0, [r3, #-1]
 800c08a:	9a06      	ldr	r2, [sp, #24]
 800c08c:	f10b 0b10 	add.w	fp, fp, #16
 800c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c092:	f108 0810 	add.w	r8, r8, #16
 800c096:	3208      	adds	r2, #8
 800c098:	3310      	adds	r3, #16
 800c09a:	9206      	str	r2, [sp, #24]
 800c09c:	9a05      	ldr	r2, [sp, #20]
 800c09e:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a0:	3204      	adds	r2, #4
 800c0a2:	9205      	str	r2, [sp, #20]
 800c0a4:	9a08      	ldr	r2, [sp, #32]
 800c0a6:	3204      	adds	r2, #4
 800c0a8:	9208      	str	r2, [sp, #32]
 800c0aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	f47f af26 	bne.w	800befe <st_sssa8_ch_convolve_dw+0x2f6>
 800c0b2:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 800c0b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c0b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800c0c0:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 800c0c4:	9373      	str	r3, [sp, #460]	; 0x1cc
 800c0c6:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 800c0ca:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 800c0ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d03d      	beq.n	800c150 <st_sssa8_ch_convolve_dw+0x548>
 800c0d4:	4433      	add	r3, r6
 800c0d6:	f1ae 0704 	sub.w	r7, lr, #4
 800c0da:	f1a9 0902 	sub.w	r9, r9, #2
 800c0de:	f1a8 0804 	sub.w	r8, r8, #4
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 800c0e8:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 800c0ec:	9303      	str	r3, [sp, #12]
 800c0ee:	1c73      	adds	r3, r6, #1
 800c0f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c0f2:	1991      	adds	r1, r2, r6
 800c0f4:	b29e      	uxth	r6, r3
 800c0f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c0f8:	f85a 2b04 	ldr.w	r2, [sl], #4
 800c0fc:	b163      	cbz	r3, 800c118 <st_sssa8_ch_convolve_dw+0x510>
 800c0fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c100:	eb0c 0403 	add.w	r4, ip, r3
 800c104:	f991 3000 	ldrsb.w	r3, [r1]
 800c108:	4459      	add	r1, fp
 800c10a:	f83c 0b02 	ldrh.w	r0, [ip], #2
 800c10e:	1b5b      	subs	r3, r3, r5
 800c110:	45a4      	cmp	ip, r4
 800c112:	fb10 2203 	smlabb	r2, r0, r3, r2
 800c116:	d1f5      	bne.n	800c104 <st_sssa8_ch_convolve_dw+0x4fc>
 800c118:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
 800c11c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800c120:	2b00      	cmp	r3, #0
 800c122:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800c126:	dd7b      	ble.n	800c220 <st_sssa8_ch_convolve_dw+0x618>
 800c128:	0052      	lsls	r2, r2, #1
 800c12a:	fb52 1200 	smmla	r2, r2, r0, r1
 800c12e:	411a      	asrs	r2, r3
 800c130:	f302 0207 	ssat	r2, #8, r2
 800c134:	f88e 2000 	strb.w	r2, [lr]
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	f10e 0e01 	add.w	lr, lr, #1
 800c13e:	429e      	cmp	r6, r3
 800c140:	d1d5      	bne.n	800c0ee <st_sssa8_ch_convolve_dw+0x4e6>
 800c142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c144:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 800c146:	3b01      	subs	r3, #1
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3301      	adds	r3, #1
 800c14c:	441a      	add	r2, r3
 800c14e:	9273      	str	r2, [sp, #460]	; 0x1cc
 800c150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c152:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c156:	440b      	add	r3, r1
 800c158:	3201      	adds	r2, #1
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	b212      	sxth	r2, r2
 800c15e:	931d      	str	r3, [sp, #116]	; 0x74
 800c160:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c162:	9221      	str	r2, [sp, #132]	; 0x84
 800c164:	4293      	cmp	r3, r2
 800c166:	f73f ae49 	bgt.w	800bdfc <st_sssa8_ch_convolve_dw+0x1f4>
 800c16a:	46d8      	mov	r8, fp
 800c16c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c16e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800c170:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800c172:	440b      	add	r3, r1
 800c174:	3201      	adds	r2, #1
 800c176:	b29b      	uxth	r3, r3
 800c178:	b212      	sxth	r2, r2
 800c17a:	9334      	str	r3, [sp, #208]	; 0xd0
 800c17c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800c17e:	4614      	mov	r4, r2
 800c180:	9236      	str	r2, [sp, #216]	; 0xd8
 800c182:	4293      	cmp	r3, r2
 800c184:	f73f ae1e 	bgt.w	800bdc4 <st_sssa8_ch_convolve_dw+0x1bc>
 800c188:	2000      	movs	r0, #0
 800c18a:	b05d      	add	sp, #372	; 0x174
 800c18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c190:	f1c1 0101 	rsb	r1, r1, #1
 800c194:	fa00 f201 	lsl.w	r2, r0, r1
 800c198:	f302 021f 	ssat	r2, #32, r2
 800c19c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800c1a0:	fb52 f213 	smmulr	r2, r2, r3
 800c1a4:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f303 0307 	ssat	r3, #8, r3
 800c1ae:	9a05      	ldr	r2, [sp, #20]
 800c1b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c1b4:	e769      	b.n	800c08a <st_sssa8_ch_convolve_dw+0x482>
 800c1b6:	f1c1 0101 	rsb	r1, r1, #1
 800c1ba:	fa04 f201 	lsl.w	r2, r4, r1
 800c1be:	f302 021f 	ssat	r2, #32, r2
 800c1c2:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 800c1c6:	fb52 f213 	smmulr	r2, r2, r3
 800c1ca:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f303 0307 	ssat	r3, #8, r3
 800c1d4:	9a05      	ldr	r2, [sp, #20]
 800c1d6:	f802 3c02 	strb.w	r3, [r2, #-2]
 800c1da:	e743      	b.n	800c064 <st_sssa8_ch_convolve_dw+0x45c>
 800c1dc:	f1c1 0101 	rsb	r1, r1, #1
 800c1e0:	fa05 f201 	lsl.w	r2, r5, r1
 800c1e4:	f302 021f 	ssat	r2, #32, r2
 800c1e8:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 800c1ec:	fb52 f213 	smmulr	r2, r2, r3
 800c1f0:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	f303 0307 	ssat	r3, #8, r3
 800c1fa:	9a05      	ldr	r2, [sp, #20]
 800c1fc:	f802 3c03 	strb.w	r3, [r2, #-3]
 800c200:	e71d      	b.n	800c03e <st_sssa8_ch_convolve_dw+0x436>
 800c202:	f1c3 0301 	rsb	r3, r3, #1
 800c206:	fa06 f303 	lsl.w	r3, r6, r3
 800c20a:	f303 031f 	ssat	r3, #32, r3
 800c20e:	fb53 f311 	smmulr	r3, r3, r1
 800c212:	4413      	add	r3, r2
 800c214:	f303 0307 	ssat	r3, #8, r3
 800c218:	9a05      	ldr	r2, [sp, #20]
 800c21a:	f802 3c04 	strb.w	r3, [r2, #-4]
 800c21e:	e6fb      	b.n	800c018 <st_sssa8_ch_convolve_dw+0x410>
 800c220:	f1c3 0301 	rsb	r3, r3, #1
 800c224:	fa02 f303 	lsl.w	r3, r2, r3
 800c228:	f303 031f 	ssat	r3, #32, r3
 800c22c:	fb53 f310 	smmulr	r3, r3, r0
 800c230:	440b      	add	r3, r1
 800c232:	f303 0307 	ssat	r3, #8, r3
 800c236:	f88e 3000 	strb.w	r3, [lr]
 800c23a:	e77d      	b.n	800c138 <st_sssa8_ch_convolve_dw+0x530>
 800c23c:	ffff0000 	.word	0xffff0000
 800c240:	9b07      	ldr	r3, [sp, #28]
 800c242:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c244:	4419      	add	r1, r3
 800c246:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c248:	fb03 0101 	mla	r1, r3, r1, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f43f ae1f 	beq.w	800be90 <st_sssa8_ch_convolve_dw+0x288>
 800c252:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c254:	2f00      	cmp	r7, #0
 800c256:	f43f ae1b 	beq.w	800be90 <st_sssa8_ch_convolve_dw+0x288>
 800c25a:	18ca      	adds	r2, r1, r3
 800c25c:	1ebb      	subs	r3, r7, #2
 800c25e:	465c      	mov	r4, fp
 800c260:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c264:	9306      	str	r3, [sp, #24]
 800c266:	1efb      	subs	r3, r7, #3
 800c268:	4650      	mov	r0, sl
 800c26a:	46a1      	mov	r9, r4
 800c26c:	9308      	str	r3, [sp, #32]
 800c26e:	1f3b      	subs	r3, r7, #4
 800c270:	e9cd 8b0e 	strd	r8, fp, [sp, #56]	; 0x38
 800c274:	4693      	mov	fp, r2
 800c276:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 800c27a:	19c6      	adds	r6, r0, r7
 800c27c:	f101 0e01 	add.w	lr, r1, #1
 800c280:	42b1      	cmp	r1, r6
 800c282:	bf38      	it	cc
 800c284:	4570      	cmpcc	r0, lr
 800c286:	d362      	bcc.n	800c34e <st_sssa8_ch_convolve_dw+0x746>
 800c288:	2f0b      	cmp	r7, #11
 800c28a:	d960      	bls.n	800c34e <st_sssa8_ch_convolve_dw+0x746>
 800c28c:	f009 0303 	and.w	r3, r9, #3
 800c290:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800c292:	1cda      	adds	r2, r3, #3
 800c294:	42a2      	cmp	r2, r4
 800c296:	f200 80a5 	bhi.w	800c3e4 <st_sssa8_ch_convolve_dw+0x7dc>
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d05e      	beq.n	800c35c <st_sssa8_ch_convolve_dw+0x754>
 800c29e:	780a      	ldrb	r2, [r1, #0]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	f100 0a01 	add.w	sl, r0, #1
 800c2a6:	9d06      	ldr	r5, [sp, #24]
 800c2a8:	7002      	strb	r2, [r0, #0]
 800c2aa:	d00b      	beq.n	800c2c4 <st_sssa8_ch_convolve_dw+0x6bc>
 800c2ac:	780a      	ldrb	r2, [r1, #0]
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	f100 0a02 	add.w	sl, r0, #2
 800c2b4:	9d08      	ldr	r5, [sp, #32]
 800c2b6:	7042      	strb	r2, [r0, #1]
 800c2b8:	d104      	bne.n	800c2c4 <st_sssa8_ch_convolve_dw+0x6bc>
 800c2ba:	780a      	ldrb	r2, [r1, #0]
 800c2bc:	f100 0a03 	add.w	sl, r0, #3
 800c2c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2c2:	7082      	strb	r2, [r0, #2]
 800c2c4:	f891 c000 	ldrb.w	ip, [r1]
 800c2c8:	2400      	movs	r4, #0
 800c2ca:	eba7 0803 	sub.w	r8, r7, r3
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f36c 0407 	bfi	r4, ip, #0, #8
 800c2d4:	4403      	add	r3, r0
 800c2d6:	ea4f 0098 	mov.w	r0, r8, lsr #2
 800c2da:	f36c 240f 	bfi	r4, ip, #8, #8
 800c2de:	f36c 4417 	bfi	r4, ip, #16, #8
 800c2e2:	f36c 641f 	bfi	r4, ip, #24, #8
 800c2e6:	3201      	adds	r2, #1
 800c2e8:	f843 4b04 	str.w	r4, [r3], #4
 800c2ec:	4282      	cmp	r2, r0
 800c2ee:	d3fa      	bcc.n	800c2e6 <st_sssa8_ch_convolve_dw+0x6de>
 800c2f0:	f028 0203 	bic.w	r2, r8, #3
 800c2f4:	4542      	cmp	r2, r8
 800c2f6:	4492      	add	sl, r2
 800c2f8:	eba5 0502 	sub.w	r5, r5, r2
 800c2fc:	d01a      	beq.n	800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c2fe:	780b      	ldrb	r3, [r1, #0]
 800c300:	f88a 3000 	strb.w	r3, [sl]
 800c304:	b1b5      	cbz	r5, 800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c306:	780b      	ldrb	r3, [r1, #0]
 800c308:	2d01      	cmp	r5, #1
 800c30a:	f88a 3001 	strb.w	r3, [sl, #1]
 800c30e:	d011      	beq.n	800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c310:	780b      	ldrb	r3, [r1, #0]
 800c312:	2d02      	cmp	r5, #2
 800c314:	f88a 3002 	strb.w	r3, [sl, #2]
 800c318:	d00c      	beq.n	800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c31a:	780b      	ldrb	r3, [r1, #0]
 800c31c:	2d03      	cmp	r5, #3
 800c31e:	f88a 3003 	strb.w	r3, [sl, #3]
 800c322:	d007      	beq.n	800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c324:	780b      	ldrb	r3, [r1, #0]
 800c326:	2d04      	cmp	r5, #4
 800c328:	f88a 3004 	strb.w	r3, [sl, #4]
 800c32c:	d002      	beq.n	800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c32e:	780b      	ldrb	r3, [r1, #0]
 800c330:	f88a 3005 	strb.w	r3, [sl, #5]
 800c334:	45de      	cmp	lr, fp
 800c336:	4671      	mov	r1, lr
 800c338:	4630      	mov	r0, r6
 800c33a:	eba9 0907 	sub.w	r9, r9, r7
 800c33e:	d19c      	bne.n	800c27a <st_sssa8_ch_convolve_dw+0x672>
 800c340:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800c344:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800c348:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 800c34c:	e5a0      	b.n	800be90 <st_sssa8_ch_convolve_dw+0x288>
 800c34e:	4603      	mov	r3, r0
 800c350:	780a      	ldrb	r2, [r1, #0]
 800c352:	f803 2b01 	strb.w	r2, [r3], #1
 800c356:	429e      	cmp	r6, r3
 800c358:	d1fa      	bne.n	800c350 <st_sssa8_ch_convolve_dw+0x748>
 800c35a:	e7eb      	b.n	800c334 <st_sssa8_ch_convolve_dw+0x72c>
 800c35c:	4625      	mov	r5, r4
 800c35e:	4682      	mov	sl, r0
 800c360:	e7b0      	b.n	800c2c4 <st_sssa8_ch_convolve_dw+0x6bc>
 800c362:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800c364:	2b00      	cmp	r3, #0
 800c366:	d040      	beq.n	800c3ea <st_sssa8_ch_convolve_dw+0x7e2>
 800c368:	3b01      	subs	r3, #1
 800c36a:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 800c36e:	9349      	str	r3, [sp, #292]	; 0x124
 800c370:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c372:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800c376:	2b01      	cmp	r3, #1
 800c378:	f47f ad4d 	bne.w	800be16 <st_sssa8_ch_convolve_dw+0x20e>
 800c37c:	2901      	cmp	r1, #1
 800c37e:	d03e      	beq.n	800c3fe <st_sssa8_ch_convolve_dw+0x7f6>
 800c380:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c382:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c384:	f9bd 5074 	ldrsh.w	r5, [sp, #116]	; 0x74
 800c388:	4297      	cmp	r7, r2
 800c38a:	f77f ad95 	ble.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c38e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c390:	4614      	mov	r4, r2
 800c392:	f8cd b00c 	str.w	fp, [sp, #12]
 800c396:	4610      	mov	r0, r2
 800c398:	46b3      	mov	fp, r6
 800c39a:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 800c39e:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 800c3a2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c3a6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800c3a8:	3401      	adds	r4, #1
 800c3aa:	fb00 500a 	mla	r0, r0, sl, r5
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	b224      	sxth	r4, r4
 800c3b4:	fb06 9000 	mla	r0, r6, r0, r9
 800c3b8:	f002 fa4e 	bl	800e858 <arm_copy_q7>
 800c3bc:	44c3      	add	fp, r8
 800c3be:	42bc      	cmp	r4, r7
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	dbf1      	blt.n	800c3a8 <st_sssa8_ch_convolve_dw+0x7a0>
 800c3c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c3c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f47f ad78 	bne.w	800bec0 <st_sssa8_ch_convolve_dw+0x2b8>
 800c3d0:	461e      	mov	r6, r3
 800c3d2:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800c3d6:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 800c3da:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 800c3de:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 800c3e2:	e674      	b.n	800c0ce <st_sssa8_ch_convolve_dw+0x4c6>
 800c3e4:	4625      	mov	r5, r4
 800c3e6:	4682      	mov	sl, r0
 800c3e8:	e789      	b.n	800c2fe <st_sssa8_ch_convolve_dw+0x6f6>
 800c3ea:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800c3f4:	934a      	str	r3, [sp, #296]	; 0x128
 800c3f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	f47f ad0c 	bne.w	800be16 <st_sssa8_ch_convolve_dw+0x20e>
 800c3fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c400:	4618      	mov	r0, r3
 800c402:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c404:	4298      	cmp	r0, r3
 800c406:	f77f ad57 	ble.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c40a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c40c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c40e:	fb02 0201 	mla	r2, r2, r1, r0
 800c412:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c414:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800c418:	1a15      	subs	r5, r2, r0
 800c41a:	9104      	str	r1, [sp, #16]
 800c41c:	428d      	cmp	r5, r1
 800c41e:	f77f ad4b 	ble.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c422:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c426:	4698      	mov	r8, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800c42e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c430:	fb06 f302 	mul.w	r3, r6, r2
 800c434:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 800c438:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c43c:	9303      	str	r3, [sp, #12]
 800c43e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c440:	4664      	mov	r4, ip
 800c442:	4293      	cmp	r3, r2
 800c444:	bfd8      	it	le
 800c446:	f047 0701 	orrle.w	r7, r7, #1
 800c44a:	4566      	cmp	r6, ip
 800c44c:	465a      	mov	r2, fp
 800c44e:	4651      	mov	r1, sl
 800c450:	4648      	mov	r0, r9
 800c452:	bfcc      	ite	gt
 800c454:	2300      	movgt	r3, #0
 800c456:	2301      	movle	r3, #1
 800c458:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800c45c:	d102      	bne.n	800c464 <st_sssa8_ch_convolve_dw+0x85c>
 800c45e:	2f00      	cmp	r7, #0
 800c460:	f000 80c4 	beq.w	800c5ec <st_sssa8_ch_convolve_dw+0x9e4>
 800c464:	f000 ff1c 	bl	800d2a0 <st_uint8_fill>
 800c468:	3401      	adds	r4, #1
 800c46a:	44da      	add	sl, fp
 800c46c:	b224      	sxth	r4, r4
 800c46e:	42ac      	cmp	r4, r5
 800c470:	46a4      	mov	ip, r4
 800c472:	dbea      	blt.n	800c44a <st_sssa8_ch_convolve_dw+0x842>
 800c474:	f108 0801 	add.w	r8, r8, #1
 800c478:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c47a:	fa0f f888 	sxth.w	r8, r8
 800c47e:	4598      	cmp	r8, r3
 800c480:	4642      	mov	r2, r8
 800c482:	dbd5      	blt.n	800c430 <st_sssa8_ch_convolve_dw+0x828>
 800c484:	e518      	b.n	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c486:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c488:	4288      	cmp	r0, r1
 800c48a:	f77f ad15 	ble.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c48e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c490:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c492:	fb02 0203 	mla	r2, r2, r3, r0
 800c496:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c498:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800c49c:	1a15      	subs	r5, r2, r0
 800c49e:	9304      	str	r3, [sp, #16]
 800c4a0:	42ab      	cmp	r3, r5
 800c4a2:	f6bf ad09 	bge.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c4a6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c4aa:	460e      	mov	r6, r1
 800c4ac:	4689      	mov	r9, r1
 800c4ae:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c4b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c4b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c4b6:	9a04      	ldr	r2, [sp, #16]
 800c4b8:	454b      	cmp	r3, r9
 800c4ba:	fb09 f307 	mul.w	r3, r9, r7
 800c4be:	4614      	mov	r4, r2
 800c4c0:	bfcc      	ite	gt
 800c4c2:	2100      	movgt	r1, #0
 800c4c4:	2101      	movle	r1, #1
 800c4c6:	9303      	str	r3, [sp, #12]
 800c4c8:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 800c4cc:	464b      	mov	r3, r9
 800c4ce:	46b1      	mov	r9, r6
 800c4d0:	461e      	mov	r6, r3
 800c4d2:	4297      	cmp	r7, r2
 800c4d4:	bfcc      	ite	gt
 800c4d6:	2300      	movgt	r3, #0
 800c4d8:	2301      	movle	r3, #1
 800c4da:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800c4de:	d100      	bne.n	800c4e2 <st_sssa8_ch_convolve_dw+0x8da>
 800c4e0:	b196      	cbz	r6, 800c508 <st_sssa8_ch_convolve_dw+0x900>
 800c4e2:	465a      	mov	r2, fp
 800c4e4:	4651      	mov	r1, sl
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f000 feda 	bl	800d2a0 <st_uint8_fill>
 800c4ec:	3401      	adds	r4, #1
 800c4ee:	44da      	add	sl, fp
 800c4f0:	b224      	sxth	r4, r4
 800c4f2:	42ac      	cmp	r4, r5
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	dbec      	blt.n	800c4d2 <st_sssa8_ch_convolve_dw+0x8ca>
 800c4f8:	464e      	mov	r6, r9
 800c4fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4fc:	3601      	adds	r6, #1
 800c4fe:	b236      	sxth	r6, r6
 800c500:	429e      	cmp	r6, r3
 800c502:	46b1      	mov	r9, r6
 800c504:	dbd6      	blt.n	800c4b4 <st_sssa8_ch_convolve_dw+0x8ac>
 800c506:	e4d7      	b.n	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c508:	9b03      	ldr	r3, [sp, #12]
 800c50a:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c50c:	441a      	add	r2, r3
 800c50e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c510:	fb03 0102 	mla	r1, r3, r2, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0e9      	beq.n	800c4ec <st_sssa8_ch_convolve_dw+0x8e4>
 800c518:	eb01 0c03 	add.w	ip, r1, r3
 800c51c:	4650      	mov	r0, sl
 800c51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	4561      	cmp	r1, ip
 800c526:	ea4f 2233 	mov.w	r2, r3, ror #8
 800c52a:	fa33 f382 	uxtab16	r3, r3, r2
 800c52e:	f820 3b02 	strh.w	r3, [r0], #2
 800c532:	d1f4      	bne.n	800c51e <st_sssa8_ch_convolve_dw+0x916>
 800c534:	e7da      	b.n	800c4ec <st_sssa8_ch_convolve_dw+0x8e4>
 800c536:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c538:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800c53a:	4618      	mov	r0, r3
 800c53c:	4288      	cmp	r0, r1
 800c53e:	f77f acbb 	ble.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c544:	9833      	ldr	r0, [sp, #204]	; 0xcc
 800c546:	fb02 0203 	mla	r2, r2, r3, r0
 800c54a:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800c54c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800c550:	1a15      	subs	r5, r2, r0
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	42ab      	cmp	r3, r5
 800c556:	f6bf acaf 	bge.w	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c55a:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c55e:	4689      	mov	r9, r1
 800c560:	460a      	mov	r2, r1
 800c562:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c566:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c568:	fb06 f302 	mul.w	r3, r6, r2
 800c56c:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 800c570:	9904      	ldr	r1, [sp, #16]
 800c572:	9303      	str	r3, [sp, #12]
 800c574:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c576:	460c      	mov	r4, r1
 800c578:	4293      	cmp	r3, r2
 800c57a:	bfd8      	it	le
 800c57c:	f047 0701 	orrle.w	r7, r7, #1
 800c580:	428e      	cmp	r6, r1
 800c582:	bfcc      	ite	gt
 800c584:	2300      	movgt	r3, #0
 800c586:	2301      	movle	r3, #1
 800c588:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 800c58c:	d100      	bne.n	800c590 <st_sssa8_ch_convolve_dw+0x988>
 800c58e:	b19f      	cbz	r7, 800c5b8 <st_sssa8_ch_convolve_dw+0x9b0>
 800c590:	465a      	mov	r2, fp
 800c592:	4651      	mov	r1, sl
 800c594:	4640      	mov	r0, r8
 800c596:	f000 fe83 	bl	800d2a0 <st_uint8_fill>
 800c59a:	3401      	adds	r4, #1
 800c59c:	44da      	add	sl, fp
 800c59e:	b224      	sxth	r4, r4
 800c5a0:	42ac      	cmp	r4, r5
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	dbec      	blt.n	800c580 <st_sssa8_ch_convolve_dw+0x978>
 800c5a6:	f109 0901 	add.w	r9, r9, #1
 800c5aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c5ac:	fa0f f989 	sxth.w	r9, r9
 800c5b0:	4599      	cmp	r9, r3
 800c5b2:	464a      	mov	r2, r9
 800c5b4:	dbd8      	blt.n	800c568 <st_sssa8_ch_convolve_dw+0x960>
 800c5b6:	e47f      	b.n	800beb8 <st_sssa8_ch_convolve_dw+0x2b0>
 800c5b8:	9b03      	ldr	r3, [sp, #12]
 800c5ba:	185a      	adds	r2, r3, r1
 800c5bc:	e9dd 311f 	ldrd	r3, r1, [sp, #124]	; 0x7c
 800c5c0:	fb03 1202 	mla	r2, r3, r2, r1
 800c5c4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d0e7      	beq.n	800c59a <st_sssa8_ch_convolve_dw+0x992>
 800c5ca:	18d0      	adds	r0, r2, r3
 800c5cc:	4651      	mov	r1, sl
 800c5ce:	f812 cb01 	ldrb.w	ip, [r2], #1
 800c5d2:	ea4f 630c 	mov.w	r3, ip, lsl #24
 800c5d6:	4282      	cmp	r2, r0
 800c5d8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c5dc:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800c5e0:	fa33 f38c 	uxtab16	r3, r3, ip
 800c5e4:	f841 3b04 	str.w	r3, [r1], #4
 800c5e8:	d1f1      	bne.n	800c5ce <st_sssa8_ch_convolve_dw+0x9c6>
 800c5ea:	e7d6      	b.n	800c59a <st_sssa8_ch_convolve_dw+0x992>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	eb03 000c 	add.w	r0, r3, ip
 800c5f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c5f8:	fb02 3000 	mla	r0, r2, r0, r3
 800c5fc:	f002 f92c 	bl	800e858 <arm_copy_q7>
 800c600:	e732      	b.n	800c468 <st_sssa8_ch_convolve_dw+0x860>
 800c602:	428e      	cmp	r6, r1
 800c604:	f844 5f04 	str.w	r5, [r4, #4]!
 800c608:	f47f ab3d 	bne.w	800bc86 <st_sssa8_ch_convolve_dw+0x7e>
 800c60c:	f7ff bb4a 	b.w	800bca4 <st_sssa8_ch_convolve_dw+0x9c>
 800c610:	2401      	movs	r4, #1
 800c612:	f7ff bb6d 	b.w	800bcf0 <st_sssa8_ch_convolve_dw+0xe8>
 800c616:	bf00      	nop

0800c618 <st_sssa8_ch_convolve_rank1upd>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	b083      	sub	sp, #12
 800c61e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c622:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 800c626:	fb13 f304 	smulbb	r3, r3, r4
 800c62a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c62c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800c630:	fb13 f600 	smulbb	r6, r3, r0
 800c634:	2a00      	cmp	r2, #0
 800c636:	d06c      	beq.n	800c712 <st_sssa8_ch_convolve_rank1upd+0xfa>
 800c638:	b2b6      	uxth	r6, r6
 800c63a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800c63e:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800c642:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 800c646:	f006 0603 	and.w	r6, r6, #3
 800c64a:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 800c64e:	f1a9 0904 	sub.w	r9, r9, #4
 800c652:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 800c656:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 800c65a:	44a9      	add	r9, r5
 800c65c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800c660:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 800c664:	3301      	adds	r3, #1
 800c666:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 800c66a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 800c66e:	b293      	uxth	r3, r2
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800c676:	d94f      	bls.n	800c718 <st_sssa8_ch_convolve_rank1upd+0x100>
 800c678:	eb01 050c 	add.w	r5, r1, ip
 800c67c:	2400      	movs	r4, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800c684:	461f      	mov	r7, r3
 800c686:	f851 2b04 	ldr.w	r2, [r1], #4
 800c68a:	fa2f f382 	sxtb16	r3, r2
 800c68e:	4288      	cmp	r0, r1
 800c690:	ea4f 2232 	mov.w	r2, r2, ror #8
 800c694:	fa97 f313 	qadd16	r3, r7, r3
 800c698:	fa2f f282 	sxtb16	r2, r2
 800c69c:	fa93 f712 	qadd16	r7, r3, r2
 800c6a0:	d1f1      	bne.n	800c686 <st_sssa8_ch_convolve_rank1upd+0x6e>
 800c6a2:	b23a      	sxth	r2, r7
 800c6a4:	4285      	cmp	r5, r0
 800c6a6:	4601      	mov	r1, r0
 800c6a8:	eb02 4327 	add.w	r3, r2, r7, asr #16
 800c6ac:	441c      	add	r4, r3
 800c6ae:	d1e6      	bne.n	800c67e <st_sssa8_ch_convolve_rank1upd+0x66>
 800c6b0:	9801      	ldr	r0, [sp, #4]
 800c6b2:	b1b8      	cbz	r0, 800c6e4 <st_sssa8_ch_convolve_rank1upd+0xcc>
 800c6b4:	3801      	subs	r0, #1
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	b280      	uxth	r0, r0
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800c6c0:	f851 3b04 	ldr.w	r3, [r1], #4
 800c6c4:	fa2f f583 	sxtb16	r5, r3
 800c6c8:	4281      	cmp	r1, r0
 800c6ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c6ce:	fa92 f215 	qadd16	r2, r2, r5
 800c6d2:	fa2f f383 	sxtb16	r3, r3
 800c6d6:	fa92 f213 	qadd16	r2, r2, r3
 800c6da:	d1f1      	bne.n	800c6c0 <st_sssa8_ch_convolve_rank1upd+0xa8>
 800c6dc:	b213      	sxth	r3, r2
 800c6de:	eb03 4222 	add.w	r2, r3, r2, asr #16
 800c6e2:	4414      	add	r4, r2
 800c6e4:	b16e      	cbz	r6, 800c702 <st_sssa8_ch_convolve_rank1upd+0xea>
 800c6e6:	f991 3000 	ldrsb.w	r3, [r1]
 800c6ea:	2e01      	cmp	r6, #1
 800c6ec:	441c      	add	r4, r3
 800c6ee:	d018      	beq.n	800c722 <st_sssa8_ch_convolve_rank1upd+0x10a>
 800c6f0:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800c6f4:	2e02      	cmp	r6, #2
 800c6f6:	441c      	add	r4, r3
 800c6f8:	d011      	beq.n	800c71e <st_sssa8_ch_convolve_rank1upd+0x106>
 800c6fa:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800c6fe:	3103      	adds	r1, #3
 800c700:	441c      	add	r4, r3
 800c702:	f858 3b04 	ldr.w	r3, [r8], #4
 800c706:	fb0a 3414 	mls	r4, sl, r4, r3
 800c70a:	45c6      	cmp	lr, r8
 800c70c:	f849 4f04 	str.w	r4, [r9, #4]!
 800c710:	d1af      	bne.n	800c672 <st_sssa8_ch_convolve_rank1upd+0x5a>
 800c712:	b003      	add	sp, #12
 800c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c718:	4658      	mov	r0, fp
 800c71a:	2400      	movs	r4, #0
 800c71c:	e7c9      	b.n	800c6b2 <st_sssa8_ch_convolve_rank1upd+0x9a>
 800c71e:	3102      	adds	r1, #2
 800c720:	e7ef      	b.n	800c702 <st_sssa8_ch_convolve_rank1upd+0xea>
 800c722:	3101      	adds	r1, #1
 800c724:	e7ed      	b.n	800c702 <st_sssa8_ch_convolve_rank1upd+0xea>
 800c726:	bf00      	nop

0800c728 <st_sssa8_ch_convolve>:
 800c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72c:	b0c5      	sub	sp, #276	; 0x114
 800c72e:	4698      	mov	r8, r3
 800c730:	f8bd 413c 	ldrh.w	r4, [sp, #316]	; 0x13c
 800c734:	f8bd 5144 	ldrh.w	r5, [sp, #324]	; 0x144
 800c738:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 800c73a:	ebc4 7a44 	rsb	sl, r4, r4, lsl #29
 800c73e:	9011      	str	r0, [sp, #68]	; 0x44
 800c740:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c744:	951d      	str	r5, [sp, #116]	; 0x74
 800c746:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c74a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c74e:	f8bd 6140 	ldrh.w	r6, [sp, #320]	; 0x140
 800c752:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c754:	461f      	mov	r7, r3
 800c756:	9316      	str	r3, [sp, #88]	; 0x58
 800c758:	fb16 f305 	smulbb	r3, r6, r5
 800c75c:	920f      	str	r2, [sp, #60]	; 0x3c
 800c75e:	eb07 00ca 	add.w	r0, r7, sl, lsl #3
 800c762:	f8bd 2148 	ldrh.w	r2, [sp, #328]	; 0x148
 800c766:	fb13 f308 	smulbb	r3, r3, r8
 800c76a:	961b      	str	r6, [sp, #108]	; 0x6c
 800c76c:	941c      	str	r4, [sp, #112]	; 0x70
 800c76e:	eb00 0c0b 	add.w	ip, r0, fp
 800c772:	b29b      	uxth	r3, r3
 800c774:	9108      	str	r1, [sp, #32]
 800c776:	9020      	str	r0, [sp, #128]	; 0x80
 800c778:	931f      	str	r3, [sp, #124]	; 0x7c
 800c77a:	f8bd 314c 	ldrh.w	r3, [sp, #332]	; 0x14c
 800c77e:	9218      	str	r2, [sp, #96]	; 0x60
 800c780:	9323      	str	r3, [sp, #140]	; 0x8c
 800c782:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 800c786:	9e58      	ldr	r6, [sp, #352]	; 0x160
 800c788:	9312      	str	r3, [sp, #72]	; 0x48
 800c78a:	f8bd 3154 	ldrh.w	r3, [sp, #340]	; 0x154
 800c78e:	f99d 9164 	ldrsb.w	r9, [sp, #356]	; 0x164
 800c792:	931a      	str	r3, [sp, #104]	; 0x68
 800c794:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 800c798:	f99d 5168 	ldrsb.w	r5, [sp, #360]	; 0x168
 800c79c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c79e:	f8bd 3174 	ldrh.w	r3, [sp, #372]	; 0x174
 800c7a2:	931e      	str	r3, [sp, #120]	; 0x78
 800c7a4:	2c00      	cmp	r4, #0
 800c7a6:	f000 81e7 	beq.w	800cb78 <st_sssa8_ch_convolve+0x450>
 800c7aa:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f1ac 0404 	sub.w	r4, ip, #4
 800c7b4:	f04f 0a01 	mov.w	sl, #1
 800c7b8:	4476      	add	r6, lr
 800c7ba:	9f08      	ldr	r7, [sp, #32]
 800c7bc:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800c7c0:	fa0a f103 	lsl.w	r1, sl, r3
 800c7c4:	fa05 f203 	lsl.w	r2, r5, r3
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800c7ce:	f340 81b5 	ble.w	800cb3c <st_sssa8_ch_convolve+0x414>
 800c7d2:	4286      	cmp	r6, r0
 800c7d4:	f844 2f04 	str.w	r2, [r4, #4]!
 800c7d8:	d1f0      	bne.n	800c7bc <st_sssa8_ch_convolve+0x94>
 800c7da:	44dc      	add	ip, fp
 800c7dc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800c7de:	9708      	str	r7, [sp, #32]
 800c7e0:	ebac 040b 	sub.w	r4, ip, fp
 800c7e4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c7e6:	a92c      	add	r1, sp, #176	; 0xb0
 800c7e8:	ab28      	add	r3, sp, #160	; 0xa0
 800c7ea:	9422      	str	r4, [sp, #136]	; 0x88
 800c7ec:	aa24      	add	r2, sp, #144	; 0x90
 800c7ee:	9c08      	ldr	r4, [sp, #32]
 800c7f0:	a830      	add	r0, sp, #192	; 0xc0
 800c7f2:	973c      	str	r7, [sp, #240]	; 0xf0
 800c7f4:	9426      	str	r4, [sp, #152]	; 0x98
 800c7f6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c7f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800c7fa:	973d      	str	r7, [sp, #244]	; 0xf4
 800c7fc:	9425      	str	r4, [sp, #148]	; 0x94
 800c7fe:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c800:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c802:	9100      	str	r1, [sp, #0]
 800c804:	eba6 010e 	sub.w	r1, r6, lr
 800c808:	973e      	str	r7, [sp, #248]	; 0xf8
 800c80a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c80c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800c80e:	9121      	str	r1, [sp, #132]	; 0x84
 800c810:	a93a      	add	r1, sp, #232	; 0xe8
 800c812:	962d      	str	r6, [sp, #180]	; 0xb4
 800c814:	973f      	str	r7, [sp, #252]	; 0xfc
 800c816:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
 800c81a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800c81c:	942e      	str	r4, [sp, #184]	; 0xb8
 800c81e:	f000 fcc9 	bl	800d1b4 <ai_padding_opt_init>
 800c822:	2d00      	cmp	r5, #0
 800c824:	f000 811f 	beq.w	800ca66 <st_sssa8_ch_convolve+0x33e>
 800c828:	0073      	lsls	r3, r6, #1
 800c82a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c82c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800c830:	fb04 f108 	mul.w	r1, r4, r8
 800c834:	fb04 f303 	mul.w	r3, r4, r3
 800c838:	427a      	negs	r2, r7
 800c83a:	2400      	movs	r4, #0
 800c83c:	fa0f f989 	sxth.w	r9, r9
 800c840:	fb0a 0303 	mla	r3, sl, r3, r0
 800c844:	46d3      	mov	fp, sl
 800c846:	9f08      	ldr	r7, [sp, #32]
 800c848:	4682      	mov	sl, r0
 800c84a:	9314      	str	r3, [sp, #80]	; 0x50
 800c84c:	004b      	lsls	r3, r1, #1
 800c84e:	9115      	str	r1, [sp, #84]	; 0x54
 800c850:	9307      	str	r3, [sp, #28]
 800c852:	b293      	uxth	r3, r2
 800c854:	9419      	str	r4, [sp, #100]	; 0x64
 800c856:	9317      	str	r3, [sp, #92]	; 0x5c
 800c858:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800c85c:	a830      	add	r0, sp, #192	; 0xc0
 800c85e:	f000 fd03 	bl	800d268 <ai_padding_opt_phase1>
 800c862:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d074      	beq.n	800c952 <st_sssa8_ch_convolve+0x22a>
 800c868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c86a:	2600      	movs	r6, #0
 800c86c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c86e:	960d      	str	r6, [sp, #52]	; 0x34
 800c870:	1a99      	subs	r1, r3, r2
 800c872:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c874:	425a      	negs	r2, r3
 800c876:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 800c87a:	930e      	str	r3, [sp, #56]	; 0x38
 800c87c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c87e:	fb03 1304 	mla	r3, r3, r4, r1
 800c882:	9308      	str	r3, [sp, #32]
 800c884:	b293      	uxth	r3, r2
 800c886:	930a      	str	r3, [sp, #40]	; 0x28
 800c888:	4653      	mov	r3, sl
 800c88a:	46da      	mov	sl, fp
 800c88c:	469b      	mov	fp, r3
 800c88e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800c890:	2a00      	cmp	r2, #0
 800c892:	f000 80f5 	beq.w	800ca80 <st_sssa8_ch_convolve+0x358>
 800c896:	3a01      	subs	r2, #1
 800c898:	2101      	movs	r1, #1
 800c89a:	9230      	str	r2, [sp, #192]	; 0xc0
 800c89c:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
 800c8a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8a2:	9a08      	ldr	r2, [sp, #32]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	da3f      	bge.n	800c928 <st_sssa8_ch_convolve+0x200>
 800c8a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c8ac:	fb06 2603 	mla	r6, r6, r3, r2
 800c8b0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800c8b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c8b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c8ba:	4691      	mov	r9, r2
 800c8bc:	1af6      	subs	r6, r6, r3
 800c8be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c0:	429e      	cmp	r6, r3
 800c8c2:	dd29      	ble.n	800c918 <st_sssa8_ch_convolve+0x1f0>
 800c8c4:	ea4f 75d9 	mov.w	r5, r9, lsr #31
 800c8c8:	461c      	mov	r4, r3
 800c8ca:	469c      	mov	ip, r3
 800c8cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8ce:	fb07 f102 	mul.w	r1, r7, r2
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	bfd8      	it	le
 800c8d6:	f045 0501 	orrle.w	r5, r5, #1
 800c8da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c8de:	910b      	str	r1, [sp, #44]	; 0x2c
 800c8e0:	46a9      	mov	r9, r5
 800c8e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c8e4:	4567      	cmp	r7, ip
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	4659      	mov	r1, fp
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	bfcc      	ite	gt
 800c8ee:	f04f 0e00 	movgt.w	lr, #0
 800c8f2:	f04f 0e01 	movle.w	lr, #1
 800c8f6:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 800c8fa:	d103      	bne.n	800c904 <st_sssa8_ch_convolve+0x1dc>
 800c8fc:	f1b9 0f00 	cmp.w	r9, #0
 800c900:	f000 80b5 	beq.w	800ca6e <st_sssa8_ch_convolve+0x346>
 800c904:	f001 ffca 	bl	800e89c <arm_fill_q15>
 800c908:	3401      	adds	r4, #1
 800c90a:	44d3      	add	fp, sl
 800c90c:	b224      	sxth	r4, r4
 800c90e:	42b4      	cmp	r4, r6
 800c910:	46a4      	mov	ip, r4
 800c912:	dbe7      	blt.n	800c8e4 <st_sssa8_ch_convolve+0x1bc>
 800c914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c918:	f109 0901 	add.w	r9, r9, #1
 800c91c:	9b08      	ldr	r3, [sp, #32]
 800c91e:	fa0f f989 	sxth.w	r9, r9
 800c922:	4599      	cmp	r9, r3
 800c924:	464a      	mov	r2, r9
 800c926:	dbca      	blt.n	800c8be <st_sssa8_ch_convolve+0x196>
 800c928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c92a:	455b      	cmp	r3, fp
 800c92c:	f000 80de 	beq.w	800caec <st_sssa8_ch_convolve+0x3c4>
 800c930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c932:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c934:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c936:	4403      	add	r3, r0
 800c938:	3101      	adds	r1, #1
 800c93a:	461a      	mov	r2, r3
 800c93c:	b20b      	sxth	r3, r1
 800c93e:	b292      	uxth	r2, r2
 800c940:	930d      	str	r3, [sp, #52]	; 0x34
 800c942:	461e      	mov	r6, r3
 800c944:	920a      	str	r2, [sp, #40]	; 0x28
 800c946:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c948:	429a      	cmp	r2, r3
 800c94a:	dca0      	bgt.n	800c88e <st_sssa8_ch_convolve+0x166>
 800c94c:	465b      	mov	r3, fp
 800c94e:	46d3      	mov	fp, sl
 800c950:	469a      	mov	sl, r3
 800c952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c954:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c956:	9919      	ldr	r1, [sp, #100]	; 0x64
 800c958:	4403      	add	r3, r0
 800c95a:	3101      	adds	r1, #1
 800c95c:	461a      	mov	r2, r3
 800c95e:	b20b      	sxth	r3, r1
 800c960:	b292      	uxth	r2, r2
 800c962:	9319      	str	r3, [sp, #100]	; 0x64
 800c964:	461c      	mov	r4, r3
 800c966:	9217      	str	r2, [sp, #92]	; 0x5c
 800c968:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c96a:	429a      	cmp	r2, r3
 800c96c:	f73f af76 	bgt.w	800c85c <st_sssa8_ch_convolve+0x134>
 800c970:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c972:	4552      	cmp	r2, sl
 800c974:	d077      	beq.n	800ca66 <st_sssa8_ch_convolve+0x33e>
 800c976:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c978:	2900      	cmp	r1, #0
 800c97a:	d074      	beq.n	800ca66 <st_sssa8_ch_convolve+0x33e>
 800c97c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800c97e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800c980:	f1a4 0a04 	sub.w	sl, r4, #4
 800c984:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800c986:	0883      	lsrs	r3, r0, #2
 800c988:	f000 0c03 	and.w	ip, r0, #3
 800c98c:	f1a4 0902 	sub.w	r9, r4, #2
 800c990:	9c57      	ldr	r4, [sp, #348]	; 0x15c
 800c992:	9308      	str	r3, [sp, #32]
 800c994:	3b01      	subs	r3, #1
 800c996:	f1a4 0804 	sub.w	r8, r4, #4
 800c99a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c9a2:	f1a4 0e04 	sub.w	lr, r4, #4
 800c9a6:	9c5b      	ldr	r4, [sp, #364]	; 0x16c
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	4f75      	ldr	r7, [pc, #468]	; (800cb80 <st_sssa8_ch_convolve+0x458>)
 800c9ac:	4421      	add	r1, r4
 800c9ae:	46d4      	mov	ip, sl
 800c9b0:	9e4e      	ldr	r6, [sp, #312]	; 0x138
 800c9b2:	468b      	mov	fp, r1
 800c9b4:	0099      	lsls	r1, r3, #2
 800c9b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9ba:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c9be:	46a3      	mov	fp, r4
 800c9c0:	910b      	str	r1, [sp, #44]	; 0x2c
 800c9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9c4:	9b08      	ldr	r3, [sp, #32]
 800c9c6:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 80d0 	beq.w	800cb70 <st_sssa8_ch_convolve+0x448>
 800c9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c9d4:	eb06 0a03 	add.w	sl, r6, r3
 800c9d8:	f856 3b04 	ldr.w	r3, [r6], #4
 800c9dc:	fa2f f483 	sxtb16	r4, r3
 800c9e0:	b2a0      	uxth	r0, r4
 800c9e2:	682a      	ldr	r2, [r5, #0]
 800c9e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c9e8:	fa2f f383 	sxtb16	r3, r3
 800c9ec:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c9f0:	fb20 1202 	smlad	r2, r0, r2, r1
 800c9f4:	403b      	ands	r3, r7
 800c9f6:	6869      	ldr	r1, [r5, #4]
 800c9f8:	3508      	adds	r5, #8
 800c9fa:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800c9fe:	fb23 2101 	smlad	r1, r3, r1, r2
 800ca02:	4556      	cmp	r6, sl
 800ca04:	d1e8      	bne.n	800c9d8 <st_sssa8_ch_convolve+0x2b0>
 800ca06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca08:	9c07      	ldr	r4, [sp, #28]
 800ca0a:	b1b4      	cbz	r4, 800ca3a <st_sssa8_ch_convolve+0x312>
 800ca0c:	f996 2000 	ldrsb.w	r2, [r6]
 800ca10:	2c01      	cmp	r4, #1
 800ca12:	8818      	ldrh	r0, [r3, #0]
 800ca14:	fb10 1102 	smlabb	r1, r0, r2, r1
 800ca18:	f000 80a8 	beq.w	800cb6c <st_sssa8_ch_convolve+0x444>
 800ca1c:	f996 2001 	ldrsb.w	r2, [r6, #1]
 800ca20:	8858      	ldrh	r0, [r3, #2]
 800ca22:	fb10 1102 	smlabb	r1, r0, r2, r1
 800ca26:	9a07      	ldr	r2, [sp, #28]
 800ca28:	2a02      	cmp	r2, #2
 800ca2a:	f000 80a3 	beq.w	800cb74 <st_sssa8_ch_convolve+0x44c>
 800ca2e:	889a      	ldrh	r2, [r3, #4]
 800ca30:	3603      	adds	r6, #3
 800ca32:	f916 3c01 	ldrsb.w	r3, [r6, #-1]
 800ca36:	fb12 1103 	smlabb	r1, r2, r3, r1
 800ca3a:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
 800ca3e:	f10b 0b01 	add.w	fp, fp, #1
 800ca42:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f85e 2f04 	ldr.w	r2, [lr, #4]!
 800ca4c:	dd7c      	ble.n	800cb48 <st_sssa8_ch_convolve+0x420>
 800ca4e:	0049      	lsls	r1, r1, #1
 800ca50:	fb51 2100 	smmla	r1, r1, r0, r2
 800ca54:	fa41 f303 	asr.w	r3, r1, r3
 800ca58:	f303 0307 	ssat	r3, #8, r3
 800ca5c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800ca60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca62:	455b      	cmp	r3, fp
 800ca64:	d1ae      	bne.n	800c9c4 <st_sssa8_ch_convolve+0x29c>
 800ca66:	2000      	movs	r0, #0
 800ca68:	b045      	add	sp, #276	; 0x114
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca70:	eb03 000c 	add.w	r0, r3, ip
 800ca74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca76:	fb08 3000 	mla	r0, r8, r0, r3
 800ca7a:	f000 ffbb 	bl	800d9f4 <st_int8_to16_no_shift>
 800ca7e:	e743      	b.n	800c908 <st_sssa8_ch_convolve+0x1e0>
 800ca80:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800ca82:	2a00      	cmp	r2, #0
 800ca84:	d053      	beq.n	800cb2e <st_sssa8_ch_convolve+0x406>
 800ca86:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 800ca8a:	3a01      	subs	r2, #1
 800ca8c:	2901      	cmp	r1, #1
 800ca8e:	9231      	str	r2, [sp, #196]	; 0xc4
 800ca90:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
 800ca94:	f43f af04 	beq.w	800c8a0 <st_sssa8_ch_convolve+0x178>
 800ca98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca9a:	9908      	ldr	r1, [sp, #32]
 800ca9c:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 800caa0:	428b      	cmp	r3, r1
 800caa2:	f6bf af41 	bge.w	800c928 <st_sssa8_ch_convolve+0x200>
 800caa6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800caaa:	465e      	mov	r6, fp
 800caac:	46c2      	mov	sl, r8
 800caae:	461d      	mov	r5, r3
 800cab0:	46b8      	mov	r8, r7
 800cab2:	4618      	mov	r0, r3
 800cab4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800cab8:	4689      	mov	r9, r1
 800caba:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800cabc:	3501      	adds	r5, #1
 800cabe:	fb00 4008 	mla	r0, r0, r8, r4
 800cac2:	9b07      	ldr	r3, [sp, #28]
 800cac4:	4631      	mov	r1, r6
 800cac6:	b22d      	sxth	r5, r5
 800cac8:	fb0a 7000 	mla	r0, sl, r0, r7
 800cacc:	465a      	mov	r2, fp
 800cace:	441e      	add	r6, r3
 800cad0:	f000 ff90 	bl	800d9f4 <st_int8_to16_no_shift>
 800cad4:	454d      	cmp	r5, r9
 800cad6:	4628      	mov	r0, r5
 800cad8:	dbf0      	blt.n	800cabc <st_sssa8_ch_convolve+0x394>
 800cada:	46b3      	mov	fp, r6
 800cadc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cade:	4647      	mov	r7, r8
 800cae0:	46d0      	mov	r8, sl
 800cae2:	455b      	cmp	r3, fp
 800cae4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800cae8:	f47f af22 	bne.w	800c930 <st_sssa8_ch_convolve+0x208>
 800caec:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800caee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800caf0:	9957      	ldr	r1, [sp, #348]	; 0x15c
 800caf2:	9821      	ldr	r0, [sp, #132]	; 0x84
 800caf4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800caf6:	9304      	str	r3, [sp, #16]
 800caf8:	9203      	str	r2, [sp, #12]
 800cafa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cafc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cafe:	9102      	str	r1, [sp, #8]
 800cb00:	9001      	str	r0, [sp, #4]
 800cb02:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cb04:	984e      	ldr	r0, [sp, #312]	; 0x138
 800cb06:	9400      	str	r4, [sp, #0]
 800cb08:	f000 fbe8 	bl	800d2dc <st_sssa8_ch_nn_mat_mult_kernel>
 800cb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cb10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb12:	440b      	add	r3, r1
 800cb14:	905b      	str	r0, [sp, #364]	; 0x16c
 800cb16:	3201      	adds	r2, #1
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	b212      	sxth	r2, r2
 800cb1c:	930a      	str	r3, [sp, #40]	; 0x28
 800cb1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb20:	4616      	mov	r6, r2
 800cb22:	920d      	str	r2, [sp, #52]	; 0x34
 800cb24:	4293      	cmp	r3, r2
 800cb26:	dd1d      	ble.n	800cb64 <st_sssa8_ch_convolve+0x43c>
 800cb28:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800cb2c:	e6af      	b.n	800c88e <st_sssa8_ch_convolve+0x166>
 800cb2e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800cb30:	2101      	movs	r1, #1
 800cb32:	3a01      	subs	r2, #1
 800cb34:	f8ad 10e6 	strh.w	r1, [sp, #230]	; 0xe6
 800cb38:	9232      	str	r2, [sp, #200]	; 0xc8
 800cb3a:	e6b1      	b.n	800c8a0 <st_sssa8_ch_convolve+0x178>
 800cb3c:	4286      	cmp	r6, r0
 800cb3e:	f844 5f04 	str.w	r5, [r4, #4]!
 800cb42:	f47f ae3b 	bne.w	800c7bc <st_sssa8_ch_convolve+0x94>
 800cb46:	e648      	b.n	800c7da <st_sssa8_ch_convolve+0xb2>
 800cb48:	f1c3 0301 	rsb	r3, r3, #1
 800cb4c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb50:	f303 031f 	ssat	r3, #32, r3
 800cb54:	fb53 f310 	smmulr	r3, r3, r0
 800cb58:	4413      	add	r3, r2
 800cb5a:	f303 0307 	ssat	r3, #8, r3
 800cb5e:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800cb62:	e77d      	b.n	800ca60 <st_sssa8_ch_convolve+0x338>
 800cb64:	46d3      	mov	fp, sl
 800cb66:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 800cb6a:	e6f2      	b.n	800c952 <st_sssa8_ch_convolve+0x22a>
 800cb6c:	3601      	adds	r6, #1
 800cb6e:	e764      	b.n	800ca3a <st_sssa8_ch_convolve+0x312>
 800cb70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cb72:	e749      	b.n	800ca08 <st_sssa8_ch_convolve+0x2e0>
 800cb74:	3602      	adds	r6, #2
 800cb76:	e760      	b.n	800ca3a <st_sssa8_ch_convolve+0x312>
 800cb78:	46a6      	mov	lr, r4
 800cb7a:	461d      	mov	r5, r3
 800cb7c:	e630      	b.n	800c7e0 <st_sssa8_ch_convolve+0xb8>
 800cb7e:	bf00      	nop
 800cb80:	ffff0000 	.word	0xffff0000

0800cb84 <st_sssa8_ch_convolve_1x1>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	b08d      	sub	sp, #52	; 0x34
 800cb8a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 800cb8e:	f99d 7084 	ldrsb.w	r7, [sp, #132]	; 0x84
 800cb92:	2d01      	cmp	r5, #1
 800cb94:	920a      	str	r2, [sp, #40]	; 0x28
 800cb96:	f8bd e05c 	ldrh.w	lr, [sp, #92]	; 0x5c
 800cb9a:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800cb9e:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800cba2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 800cba6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800cba8:	970b      	str	r7, [sp, #44]	; 0x2c
 800cbaa:	f99d c088 	ldrsb.w	ip, [sp, #136]	; 0x88
 800cbae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cbb2:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 800cbb6:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 800cbba:	d152      	bne.n	800cc62 <st_sssa8_ch_convolve_1x1+0xde>
 800cbbc:	2a01      	cmp	r2, #1
 800cbbe:	d150      	bne.n	800cc62 <st_sssa8_ch_convolve_1x1+0xde>
 800cbc0:	ea50 0201 	orrs.w	r2, r0, r1
 800cbc4:	d14d      	bne.n	800cc62 <st_sssa8_ch_convolve_1x1+0xde>
 800cbc6:	2e01      	cmp	r6, #1
 800cbc8:	d14b      	bne.n	800cc62 <st_sssa8_ch_convolve_1x1+0xde>
 800cbca:	f1b8 0f01 	cmp.w	r8, #1
 800cbce:	d148      	bne.n	800cc62 <st_sssa8_ch_convolve_1x1+0xde>
 800cbd0:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 800cbd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cbd6:	ebce 778e 	rsb	r7, lr, lr, lsl #30
 800cbda:	eb0a 090e 	add.w	r9, sl, lr
 800cbde:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 800cbe2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cbe6:	f1be 0f00 	cmp.w	lr, #0
 800cbea:	d038      	beq.n	800cc5e <st_sssa8_ch_convolve_1x1+0xda>
 800cbec:	ea4f 0b4e 	mov.w	fp, lr, lsl #1
 800cbf0:	1f3e      	subs	r6, r7, #4
 800cbf2:	f04f 0801 	mov.w	r8, #1
 800cbf6:	eb04 050b 	add.w	r5, r4, fp
 800cbfa:	f934 2b02 	ldrsh.w	r2, [r4], #2
 800cbfe:	fa08 f002 	lsl.w	r0, r8, r2
 800cc02:	fa0c f102 	lsl.w	r1, ip, r2
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 800cc0c:	dd22      	ble.n	800cc54 <st_sssa8_ch_convolve_1x1+0xd0>
 800cc0e:	42a5      	cmp	r5, r4
 800cc10:	f846 1f04 	str.w	r1, [r6, #4]!
 800cc14:	d1f1      	bne.n	800cbfa <st_sssa8_ch_convolve_1x1+0x76>
 800cc16:	462c      	mov	r4, r5
 800cc18:	4457      	add	r7, sl
 800cc1a:	eba4 040b 	sub.w	r4, r4, fp
 800cc1e:	461e      	mov	r6, r3
 800cc20:	eba7 070a 	sub.w	r7, r7, sl
 800cc24:	9808      	ldr	r0, [sp, #32]
 800cc26:	9401      	str	r4, [sp, #4]
 800cc28:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800cc2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc2c:	9400      	str	r4, [sp, #0]
 800cc2e:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800cc32:	e9cd 7906 	strd	r7, r9, [sp, #24]
 800cc36:	fb02 f201 	mul.w	r2, r2, r1
 800cc3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc3c:	9202      	str	r2, [sp, #8]
 800cc3e:	9105      	str	r1, [sp, #20]
 800cc40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cc42:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cc44:	e9cd e603 	strd	lr, r6, [sp, #12]
 800cc48:	f000 ff76 	bl	800db38 <st_sssa8_ch_nn_mat_mult_nt_t>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	b00d      	add	sp, #52	; 0x34
 800cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc54:	42a5      	cmp	r5, r4
 800cc56:	f846 cf04 	str.w	ip, [r6, #4]!
 800cc5a:	d1ce      	bne.n	800cbfa <st_sssa8_ch_convolve_1x1+0x76>
 800cc5c:	e7db      	b.n	800cc16 <st_sssa8_ch_convolve_1x1+0x92>
 800cc5e:	46f3      	mov	fp, lr
 800cc60:	e7db      	b.n	800cc1a <st_sssa8_ch_convolve_1x1+0x96>
 800cc62:	f06f 0002 	mvn.w	r0, #2
 800cc66:	e7f2      	b.n	800cc4e <st_sssa8_ch_convolve_1x1+0xca>

0800cc68 <st_sssa8_fully_connected>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	b095      	sub	sp, #84	; 0x54
 800cc6e:	4688      	mov	r8, r1
 800cc70:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
 800cc74:	9311      	str	r3, [sp, #68]	; 0x44
 800cc76:	f9b5 1000 	ldrsh.w	r1, [r5]
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	2900      	cmp	r1, #0
 800cc7e:	f99d 4084 	ldrsb.w	r4, [sp, #132]	; 0x84
 800cc82:	9309      	str	r3, [sp, #36]	; 0x24
 800cc84:	9106      	str	r1, [sp, #24]
 800cc86:	9204      	str	r2, [sp, #16]
 800cc88:	f99d 3080 	ldrsb.w	r3, [sp, #128]	; 0x80
 800cc8c:	9407      	str	r4, [sp, #28]
 800cc8e:	dd07      	ble.n	800cca0 <st_sssa8_fully_connected+0x38>
 800cc90:	4625      	mov	r5, r4
 800cc92:	2201      	movs	r2, #1
 800cc94:	460c      	mov	r4, r1
 800cc96:	408d      	lsls	r5, r1
 800cc98:	40a2      	lsls	r2, r4
 800cc9a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800cc9e:	9207      	str	r2, [sp, #28]
 800cca0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cca2:	2a00      	cmp	r2, #0
 800cca4:	f000 81b2 	beq.w	800d00c <st_sssa8_fully_connected+0x3a4>
 800cca8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	9d04      	ldr	r5, [sp, #16]
 800ccae:	084c      	lsrs	r4, r1, #1
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ccb4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800ccb8:	462a      	mov	r2, r5
 800ccba:	f001 fbc1 	bl	800e440 <st_int8_reordered_no_shift_zero>
 800ccbe:	2c00      	cmp	r4, #0
 800ccc0:	f000 8138 	beq.w	800cf34 <st_sssa8_fully_connected+0x2cc>
 800ccc4:	1ee8      	subs	r0, r5, #3
 800ccc6:	3c01      	subs	r4, #1
 800ccc8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ccca:	f1a5 0310 	sub.w	r3, r5, #16
 800ccce:	900e      	str	r0, [sp, #56]	; 0x38
 800ccd0:	1f29      	subs	r1, r5, #4
 800ccd2:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ccd4:	3210      	adds	r2, #16
 800ccd6:	091b      	lsrs	r3, r3, #4
 800ccd8:	9110      	str	r1, [sp, #64]	; 0x40
 800ccda:	3008      	adds	r0, #8
 800ccdc:	3301      	adds	r3, #1
 800ccde:	9005      	str	r0, [sp, #20]
 800cce0:	b2a0      	uxth	r0, r4
 800cce2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800cce4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cce8:	9013      	str	r0, [sp, #76]	; 0x4c
 800ccea:	9408      	str	r4, [sp, #32]
 800ccec:	920d      	str	r2, [sp, #52]	; 0x34
 800ccee:	9a06      	ldr	r2, [sp, #24]
 800ccf0:	f1c2 0201 	rsb	r2, r2, #1
 800ccf4:	9212      	str	r2, [sp, #72]	; 0x48
 800ccf6:	011a      	lsls	r2, r3, #4
 800ccf8:	920a      	str	r2, [sp, #40]	; 0x28
 800ccfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ccfc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800cd00:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd02:	9b05      	ldr	r3, [sp, #20]
 800cd04:	9a04      	ldr	r2, [sp, #16]
 800cd06:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800cd0a:	eb08 0702 	add.w	r7, r8, r2
 800cd0e:	2a0f      	cmp	r2, #15
 800cd10:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cd14:	9703      	str	r7, [sp, #12]
 800cd16:	f340 8233 	ble.w	800d180 <st_sssa8_fully_connected+0x518>
 800cd1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd1c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800cd1e:	eb08 0c02 	add.w	ip, r8, r2
 800cd22:	f8d8 2000 	ldr.w	r2, [r8]
 800cd26:	683d      	ldr	r5, [r7, #0]
 800cd28:	ea4f 2132 	mov.w	r1, r2, ror #8
 800cd2c:	6834      	ldr	r4, [r6, #0]
 800cd2e:	ea4f 2e35 	mov.w	lr, r5, ror #8
 800cd32:	fa2f f181 	sxtb16	r1, r1
 800cd36:	fa2f f282 	sxtb16	r2, r2
 800cd3a:	fa2f f585 	sxtb16	r5, r5
 800cd3e:	fa2f fe8e 	sxtb16	lr, lr
 800cd42:	fb24 0002 	smlad	r0, r4, r2, r0
 800cd46:	fb24 3305 	smlad	r3, r4, r5, r3
 800cd4a:	6872      	ldr	r2, [r6, #4]
 800cd4c:	fb22 0001 	smlad	r0, r2, r1, r0
 800cd50:	fb22 3e0e 	smlad	lr, r2, lr, r3
 800cd54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd58:	687d      	ldr	r5, [r7, #4]
 800cd5a:	ea4f 2331 	mov.w	r3, r1, ror #8
 800cd5e:	68b2      	ldr	r2, [r6, #8]
 800cd60:	ea4f 2935 	mov.w	r9, r5, ror #8
 800cd64:	fa2f f383 	sxtb16	r3, r3
 800cd68:	fa2f f181 	sxtb16	r1, r1
 800cd6c:	fa2f f585 	sxtb16	r5, r5
 800cd70:	fa2f f989 	sxtb16	r9, r9
 800cd74:	fb22 0101 	smlad	r1, r2, r1, r0
 800cd78:	fb22 e205 	smlad	r2, r2, r5, lr
 800cd7c:	68f4      	ldr	r4, [r6, #12]
 800cd7e:	fb24 1103 	smlad	r1, r4, r3, r1
 800cd82:	fb24 2209 	smlad	r2, r4, r9, r2
 800cd86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd8a:	68bd      	ldr	r5, [r7, #8]
 800cd8c:	ea4f 2033 	mov.w	r0, r3, ror #8
 800cd90:	6934      	ldr	r4, [r6, #16]
 800cd92:	ea4f 2e35 	mov.w	lr, r5, ror #8
 800cd96:	fa2f f080 	sxtb16	r0, r0
 800cd9a:	fa2f f383 	sxtb16	r3, r3
 800cd9e:	fa2f f585 	sxtb16	r5, r5
 800cda2:	fa2f fe8e 	sxtb16	lr, lr
 800cda6:	fb24 1303 	smlad	r3, r4, r3, r1
 800cdaa:	fb24 2405 	smlad	r4, r4, r5, r2
 800cdae:	6971      	ldr	r1, [r6, #20]
 800cdb0:	fb21 3300 	smlad	r3, r1, r0, r3
 800cdb4:	fb21 4e0e 	smlad	lr, r1, lr, r4
 800cdb8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800cdc2:	f108 0810 	add.w	r8, r8, #16
 800cdc6:	ea4f 2032 	mov.w	r0, r2, ror #8
 800cdca:	69b1      	ldr	r1, [r6, #24]
 800cdcc:	fa2f f580 	sxtb16	r5, r0
 800cdd0:	fa2f f082 	sxtb16	r0, r2
 800cdd4:	ea4f 2234 	mov.w	r2, r4, ror #8
 800cdd8:	fa2f f484 	sxtb16	r4, r4
 800cddc:	fa2f f282 	sxtb16	r2, r2
 800cde0:	fb21 3000 	smlad	r0, r1, r0, r3
 800cde4:	fb21 e104 	smlad	r1, r1, r4, lr
 800cde8:	69f3      	ldr	r3, [r6, #28]
 800cdea:	3620      	adds	r6, #32
 800cdec:	fb23 0005 	smlad	r0, r3, r5, r0
 800cdf0:	fb23 1302 	smlad	r3, r3, r2, r1
 800cdf4:	45e0      	cmp	r8, ip
 800cdf6:	d194      	bne.n	800cd22 <st_sssa8_fully_connected+0xba>
 800cdf8:	9903      	ldr	r1, [sp, #12]
 800cdfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800ce02:	4696      	mov	lr, r2
 800ce04:	4414      	add	r4, r2
 800ce06:	9403      	str	r4, [sp, #12]
 800ce08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce0a:	4596      	cmp	lr, r2
 800ce0c:	da35      	bge.n	800ce7a <st_sssa8_fully_connected+0x212>
 800ce0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce10:	4655      	mov	r5, sl
 800ce12:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800ce16:	eba2 020e 	sub.w	r2, r2, lr
 800ce1a:	0892      	lsrs	r2, r2, #2
 800ce1c:	920c      	str	r2, [sp, #48]	; 0x30
 800ce1e:	3201      	adds	r2, #1
 800ce20:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800ce24:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce26:	eb08 090b 	add.w	r9, r8, fp
 800ce2a:	f858 7b04 	ldr.w	r7, [r8], #4
 800ce2e:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce32:	ea4f 2637 	mov.w	r6, r7, ror #8
 800ce36:	682a      	ldr	r2, [r5, #0]
 800ce38:	ea4f 2431 	mov.w	r4, r1, ror #8
 800ce3c:	fa2f f686 	sxtb16	r6, r6
 800ce40:	fa2f f787 	sxtb16	r7, r7
 800ce44:	fa2f f181 	sxtb16	r1, r1
 800ce48:	fa2f f484 	sxtb16	r4, r4
 800ce4c:	fb22 0007 	smlad	r0, r2, r7, r0
 800ce50:	fb22 3301 	smlad	r3, r2, r1, r3
 800ce54:	686a      	ldr	r2, [r5, #4]
 800ce56:	3508      	adds	r5, #8
 800ce58:	fb22 0006 	smlad	r0, r2, r6, r0
 800ce5c:	fb22 3304 	smlad	r3, r2, r4, r3
 800ce60:	45c8      	cmp	r8, r9
 800ce62:	d1e2      	bne.n	800ce2a <st_sssa8_fully_connected+0x1c2>
 800ce64:	9a03      	ldr	r2, [sp, #12]
 800ce66:	f10e 0e04 	add.w	lr, lr, #4
 800ce6a:	445a      	add	r2, fp
 800ce6c:	9203      	str	r2, [sp, #12]
 800ce6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce70:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 800ce74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce76:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 800ce7a:	9e04      	ldr	r6, [sp, #16]
 800ce7c:	45b6      	cmp	lr, r6
 800ce7e:	da2d      	bge.n	800cedc <st_sssa8_fully_connected+0x274>
 800ce80:	f10e 0201 	add.w	r2, lr, #1
 800ce84:	9c03      	ldr	r4, [sp, #12]
 800ce86:	f9ba 1000 	ldrsh.w	r1, [sl]
 800ce8a:	f998 5000 	ldrsb.w	r5, [r8]
 800ce8e:	42b2      	cmp	r2, r6
 800ce90:	f994 4000 	ldrsb.w	r4, [r4]
 800ce94:	fb11 0005 	smlabb	r0, r1, r5, r0
 800ce98:	fb11 3304 	smlabb	r3, r1, r4, r3
 800ce9c:	f280 80b3 	bge.w	800d006 <st_sssa8_fully_connected+0x39e>
 800cea0:	9903      	ldr	r1, [sp, #12]
 800cea2:	f10e 0e02 	add.w	lr, lr, #2
 800cea6:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800ceaa:	f998 4001 	ldrsb.w	r4, [r8, #1]
 800ceae:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800ceb2:	fb12 0004 	smlabb	r0, r2, r4, r0
 800ceb6:	fb12 3301 	smlabb	r3, r2, r1, r3
 800ceba:	9a04      	ldr	r2, [sp, #16]
 800cebc:	4596      	cmp	lr, r2
 800cebe:	f280 8164 	bge.w	800d18a <st_sssa8_fully_connected+0x522>
 800cec2:	9903      	ldr	r1, [sp, #12]
 800cec4:	f108 0803 	add.w	r8, r8, #3
 800cec8:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800cecc:	f991 4002 	ldrsb.w	r4, [r1, #2]
 800ced0:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
 800ced4:	fb12 3304 	smlabb	r3, r2, r4, r3
 800ced8:	fb12 0001 	smlabb	r0, r2, r1, r0
 800cedc:	9a08      	ldr	r2, [sp, #32]
 800cede:	9906      	ldr	r1, [sp, #24]
 800cee0:	3202      	adds	r2, #2
 800cee2:	2900      	cmp	r1, #0
 800cee4:	9208      	str	r2, [sp, #32]
 800cee6:	dd74      	ble.n	800cfd2 <st_sssa8_fully_connected+0x36a>
 800cee8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ceea:	0040      	lsls	r0, r0, #1
 800ceec:	9e07      	ldr	r6, [sp, #28]
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	fb50 6004 	smmla	r0, r0, r4, r6
 800cef4:	fb53 6304 	smmla	r3, r3, r4, r6
 800cef8:	4108      	asrs	r0, r1
 800cefa:	460c      	mov	r4, r1
 800cefc:	f300 0007 	ssat	r0, #8, r0
 800cf00:	f802 0c02 	strb.w	r0, [r2, #-2]
 800cf04:	4123      	asrs	r3, r4
 800cf06:	f303 0307 	ssat	r3, #8, r3
 800cf0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cf0e:	9b05      	ldr	r3, [sp, #20]
 800cf10:	9a04      	ldr	r2, [sp, #16]
 800cf12:	3308      	adds	r3, #8
 800cf14:	4490      	add	r8, r2
 800cf16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf18:	9305      	str	r3, [sp, #20]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	f47f aef2 	bne.w	800cd04 <st_sssa8_fully_connected+0x9c>
 800cf20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800cf22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf24:	3401      	adds	r4, #1
 800cf26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf2a:	9322      	str	r3, [sp, #136]	; 0x88
 800cf2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cf2e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800cf32:	9323      	str	r3, [sp, #140]	; 0x8c
 800cf34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf36:	07db      	lsls	r3, r3, #31
 800cf38:	d547      	bpl.n	800cfca <st_sssa8_fully_connected+0x362>
 800cf3a:	9a04      	ldr	r2, [sp, #16]
 800cf3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf3e:	0892      	lsrs	r2, r2, #2
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	d01a      	beq.n	800cf7a <st_sssa8_fully_connected+0x312>
 800cf44:	1e54      	subs	r4, r2, #1
 800cf46:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cf48:	b2a4      	uxth	r4, r4
 800cf4a:	3401      	adds	r4, #1
 800cf4c:	eb08 0584 	add.w	r5, r8, r4, lsl #2
 800cf50:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf54:	680e      	ldr	r6, [r1, #0]
 800cf56:	ea4f 2032 	mov.w	r0, r2, ror #8
 800cf5a:	fa2f f282 	sxtb16	r2, r2
 800cf5e:	fa2f f080 	sxtb16	r0, r0
 800cf62:	fb26 3202 	smlad	r2, r6, r2, r3
 800cf66:	684b      	ldr	r3, [r1, #4]
 800cf68:	3108      	adds	r1, #8
 800cf6a:	fb23 2300 	smlad	r3, r3, r0, r2
 800cf6e:	45a8      	cmp	r8, r5
 800cf70:	d1ee      	bne.n	800cf50 <st_sssa8_fully_connected+0x2e8>
 800cf72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cf74:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cf78:	9224      	str	r2, [sp, #144]	; 0x90
 800cf7a:	9a04      	ldr	r2, [sp, #16]
 800cf7c:	f012 0203 	ands.w	r2, r2, #3
 800cf80:	d015      	beq.n	800cfae <st_sssa8_fully_connected+0x346>
 800cf82:	9824      	ldr	r0, [sp, #144]	; 0x90
 800cf84:	2a01      	cmp	r2, #1
 800cf86:	f998 1000 	ldrsb.w	r1, [r8]
 800cf8a:	8800      	ldrh	r0, [r0, #0]
 800cf8c:	fb10 3301 	smlabb	r3, r0, r1, r3
 800cf90:	d00d      	beq.n	800cfae <st_sssa8_fully_connected+0x346>
 800cf92:	9824      	ldr	r0, [sp, #144]	; 0x90
 800cf94:	2a02      	cmp	r2, #2
 800cf96:	f998 1001 	ldrsb.w	r1, [r8, #1]
 800cf9a:	8840      	ldrh	r0, [r0, #2]
 800cf9c:	fb10 3301 	smlabb	r3, r0, r1, r3
 800cfa0:	d005      	beq.n	800cfae <st_sssa8_fully_connected+0x346>
 800cfa2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cfa4:	f998 2002 	ldrsb.w	r2, [r8, #2]
 800cfa8:	8889      	ldrh	r1, [r1, #4]
 800cfaa:	fb11 3302 	smlabb	r3, r1, r2, r3
 800cfae:	9a06      	ldr	r2, [sp, #24]
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	f340 80ed 	ble.w	800d190 <st_sssa8_fully_connected+0x528>
 800cfb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	9807      	ldr	r0, [sp, #28]
 800cfbc:	fb53 0301 	smmla	r3, r3, r1, r0
 800cfc0:	4113      	asrs	r3, r2
 800cfc2:	f303 0307 	ssat	r3, #8, r3
 800cfc6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cfc8:	7013      	strb	r3, [r2, #0]
 800cfca:	2000      	movs	r0, #0
 800cfcc:	b015      	add	sp, #84	; 0x54
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cfd4:	fa00 f201 	lsl.w	r2, r0, r1
 800cfd8:	f302 021f 	ssat	r2, #32, r2
 800cfdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfde:	fb52 f210 	smmulr	r2, r2, r0
 800cfe2:	408b      	lsls	r3, r1
 800cfe4:	f303 031f 	ssat	r3, #32, r3
 800cfe8:	fb53 f310 	smmulr	r3, r3, r0
 800cfec:	9907      	ldr	r1, [sp, #28]
 800cfee:	440a      	add	r2, r1
 800cff0:	f302 0207 	ssat	r2, #8, r2
 800cff4:	9808      	ldr	r0, [sp, #32]
 800cff6:	440b      	add	r3, r1
 800cff8:	f800 2c02 	strb.w	r2, [r0, #-2]
 800cffc:	f303 0307 	ssat	r3, #8, r3
 800d000:	f800 3c01 	strb.w	r3, [r0, #-1]
 800d004:	e783      	b.n	800cf0e <st_sssa8_fully_connected+0x2a6>
 800d006:	f108 0801 	add.w	r8, r8, #1
 800d00a:	e767      	b.n	800cedc <st_sssa8_fully_connected+0x274>
 800d00c:	425a      	negs	r2, r3
 800d00e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d010:	b296      	uxth	r6, r2
 800d012:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800d016:	2900      	cmp	r1, #0
 800d018:	d0d7      	beq.n	800cfca <st_sssa8_fully_connected+0x362>
 800d01a:	9c04      	ldr	r4, [sp, #16]
 800d01c:	fa0f fc83 	sxth.w	ip, r3
 800d020:	9b06      	ldr	r3, [sp, #24]
 800d022:	f1a4 0210 	sub.w	r2, r4, #16
 800d026:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800d028:	f1c3 0301 	rsb	r3, r3, #1
 800d02c:	46a1      	mov	r9, r4
 800d02e:	4429      	add	r1, r5
 800d030:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800d034:	9308      	str	r3, [sp, #32]
 800d036:	f022 030f 	bic.w	r3, r2, #15
 800d03a:	f1b9 0f0f 	cmp.w	r9, #15
 800d03e:	9103      	str	r1, [sp, #12]
 800d040:	f103 0310 	add.w	r3, r3, #16
 800d044:	9004      	str	r0, [sp, #16]
 800d046:	46ae      	mov	lr, r5
 800d048:	eb00 0203 	add.w	r2, r0, r3
 800d04c:	469b      	mov	fp, r3
 800d04e:	f85a 3b04 	ldr.w	r3, [sl], #4
 800d052:	9205      	str	r2, [sp, #20]
 800d054:	f340 8083 	ble.w	800d15e <st_sssa8_fully_connected+0x4f6>
 800d058:	eb08 070b 	add.w	r7, r8, fp
 800d05c:	9d04      	ldr	r5, [sp, #16]
 800d05e:	f8d8 4000 	ldr.w	r4, [r8]
 800d062:	682a      	ldr	r2, [r5, #0]
 800d064:	ea4f 2034 	mov.w	r0, r4, ror #8
 800d068:	ea4f 2132 	mov.w	r1, r2, ror #8
 800d06c:	fa2f f484 	sxtb16	r4, r4
 800d070:	fa2f f080 	sxtb16	r0, r0
 800d074:	fa26 f282 	sxtab16	r2, r6, r2
 800d078:	fa26 f181 	sxtab16	r1, r6, r1
 800d07c:	fb22 3304 	smlad	r3, r2, r4, r3
 800d080:	fb21 3200 	smlad	r2, r1, r0, r3
 800d084:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d088:	686b      	ldr	r3, [r5, #4]
 800d08a:	ea4f 2034 	mov.w	r0, r4, ror #8
 800d08e:	ea4f 2133 	mov.w	r1, r3, ror #8
 800d092:	fa2f f484 	sxtb16	r4, r4
 800d096:	fa2f f080 	sxtb16	r0, r0
 800d09a:	fa26 f383 	sxtab16	r3, r6, r3
 800d09e:	fa26 f181 	sxtab16	r1, r6, r1
 800d0a2:	fb23 2204 	smlad	r2, r3, r4, r2
 800d0a6:	fb21 2300 	smlad	r3, r1, r0, r2
 800d0aa:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0ae:	68a9      	ldr	r1, [r5, #8]
 800d0b0:	ea4f 2034 	mov.w	r0, r4, ror #8
 800d0b4:	ea4f 2231 	mov.w	r2, r1, ror #8
 800d0b8:	fa2f f484 	sxtb16	r4, r4
 800d0bc:	fa2f f080 	sxtb16	r0, r0
 800d0c0:	fa26 f181 	sxtab16	r1, r6, r1
 800d0c4:	fa26 f282 	sxtab16	r2, r6, r2
 800d0c8:	fb21 3304 	smlad	r3, r1, r4, r3
 800d0cc:	fb22 3100 	smlad	r1, r2, r0, r3
 800d0d0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800d0d4:	3510      	adds	r5, #16
 800d0d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800d0da:	f108 0810 	add.w	r8, r8, #16
 800d0de:	ea4f 2034 	mov.w	r0, r4, ror #8
 800d0e2:	ea4f 2233 	mov.w	r2, r3, ror #8
 800d0e6:	fa2f f484 	sxtb16	r4, r4
 800d0ea:	fa2f f080 	sxtb16	r0, r0
 800d0ee:	fa26 f383 	sxtab16	r3, r6, r3
 800d0f2:	fa26 f282 	sxtab16	r2, r6, r2
 800d0f6:	fb23 1304 	smlad	r3, r3, r4, r1
 800d0fa:	fb22 3300 	smlad	r3, r2, r0, r3
 800d0fe:	45b8      	cmp	r8, r7
 800d100:	d1ad      	bne.n	800d05e <st_sssa8_fully_connected+0x3f6>
 800d102:	9805      	ldr	r0, [sp, #20]
 800d104:	465d      	mov	r5, fp
 800d106:	454d      	cmp	r5, r9
 800d108:	da10      	bge.n	800d12c <st_sssa8_fully_connected+0x4c4>
 800d10a:	eba9 0505 	sub.w	r5, r9, r5
 800d10e:	4644      	mov	r4, r8
 800d110:	4445      	add	r5, r8
 800d112:	7822      	ldrb	r2, [r4, #0]
 800d114:	f108 0801 	add.w	r8, r8, #1
 800d118:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800d11c:	b252      	sxtb	r2, r2
 800d11e:	45a8      	cmp	r8, r5
 800d120:	eba1 010c 	sub.w	r1, r1, ip
 800d124:	4644      	mov	r4, r8
 800d126:	fb11 3302 	smlabb	r3, r1, r2, r3
 800d12a:	d1f2      	bne.n	800d112 <st_sssa8_fully_connected+0x4aa>
 800d12c:	9a06      	ldr	r2, [sp, #24]
 800d12e:	f10e 0e01 	add.w	lr, lr, #1
 800d132:	2a00      	cmp	r2, #0
 800d134:	dd16      	ble.n	800d164 <st_sssa8_fully_connected+0x4fc>
 800d136:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	9807      	ldr	r0, [sp, #28]
 800d13c:	fb53 0301 	smmla	r3, r3, r1, r0
 800d140:	4113      	asrs	r3, r2
 800d142:	f303 0307 	ssat	r3, #8, r3
 800d146:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	4573      	cmp	r3, lr
 800d14e:	f43f af3c 	beq.w	800cfca <st_sssa8_fully_connected+0x362>
 800d152:	f1b9 0f0f 	cmp.w	r9, #15
 800d156:	f85a 3b04 	ldr.w	r3, [sl], #4
 800d15a:	f73f af7d 	bgt.w	800d058 <st_sssa8_fully_connected+0x3f0>
 800d15e:	9804      	ldr	r0, [sp, #16]
 800d160:	2500      	movs	r5, #0
 800d162:	e7d0      	b.n	800d106 <st_sssa8_fully_connected+0x49e>
 800d164:	9a08      	ldr	r2, [sp, #32]
 800d166:	4093      	lsls	r3, r2
 800d168:	f303 031f 	ssat	r3, #32, r3
 800d16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d16e:	fb53 f312 	smmulr	r3, r3, r2
 800d172:	9a07      	ldr	r2, [sp, #28]
 800d174:	4413      	add	r3, r2
 800d176:	f303 0307 	ssat	r3, #8, r3
 800d17a:	f80e 3c01 	strb.w	r3, [lr, #-1]
 800d17e:	e7e4      	b.n	800d14a <st_sssa8_fully_connected+0x4e2>
 800d180:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 800d184:	f04f 0e00 	mov.w	lr, #0
 800d188:	e63e      	b.n	800ce08 <st_sssa8_fully_connected+0x1a0>
 800d18a:	f108 0802 	add.w	r8, r8, #2
 800d18e:	e6a5      	b.n	800cedc <st_sssa8_fully_connected+0x274>
 800d190:	f1c2 0201 	rsb	r2, r2, #1
 800d194:	4093      	lsls	r3, r2
 800d196:	f303 031f 	ssat	r3, #32, r3
 800d19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d19c:	fb53 f312 	smmulr	r3, r3, r2
 800d1a0:	9a07      	ldr	r2, [sp, #28]
 800d1a2:	441a      	add	r2, r3
 800d1a4:	f302 0307 	ssat	r3, #8, r2
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d1ac:	7013      	strb	r3, [r2, #0]
 800d1ae:	b015      	add	sp, #84	; 0x54
 800d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1b4 <ai_padding_opt_init>:
 800d1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1b8:	2600      	movs	r6, #0
 800d1ba:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d1be:	e9c0 6600 	strd	r6, r6, [r0]
 800d1c2:	6086      	str	r6, [r0, #8]
 800d1c4:	689d      	ldr	r5, [r3, #8]
 800d1c6:	690c      	ldr	r4, [r1, #16]
 800d1c8:	42b5      	cmp	r5, r6
 800d1ca:	dd21      	ble.n	800d210 <ai_padding_opt_init+0x5c>
 800d1cc:	4264      	negs	r4, r4
 800d1ce:	46b0      	mov	r8, r6
 800d1d0:	46b6      	mov	lr, r6
 800d1d2:	46b1      	mov	r9, r6
 800d1d4:	4637      	mov	r7, r6
 800d1d6:	e00f      	b.n	800d1f8 <ai_padding_opt_init+0x44>
 800d1d8:	6895      	ldr	r5, [r2, #8]
 800d1da:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800d1de:	1b2d      	subs	r5, r5, r4
 800d1e0:	42b5      	cmp	r5, r6
 800d1e2:	da10      	bge.n	800d206 <ai_padding_opt_init+0x52>
 800d1e4:	f10e 0e01 	add.w	lr, lr, #1
 800d1e8:	f8c0 e008 	str.w	lr, [r0, #8]
 800d1ec:	3701      	adds	r7, #1
 800d1ee:	689d      	ldr	r5, [r3, #8]
 800d1f0:	688e      	ldr	r6, [r1, #8]
 800d1f2:	42bd      	cmp	r5, r7
 800d1f4:	4434      	add	r4, r6
 800d1f6:	dd0e      	ble.n	800d216 <ai_padding_opt_init+0x62>
 800d1f8:	2c00      	cmp	r4, #0
 800d1fa:	daed      	bge.n	800d1d8 <ai_padding_opt_init+0x24>
 800d1fc:	f109 0901 	add.w	r9, r9, #1
 800d200:	f8c0 9000 	str.w	r9, [r0]
 800d204:	e7f2      	b.n	800d1ec <ai_padding_opt_init+0x38>
 800d206:	f108 0801 	add.w	r8, r8, #1
 800d20a:	f8c0 8004 	str.w	r8, [r0, #4]
 800d20e:	e7ed      	b.n	800d1ec <ai_padding_opt_init+0x38>
 800d210:	46b6      	mov	lr, r6
 800d212:	46b0      	mov	r8, r6
 800d214:	46b1      	mov	r9, r6
 800d216:	2500      	movs	r5, #0
 800d218:	e9c0 9803 	strd	r9, r8, [r0, #12]
 800d21c:	e9c0 e505 	strd	lr, r5, [r0, #20]
 800d220:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800d224:	685e      	ldr	r6, [r3, #4]
 800d226:	694c      	ldr	r4, [r1, #20]
 800d228:	42ae      	cmp	r6, r5
 800d22a:	f1c4 0400 	rsb	r4, r4, #0
 800d22e:	dc0f      	bgt.n	800d250 <ai_padding_opt_init+0x9c>
 800d230:	e018      	b.n	800d264 <ai_padding_opt_init+0xb0>
 800d232:	6856      	ldr	r6, [r2, #4]
 800d234:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800d238:	1b36      	subs	r6, r6, r4
 800d23a:	42be      	cmp	r6, r7
 800d23c:	da0e      	bge.n	800d25c <ai_padding_opt_init+0xa8>
 800d23e:	6a06      	ldr	r6, [r0, #32]
 800d240:	3601      	adds	r6, #1
 800d242:	6206      	str	r6, [r0, #32]
 800d244:	3501      	adds	r5, #1
 800d246:	685e      	ldr	r6, [r3, #4]
 800d248:	68cf      	ldr	r7, [r1, #12]
 800d24a:	42ae      	cmp	r6, r5
 800d24c:	443c      	add	r4, r7
 800d24e:	dd09      	ble.n	800d264 <ai_padding_opt_init+0xb0>
 800d250:	2c00      	cmp	r4, #0
 800d252:	daee      	bge.n	800d232 <ai_padding_opt_init+0x7e>
 800d254:	6986      	ldr	r6, [r0, #24]
 800d256:	3601      	adds	r6, #1
 800d258:	6186      	str	r6, [r0, #24]
 800d25a:	e7f3      	b.n	800d244 <ai_padding_opt_init+0x90>
 800d25c:	69c6      	ldr	r6, [r0, #28]
 800d25e:	3601      	adds	r6, #1
 800d260:	61c6      	str	r6, [r0, #28]
 800d262:	e7ef      	b.n	800d244 <ai_padding_opt_init+0x90>
 800d264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d268 <ai_padding_opt_phase1>:
 800d268:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d26c:	b932      	cbnz	r2, 800d27c <ai_padding_opt_phase1+0x14>
 800d26e:	b993      	cbnz	r3, 800d296 <ai_padding_opt_phase1+0x2e>
 800d270:	6a03      	ldr	r3, [r0, #32]
 800d272:	2201      	movs	r2, #1
 800d274:	3b01      	subs	r3, #1
 800d276:	8482      	strh	r2, [r0, #36]	; 0x24
 800d278:	6203      	str	r3, [r0, #32]
 800d27a:	e005      	b.n	800d288 <ai_padding_opt_phase1+0x20>
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d0f7      	beq.n	800d270 <ai_padding_opt_phase1+0x8>
 800d280:	3b01      	subs	r3, #1
 800d282:	2201      	movs	r2, #1
 800d284:	61c3      	str	r3, [r0, #28]
 800d286:	8482      	strh	r2, [r0, #36]	; 0x24
 800d288:	6943      	ldr	r3, [r0, #20]
 800d28a:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 800d28e:	6083      	str	r3, [r0, #8]
 800d290:	e9c0 1200 	strd	r1, r2, [r0]
 800d294:	4770      	bx	lr
 800d296:	3b01      	subs	r3, #1
 800d298:	8482      	strh	r2, [r0, #36]	; 0x24
 800d29a:	61c3      	str	r3, [r0, #28]
 800d29c:	e7f4      	b.n	800d288 <ai_padding_opt_phase1+0x20>
 800d29e:	bf00      	nop

0800d2a0 <st_uint8_fill>:
 800d2a0:	0403      	lsls	r3, r0, #16
 800d2a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d2a6:	b410      	push	{r4}
 800d2a8:	4303      	orrs	r3, r0
 800d2aa:	0894      	lsrs	r4, r2, #2
 800d2ac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d2b0:	d011      	beq.n	800d2d6 <st_uint8_fill+0x36>
 800d2b2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d2b6:	f841 3b04 	str.w	r3, [r1], #4
 800d2ba:	42a1      	cmp	r1, r4
 800d2bc:	d1fb      	bne.n	800d2b6 <st_uint8_fill+0x16>
 800d2be:	f012 0203 	ands.w	r2, r2, #3
 800d2c2:	d005      	beq.n	800d2d0 <st_uint8_fill+0x30>
 800d2c4:	4601      	mov	r1, r0
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2cc:	f001 bb4a 	b.w	800e964 <memset>
 800d2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	e7f1      	b.n	800d2be <st_uint8_fill+0x1e>
 800d2da:	bf00      	nop

0800d2dc <st_sssa8_ch_nn_mat_mult_kernel>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	b09f      	sub	sp, #124	; 0x7c
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	9004      	str	r0, [sp, #16]
 800d2e6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d2e8:	9113      	str	r1, [sp, #76]	; 0x4c
 800d2ea:	0859      	lsrs	r1, r3, #1
 800d2ec:	eb00 0503 	add.w	r5, r0, r3
 800d2f0:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 800d2f4:	931c      	str	r3, [sp, #112]	; 0x70
 800d2f6:	921a      	str	r2, [sp, #104]	; 0x68
 800d2f8:	951b      	str	r5, [sp, #108]	; 0x6c
 800d2fa:	900d      	str	r0, [sp, #52]	; 0x34
 800d2fc:	f000 8272 	beq.w	800d7e4 <st_sssa8_ch_nn_mat_mult_kernel+0x508>
 800d300:	4614      	mov	r4, r2
 800d302:	3901      	subs	r1, #1
 800d304:	f1a0 0210 	sub.w	r2, r0, #16
 800d308:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 800d30c:	4623      	mov	r3, r4
 800d30e:	1ec4      	subs	r4, r0, #3
 800d310:	0912      	lsrs	r2, r2, #4
 800d312:	f8df b6dc 	ldr.w	fp, [pc, #1756]	; 800d9f0 <st_sssa8_ch_nn_mat_mult_kernel+0x714>
 800d316:	3310      	adds	r3, #16
 800d318:	9415      	str	r4, [sp, #84]	; 0x54
 800d31a:	b28c      	uxth	r4, r1
 800d31c:	3201      	adds	r2, #1
 800d31e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d320:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d324:	9616      	str	r6, [sp, #88]	; 0x58
 800d326:	3108      	adds	r1, #8
 800d328:	941d      	str	r4, [sp, #116]	; 0x74
 800d32a:	9314      	str	r3, [sp, #80]	; 0x50
 800d32c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d32e:	910e      	str	r1, [sp, #56]	; 0x38
 800d330:	3308      	adds	r3, #8
 800d332:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d334:	930a      	str	r3, [sp, #40]	; 0x28
 800d336:	0153      	lsls	r3, r2, #5
 800d338:	0112      	lsls	r2, r2, #4
 800d33a:	3104      	adds	r1, #4
 800d33c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d33e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800d340:	910b      	str	r1, [sp, #44]	; 0x2c
 800d342:	3208      	adds	r2, #8
 800d344:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800d346:	9208      	str	r2, [sp, #32]
 800d348:	18f2      	adds	r2, r6, r3
 800d34a:	18fb      	adds	r3, r7, r3
 800d34c:	3102      	adds	r1, #2
 800d34e:	9218      	str	r2, [sp, #96]	; 0x60
 800d350:	9317      	str	r3, [sp, #92]	; 0x5c
 800d352:	1cab      	adds	r3, r5, #2
 800d354:	9109      	str	r1, [sp, #36]	; 0x24
 800d356:	930c      	str	r3, [sp, #48]	; 0x30
 800d358:	1f03      	subs	r3, r0, #4
 800d35a:	9319      	str	r3, [sp, #100]	; 0x64
 800d35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d35e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d360:	9c04      	ldr	r4, [sp, #16]
 800d362:	2b0f      	cmp	r3, #15
 800d364:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800d368:	eb04 0003 	add.w	r0, r4, r3
 800d36c:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800d370:	9103      	str	r1, [sp, #12]
 800d372:	9000      	str	r0, [sp, #0]
 800d374:	f340 830b 	ble.w	800d98e <st_sssa8_ch_nn_mat_mult_kernel+0x6b2>
 800d378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d37a:	463e      	mov	r6, r7
 800d37c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800d380:	468a      	mov	sl, r1
 800d382:	18c3      	adds	r3, r0, r3
 800d384:	9402      	str	r4, [sp, #8]
 800d386:	9305      	str	r3, [sp, #20]
 800d388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	9b02      	ldr	r3, [sp, #8]
 800d38e:	9800      	ldr	r0, [sp, #0]
 800d390:	6819      	ldr	r1, [r3, #0]
 800d392:	f8d0 9000 	ldr.w	r9, [r0]
 800d396:	9b01      	ldr	r3, [sp, #4]
 800d398:	ea4f 2831 	mov.w	r8, r1, ror #8
 800d39c:	ea4f 2039 	mov.w	r0, r9, ror #8
 800d3a0:	fa2f f288 	sxtb16	r2, r8
 800d3a4:	f8d3 e000 	ldr.w	lr, [r3]
 800d3a8:	ea02 050b 	and.w	r5, r2, fp
 800d3ac:	fa2f f181 	sxtb16	r1, r1
 800d3b0:	fa2f f989 	sxtb16	r9, r9
 800d3b4:	fa1f f881 	uxth.w	r8, r1
 800d3b8:	fa1f f389 	uxth.w	r3, r9
 800d3bc:	fa2f f080 	sxtb16	r0, r0
 800d3c0:	ea00 040b 	and.w	r4, r0, fp
 800d3c4:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 800d3c8:	ea45 4111 	orr.w	r1, r5, r1, lsr #16
 800d3cc:	f8dc 2000 	ldr.w	r2, [ip]
 800d3d0:	ea44 4919 	orr.w	r9, r4, r9, lsr #16
 800d3d4:	9c03      	ldr	r4, [sp, #12]
 800d3d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d3da:	fb28 430e 	smlad	r3, r8, lr, r4
 800d3de:	fb28 a502 	smlad	r5, r8, r2, sl
 800d3e2:	fb20 770e 	smlad	r7, r0, lr, r7
 800d3e6:	fb20 6402 	smlad	r4, r0, r2, r6
 800d3ea:	9a01      	ldr	r2, [sp, #4]
 800d3ec:	f8dc 8004 	ldr.w	r8, [ip, #4]
 800d3f0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d3f4:	fb21 330e 	smlad	r3, r1, lr, r3
 800d3f8:	fb21 5508 	smlad	r5, r1, r8, r5
 800d3fc:	fb29 770e 	smlad	r7, r9, lr, r7
 800d400:	fb29 4408 	smlad	r4, r9, r8, r4
 800d404:	9902      	ldr	r1, [sp, #8]
 800d406:	9e00      	ldr	r6, [sp, #0]
 800d408:	6848      	ldr	r0, [r1, #4]
 800d40a:	6876      	ldr	r6, [r6, #4]
 800d40c:	ea4f 2130 	mov.w	r1, r0, ror #8
 800d410:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800d414:	fa2f f981 	sxtb16	r9, r1
 800d418:	ea09 0a0b 	and.w	sl, r9, fp
 800d41c:	ea4f 2836 	mov.w	r8, r6, ror #8
 800d420:	fa2f f080 	sxtb16	r0, r0
 800d424:	fa2f f888 	sxtb16	r8, r8
 800d428:	b281      	uxth	r1, r0
 800d42a:	fa2f f686 	sxtb16	r6, r6
 800d42e:	ea4a 4010 	orr.w	r0, sl, r0, lsr #16
 800d432:	ea08 0a0b 	and.w	sl, r8, fp
 800d436:	b2b2      	uxth	r2, r6
 800d438:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 800d43c:	f8dc 9008 	ldr.w	r9, [ip, #8]
 800d440:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800d444:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800d448:	fb21 330e 	smlad	r3, r1, lr, r3
 800d44c:	fb21 5509 	smlad	r5, r1, r9, r5
 800d450:	fb22 7e0e 	smlad	lr, r2, lr, r7
 800d454:	fb22 4209 	smlad	r2, r2, r9, r4
 800d458:	9901      	ldr	r1, [sp, #4]
 800d45a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 800d45e:	68cf      	ldr	r7, [r1, #12]
 800d460:	fb20 3307 	smlad	r3, r0, r7, r3
 800d464:	fb20 5504 	smlad	r5, r0, r4, r5
 800d468:	fb26 ee07 	smlad	lr, r6, r7, lr
 800d46c:	fb26 2404 	smlad	r4, r6, r4, r2
 800d470:	9802      	ldr	r0, [sp, #8]
 800d472:	9f00      	ldr	r7, [sp, #0]
 800d474:	6882      	ldr	r2, [r0, #8]
 800d476:	68be      	ldr	r6, [r7, #8]
 800d478:	ea4f 2032 	mov.w	r0, r2, ror #8
 800d47c:	690f      	ldr	r7, [r1, #16]
 800d47e:	fa2f fa80 	sxtb16	sl, r0
 800d482:	ea0a 090b 	and.w	r9, sl, fp
 800d486:	ea4f 2836 	mov.w	r8, r6, ror #8
 800d48a:	fa2f f282 	sxtb16	r2, r2
 800d48e:	fa2f f888 	sxtb16	r8, r8
 800d492:	b290      	uxth	r0, r2
 800d494:	fa2f f686 	sxtb16	r6, r6
 800d498:	ea49 4212 	orr.w	r2, r9, r2, lsr #16
 800d49c:	ea08 090b 	and.w	r9, r8, fp
 800d4a0:	b2b1      	uxth	r1, r6
 800d4a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 800d4a6:	f8dc a010 	ldr.w	sl, [ip, #16]
 800d4aa:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 800d4ae:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d4b2:	fb20 3307 	smlad	r3, r0, r7, r3
 800d4b6:	fb20 500a 	smlad	r0, r0, sl, r5
 800d4ba:	fb21 e707 	smlad	r7, r1, r7, lr
 800d4be:	fb21 410a 	smlad	r1, r1, sl, r4
 800d4c2:	9c01      	ldr	r4, [sp, #4]
 800d4c4:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800d4c8:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800d4cc:	fb22 3309 	smlad	r3, r2, r9, r3
 800d4d0:	fb22 0005 	smlad	r0, r2, r5, r0
 800d4d4:	fb26 7909 	smlad	r9, r6, r9, r7
 800d4d8:	fb26 1605 	smlad	r6, r6, r5, r1
 800d4dc:	9a02      	ldr	r2, [sp, #8]
 800d4de:	9f01      	ldr	r7, [sp, #4]
 800d4e0:	68d5      	ldr	r5, [r2, #12]
 800d4e2:	3210      	adds	r2, #16
 800d4e4:	69bf      	ldr	r7, [r7, #24]
 800d4e6:	9202      	str	r2, [sp, #8]
 800d4e8:	9a00      	ldr	r2, [sp, #0]
 800d4ea:	68d4      	ldr	r4, [r2, #12]
 800d4ec:	3210      	adds	r2, #16
 800d4ee:	9200      	str	r2, [sp, #0]
 800d4f0:	ea4f 2235 	mov.w	r2, r5, ror #8
 800d4f4:	fa2f fa82 	sxtb16	sl, r2
 800d4f8:	ea0a 0e0b 	and.w	lr, sl, fp
 800d4fc:	ea4f 2834 	mov.w	r8, r4, ror #8
 800d500:	fa2f f585 	sxtb16	r5, r5
 800d504:	fa2f f888 	sxtb16	r8, r8
 800d508:	b2aa      	uxth	r2, r5
 800d50a:	fa2f f484 	sxtb16	r4, r4
 800d50e:	ea4e 4515 	orr.w	r5, lr, r5, lsr #16
 800d512:	ea08 0e0b 	and.w	lr, r8, fp
 800d516:	b2a1      	uxth	r1, r4
 800d518:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800d51c:	f8dc a018 	ldr.w	sl, [ip, #24]
 800d520:	ea4e 4414 	orr.w	r4, lr, r4, lsr #16
 800d524:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d528:	fb22 3307 	smlad	r3, r2, r7, r3
 800d52c:	fb22 020a 	smlad	r2, r2, sl, r0
 800d530:	fb21 9707 	smlad	r7, r1, r7, r9
 800d534:	fb21 660a 	smlad	r6, r1, sl, r6
 800d538:	9901      	ldr	r1, [sp, #4]
 800d53a:	f10c 0c20 	add.w	ip, ip, #32
 800d53e:	f85c ec04 	ldr.w	lr, [ip, #-4]
 800d542:	f8d1 901c 	ldr.w	r9, [r1, #28]
 800d546:	3120      	adds	r1, #32
 800d548:	9101      	str	r1, [sp, #4]
 800d54a:	fb25 3309 	smlad	r3, r5, r9, r3
 800d54e:	9303      	str	r3, [sp, #12]
 800d550:	fb25 2a0e 	smlad	sl, r5, lr, r2
 800d554:	fb24 7709 	smlad	r7, r4, r9, r7
 800d558:	fb24 660e 	smlad	r6, r4, lr, r6
 800d55c:	9a00      	ldr	r2, [sp, #0]
 800d55e:	9b05      	ldr	r3, [sp, #20]
 800d560:	429a      	cmp	r2, r3
 800d562:	f47f af13 	bne.w	800d38c <st_sssa8_ch_nn_mat_mult_kernel+0xb0>
 800d566:	9a04      	ldr	r2, [sp, #16]
 800d568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d56a:	4611      	mov	r1, r2
 800d56c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d56e:	9307      	str	r3, [sp, #28]
 800d570:	4419      	add	r1, r3
 800d572:	9206      	str	r2, [sp, #24]
 800d574:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d576:	9104      	str	r1, [sp, #16]
 800d578:	9205      	str	r2, [sp, #20]
 800d57a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d57c:	428b      	cmp	r3, r1
 800d57e:	da64      	bge.n	800d64a <st_sssa8_ch_nn_mat_mult_kernel+0x36e>
 800d580:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	9a04      	ldr	r2, [sp, #16]
 800d586:	089b      	lsrs	r3, r3, #2
 800d588:	9201      	str	r2, [sp, #4]
 800d58a:	9a00      	ldr	r2, [sp, #0]
 800d58c:	9312      	str	r3, [sp, #72]	; 0x48
 800d58e:	3301      	adds	r3, #1
 800d590:	9311      	str	r3, [sp, #68]	; 0x44
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	e9dd 9005 	ldrd	r9, r0, [sp, #20]
 800d598:	9310      	str	r3, [sp, #64]	; 0x40
 800d59a:	18d3      	adds	r3, r2, r3
 800d59c:	9302      	str	r3, [sp, #8]
 800d59e:	9b01      	ldr	r3, [sp, #4]
 800d5a0:	f8d9 8000 	ldr.w	r8, [r9]
 800d5a4:	f853 4b04 	ldr.w	r4, [r3], #4
 800d5a8:	fa2f f184 	sxtb16	r1, r4
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	ea4f 2534 	mov.w	r5, r4, ror #8
 800d5b2:	9b00      	ldr	r3, [sp, #0]
 800d5b4:	fa1f fe81 	uxth.w	lr, r1
 800d5b8:	fa2f f585 	sxtb16	r5, r5
 800d5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5c0:	ea05 040b 	and.w	r4, r5, fp
 800d5c4:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800d5c8:	f8d0 e000 	ldr.w	lr, [r0]
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	ea4f 2c32 	mov.w	ip, r2, ror #8
 800d5d2:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 800d5d6:	fa2f fc8c 	sxtb16	ip, ip
 800d5da:	fa2f f282 	sxtb16	r2, r2
 800d5de:	ea0c 010b 	and.w	r1, ip, fp
 800d5e2:	b293      	uxth	r3, r2
 800d5e4:	ea41 4212 	orr.w	r2, r1, r2, lsr #16
 800d5e8:	9903      	ldr	r1, [sp, #12]
 800d5ea:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800d5ee:	fb25 1108 	smlad	r1, r5, r8, r1
 800d5f2:	fb25 aa0e 	smlad	sl, r5, lr, sl
 800d5f6:	fb23 7708 	smlad	r7, r3, r8, r7
 800d5fa:	fb23 630e 	smlad	r3, r3, lr, r6
 800d5fe:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800d602:	3008      	adds	r0, #8
 800d604:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800d608:	f109 0908 	add.w	r9, r9, #8
 800d60c:	fb24 1105 	smlad	r1, r4, r5, r1
 800d610:	9103      	str	r1, [sp, #12]
 800d612:	fb24 aa06 	smlad	sl, r4, r6, sl
 800d616:	fb22 7705 	smlad	r7, r2, r5, r7
 800d61a:	fb22 3606 	smlad	r6, r2, r6, r3
 800d61e:	9a02      	ldr	r2, [sp, #8]
 800d620:	9b00      	ldr	r3, [sp, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d1bb      	bne.n	800d59e <st_sssa8_ch_nn_mat_mult_kernel+0x2c2>
 800d626:	9904      	ldr	r1, [sp, #16]
 800d628:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d62a:	9a07      	ldr	r2, [sp, #28]
 800d62c:	4401      	add	r1, r0
 800d62e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d630:	3204      	adds	r2, #4
 800d632:	9104      	str	r1, [sp, #16]
 800d634:	00db      	lsls	r3, r3, #3
 800d636:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d638:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d63c:	9207      	str	r2, [sp, #28]
 800d63e:	9a06      	ldr	r2, [sp, #24]
 800d640:	441a      	add	r2, r3
 800d642:	9206      	str	r2, [sp, #24]
 800d644:	9a05      	ldr	r2, [sp, #20]
 800d646:	441a      	add	r2, r3
 800d648:	9205      	str	r2, [sp, #20]
 800d64a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d64c:	9a07      	ldr	r2, [sp, #28]
 800d64e:	4295      	cmp	r5, r2
 800d650:	dd4e      	ble.n	800d6f0 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 800d652:	f102 0c01 	add.w	ip, r2, #1
 800d656:	9a05      	ldr	r2, [sp, #20]
 800d658:	9b04      	ldr	r3, [sp, #16]
 800d65a:	f9b2 0000 	ldrsh.w	r0, [r2]
 800d65e:	4565      	cmp	r5, ip
 800d660:	9a06      	ldr	r2, [sp, #24]
 800d662:	f993 4000 	ldrsb.w	r4, [r3]
 800d666:	f9b2 1000 	ldrsh.w	r1, [r2]
 800d66a:	9b03      	ldr	r3, [sp, #12]
 800d66c:	9a00      	ldr	r2, [sp, #0]
 800d66e:	fb11 aa04 	smlabb	sl, r1, r4, sl
 800d672:	fb10 3304 	smlabb	r3, r0, r4, r3
 800d676:	f992 2000 	ldrsb.w	r2, [r2]
 800d67a:	9303      	str	r3, [sp, #12]
 800d67c:	fb10 7702 	smlabb	r7, r0, r2, r7
 800d680:	fb11 6602 	smlabb	r6, r1, r2, r6
 800d684:	f340 817f 	ble.w	800d986 <st_sssa8_ch_nn_mat_mult_kernel+0x6aa>
 800d688:	9a04      	ldr	r2, [sp, #16]
 800d68a:	9b07      	ldr	r3, [sp, #28]
 800d68c:	f992 4001 	ldrsb.w	r4, [r2, #1]
 800d690:	9a05      	ldr	r2, [sp, #20]
 800d692:	3302      	adds	r3, #2
 800d694:	9d03      	ldr	r5, [sp, #12]
 800d696:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800d69a:	9a06      	ldr	r2, [sp, #24]
 800d69c:	fb10 5504 	smlabb	r5, r0, r4, r5
 800d6a0:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800d6a4:	9a00      	ldr	r2, [sp, #0]
 800d6a6:	9503      	str	r5, [sp, #12]
 800d6a8:	fb11 aa04 	smlabb	sl, r1, r4, sl
 800d6ac:	f992 2001 	ldrsb.w	r2, [r2, #1]
 800d6b0:	fb10 7702 	smlabb	r7, r0, r2, r7
 800d6b4:	fb11 6602 	smlabb	r6, r1, r2, r6
 800d6b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	f340 8170 	ble.w	800d9a0 <st_sssa8_ch_nn_mat_mult_kernel+0x6c4>
 800d6c0:	9b05      	ldr	r3, [sp, #20]
 800d6c2:	9c04      	ldr	r4, [sp, #16]
 800d6c4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d6c8:	9b00      	ldr	r3, [sp, #0]
 800d6ca:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d6ce:	9b06      	ldr	r3, [sp, #24]
 800d6d0:	fb12 7701 	smlabb	r7, r2, r1, r7
 800d6d4:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800d6d8:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d6dc:	fb10 6601 	smlabb	r6, r0, r1, r6
 800d6e0:	1ce1      	adds	r1, r4, #3
 800d6e2:	fb10 aa03 	smlabb	sl, r0, r3, sl
 800d6e6:	9104      	str	r1, [sp, #16]
 800d6e8:	9903      	ldr	r1, [sp, #12]
 800d6ea:	fb12 1203 	smlabb	r2, r2, r3, r1
 800d6ee:	9203      	str	r2, [sp, #12]
 800d6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6f4:	f933 4c04 	ldrsh.w	r4, [r3, #-4]
 800d6f8:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800d6fc:	2c00      	cmp	r4, #0
 800d6fe:	9a08      	ldr	r2, [sp, #32]
 800d700:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800d704:	f340 8120 	ble.w	800d948 <st_sssa8_ch_nn_mat_mult_kernel+0x66c>
 800d708:	9a03      	ldr	r2, [sp, #12]
 800d70a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800d70e:	fb5a 0a01 	smmla	sl, sl, r1, r0
 800d712:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800d716:	fb58 0801 	smmla	r8, r8, r1, r0
 800d71a:	fa48 f804 	asr.w	r8, r8, r4
 800d71e:	f308 0807 	ssat	r8, #8, r8
 800d722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d724:	f802 8c02 	strb.w	r8, [r2, #-2]
 800d728:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800d72c:	fa4a fa01 	asr.w	sl, sl, r1
 800d730:	f30a 0a07 	ssat	sl, #8, sl
 800d734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d736:	f803 ac02 	strb.w	sl, [r3, #-2]
 800d73a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d73c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
 800d740:	2b00      	cmp	r3, #0
 800d742:	f340 80de 	ble.w	800d902 <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 800d746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d748:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800d74c:	9808      	ldr	r0, [sp, #32]
 800d74e:	0071      	lsls	r1, r6, #1
 800d750:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800d754:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800d758:	fb5e 0e02 	smmla	lr, lr, r2, r0
 800d75c:	fb51 0102 	smmla	r1, r1, r2, r0
 800d760:	fa4e fe03 	asr.w	lr, lr, r3
 800d764:	f30e 0307 	ssat	r3, #8, lr
 800d768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d76a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d76e:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800d772:	fa41 f000 	asr.w	r0, r1, r0
 800d776:	f300 0007 	ssat	r0, #8, r0
 800d77a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d77c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800d780:	9a04      	ldr	r2, [sp, #16]
 800d782:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d786:	440a      	add	r2, r1
 800d788:	3308      	adds	r3, #8
 800d78a:	9204      	str	r2, [sp, #16]
 800d78c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d78e:	930e      	str	r3, [sp, #56]	; 0x38
 800d790:	3204      	adds	r2, #4
 800d792:	920b      	str	r2, [sp, #44]	; 0x2c
 800d794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d796:	3208      	adds	r2, #8
 800d798:	920a      	str	r2, [sp, #40]	; 0x28
 800d79a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d79c:	3202      	adds	r2, #2
 800d79e:	9209      	str	r2, [sp, #36]	; 0x24
 800d7a0:	9a08      	ldr	r2, [sp, #32]
 800d7a2:	3208      	adds	r2, #8
 800d7a4:	9208      	str	r2, [sp, #32]
 800d7a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7a8:	3202      	adds	r2, #2
 800d7aa:	920c      	str	r2, [sp, #48]	; 0x30
 800d7ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	f47f add4 	bne.w	800d35c <st_sssa8_ch_nn_mat_mult_kernel+0x80>
 800d7b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d7b6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	00da      	lsls	r2, r3, #3
 800d7bc:	0059      	lsls	r1, r3, #1
 800d7be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d7c2:	9329      	str	r3, [sp, #164]	; 0xa4
 800d7c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d7c6:	4413      	add	r3, r2
 800d7c8:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d7cc:	4413      	add	r3, r2
 800d7ce:	932a      	str	r3, [sp, #168]	; 0xa8
 800d7d0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d7d2:	4413      	add	r3, r2
 800d7d4:	932b      	str	r3, [sp, #172]	; 0xac
 800d7d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d7d8:	440b      	add	r3, r1
 800d7da:	932c      	str	r3, [sp, #176]	; 0xb0
 800d7dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7de:	440b      	add	r3, r1
 800d7e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d7e4:	07da      	lsls	r2, r3, #31
 800d7e6:	f140 8086 	bpl.w	800d8f6 <st_sssa8_ch_nn_mat_mult_kernel+0x61a>
 800d7ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d7ec:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f2:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 800d7f6:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 800d7fa:	f000 80f6 	beq.w	800d9ea <st_sssa8_ch_nn_mat_mult_kernel+0x70e>
 800d7fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d802:	9d04      	ldr	r5, [sp, #16]
 800d804:	46cc      	mov	ip, r9
 800d806:	4602      	mov	r2, r0
 800d808:	fa1f fa8a 	uxth.w	sl, sl
 800d80c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 800d9f0 <st_sssa8_ch_nn_mat_mult_kernel+0x714>
 800d810:	f10a 0a01 	add.w	sl, sl, #1
 800d814:	eb05 0e8a 	add.w	lr, r5, sl, lsl #2
 800d818:	f855 1b04 	ldr.w	r1, [r5], #4
 800d81c:	fa2f f481 	sxtb16	r4, r1
 800d820:	ea4f 2331 	mov.w	r3, r1, ror #8
 800d824:	683e      	ldr	r6, [r7, #0]
 800d826:	b2a1      	uxth	r1, r4
 800d828:	fa2f f383 	sxtb16	r3, r3
 800d82c:	ea03 0b08 	and.w	fp, r3, r8
 800d830:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d834:	ea4b 4414 	orr.w	r4, fp, r4, lsr #16
 800d838:	fb23 0606 	smlad	r6, r3, r6, r0
 800d83c:	f8dc 1000 	ldr.w	r1, [ip]
 800d840:	fb23 2301 	smlad	r3, r3, r1, r2
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f10c 0c08 	add.w	ip, ip, #8
 800d84a:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800d84e:	3708      	adds	r7, #8
 800d850:	fb24 6000 	smlad	r0, r4, r0, r6
 800d854:	fb24 3202 	smlad	r2, r4, r2, r3
 800d858:	45ae      	cmp	lr, r5
 800d85a:	d1dd      	bne.n	800d818 <st_sssa8_ch_nn_mat_mult_kernel+0x53c>
 800d85c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d862:	9504      	str	r5, [sp, #16]
 800d864:	4453      	add	r3, sl
 800d866:	44d1      	add	r9, sl
 800d868:	9313      	str	r3, [sp, #76]	; 0x4c
 800d86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d86c:	f013 0303 	ands.w	r3, r3, #3
 800d870:	d020      	beq.n	800d8b4 <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 800d872:	9e04      	ldr	r6, [sp, #16]
 800d874:	2b01      	cmp	r3, #1
 800d876:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d878:	f996 1000 	ldrsb.w	r1, [r6]
 800d87c:	883d      	ldrh	r5, [r7, #0]
 800d87e:	f8b9 4000 	ldrh.w	r4, [r9]
 800d882:	fb15 0001 	smlabb	r0, r5, r1, r0
 800d886:	fb14 2201 	smlabb	r2, r4, r1, r2
 800d88a:	d013      	beq.n	800d8b4 <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 800d88c:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800d890:	2b02      	cmp	r3, #2
 800d892:	887d      	ldrh	r5, [r7, #2]
 800d894:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 800d898:	fb15 0001 	smlabb	r0, r5, r1, r0
 800d89c:	fb14 2201 	smlabb	r2, r4, r1, r2
 800d8a0:	d008      	beq.n	800d8b4 <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 800d8a2:	f996 3002 	ldrsb.w	r3, [r6, #2]
 800d8a6:	88bc      	ldrh	r4, [r7, #4]
 800d8a8:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800d8ac:	fb14 0003 	smlabb	r0, r4, r3, r0
 800d8b0:	fb11 2203 	smlabb	r2, r1, r3, r2
 800d8b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d8b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d8ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800d8bc:	2e00      	cmp	r6, #0
 800d8be:	f103 0101 	add.w	r1, r3, #1
 800d8c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d8c4:	681d      	ldr	r5, [r3, #0]
 800d8c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d8c8:	681c      	ldr	r4, [r3, #0]
 800d8ca:	dd6d      	ble.n	800d9a8 <st_sssa8_ch_nn_mat_mult_kernel+0x6cc>
 800d8cc:	0040      	lsls	r0, r0, #1
 800d8ce:	0053      	lsls	r3, r2, #1
 800d8d0:	fb50 4205 	smmla	r2, r0, r5, r4
 800d8d4:	fb53 4305 	smmla	r3, r3, r5, r4
 800d8d8:	4132      	asrs	r2, r6
 800d8da:	f302 0207 	ssat	r2, #8, r2
 800d8de:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d8e0:	7002      	strb	r2, [r0, #0]
 800d8e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d8e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d8e8:	4113      	asrs	r3, r2
 800d8ea:	f303 0307 	ssat	r3, #8, r3
 800d8ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d8f0:	912c      	str	r1, [sp, #176]	; 0xb0
 800d8f2:	7013      	strb	r3, [r2, #0]
 800d8f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d8f6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d8f8:	4413      	add	r3, r2
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	b01f      	add	sp, #124	; 0x7c
 800d8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d902:	f1c3 0301 	rsb	r3, r3, #1
 800d906:	fa07 fe03 	lsl.w	lr, r7, r3
 800d90a:	f30e 051f 	ssat	r5, #32, lr
 800d90e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d910:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800d914:	fb55 f512 	smmulr	r5, r5, r2
 800d918:	fa06 f103 	lsl.w	r1, r6, r3
 800d91c:	f301 011f 	ssat	r1, #32, r1
 800d920:	fb51 f112 	smmulr	r1, r1, r2
 800d924:	9b08      	ldr	r3, [sp, #32]
 800d926:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d92a:	442a      	add	r2, r5
 800d92c:	f302 0207 	ssat	r2, #8, r2
 800d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d932:	f800 2c01 	strb.w	r2, [r0, #-1]
 800d936:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d93a:	440b      	add	r3, r1
 800d93c:	f303 0307 	ssat	r3, #8, r3
 800d940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d942:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d946:	e71b      	b.n	800d780 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 800d948:	f1c4 0301 	rsb	r3, r4, #1
 800d94c:	9a03      	ldr	r2, [sp, #12]
 800d94e:	fa02 f803 	lsl.w	r8, r2, r3
 800d952:	f308 041f 	ssat	r4, #32, r8
 800d956:	fb54 f411 	smmulr	r4, r4, r1
 800d95a:	fa0a f303 	lsl.w	r3, sl, r3
 800d95e:	f303 031f 	ssat	r3, #32, r3
 800d962:	fb53 f111 	smmulr	r1, r3, r1
 800d966:	4420      	add	r0, r4
 800d968:	f300 0007 	ssat	r0, #8, r0
 800d96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d96e:	f803 0c02 	strb.w	r0, [r3, #-2]
 800d972:	9b08      	ldr	r3, [sp, #32]
 800d974:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800d978:	4419      	add	r1, r3
 800d97a:	f301 0107 	ssat	r1, #8, r1
 800d97e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d980:	f803 1c02 	strb.w	r1, [r3, #-2]
 800d984:	e6d9      	b.n	800d73a <st_sssa8_ch_nn_mat_mult_kernel+0x45e>
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	3301      	adds	r3, #1
 800d98a:	9304      	str	r3, [sp, #16]
 800d98c:	e6b0      	b.n	800d6f0 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 800d98e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d990:	468a      	mov	sl, r1
 800d992:	463e      	mov	r6, r7
 800d994:	9306      	str	r3, [sp, #24]
 800d996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	2300      	movs	r3, #0
 800d99c:	9307      	str	r3, [sp, #28]
 800d99e:	e5ec      	b.n	800d57a <st_sssa8_ch_nn_mat_mult_kernel+0x29e>
 800d9a0:	9b04      	ldr	r3, [sp, #16]
 800d9a2:	3302      	adds	r3, #2
 800d9a4:	9304      	str	r3, [sp, #16]
 800d9a6:	e6a3      	b.n	800d6f0 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 800d9a8:	f1c6 0601 	rsb	r6, r6, #1
 800d9ac:	fa00 f306 	lsl.w	r3, r0, r6
 800d9b0:	f303 031f 	ssat	r3, #32, r3
 800d9b4:	fb53 f315 	smmulr	r3, r3, r5
 800d9b8:	40b2      	lsls	r2, r6
 800d9ba:	f302 021f 	ssat	r2, #32, r2
 800d9be:	fb52 f215 	smmulr	r2, r2, r5
 800d9c2:	4423      	add	r3, r4
 800d9c4:	f303 0307 	ssat	r3, #8, r3
 800d9c8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d9ca:	7003      	strb	r3, [r0, #0]
 800d9cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	f303 0307 	ssat	r3, #8, r3
 800d9d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d9d8:	912c      	str	r1, [sp, #176]	; 0xb0
 800d9da:	7013      	strb	r3, [r2, #0]
 800d9dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d9de:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d9e0:	4413      	add	r3, r2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	b01f      	add	sp, #124	; 0x7c
 800d9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	e73e      	b.n	800d86c <st_sssa8_ch_nn_mat_mult_kernel+0x590>
 800d9ee:	bf00      	nop
 800d9f0:	ffff0000 	.word	0xffff0000

0800d9f4 <st_int8_to16_no_shift>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	f1b2 0610 	subs.w	r6, r2, #16
 800d9fc:	f100 8092 	bmi.w	800db24 <st_int8_to16_no_shift+0x130>
 800da00:	0936      	lsrs	r6, r6, #4
 800da02:	4603      	mov	r3, r0
 800da04:	4f4b      	ldr	r7, [pc, #300]	; (800db34 <st_int8_to16_no_shift+0x140>)
 800da06:	f106 0801 	add.w	r8, r6, #1
 800da0a:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 800da0e:	681d      	ldr	r5, [r3, #0]
 800da10:	3120      	adds	r1, #32
 800da12:	685e      	ldr	r6, [r3, #4]
 800da14:	3310      	adds	r3, #16
 800da16:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800da1a:	fa2f fc8c 	sxtb16	ip, ip
 800da1e:	ea0c 0a07 	and.w	sl, ip, r7
 800da22:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800da26:	fa2f f585 	sxtb16	r5, r5
 800da2a:	fa2f fe8e 	sxtb16	lr, lr
 800da2e:	fa1f fb85 	uxth.w	fp, r5
 800da32:	ea0e 0907 	and.w	r9, lr, r7
 800da36:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 800da3a:	fa2f f686 	sxtb16	r6, r6
 800da3e:	b2b5      	uxth	r5, r6
 800da40:	f841 ac1c 	str.w	sl, [r1, #-28]
 800da44:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 800da48:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 800da4c:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 800da50:	f841 cc20 	str.w	ip, [r1, #-32]
 800da54:	f841 6c14 	str.w	r6, [r1, #-20]
 800da58:	f841 5c18 	str.w	r5, [r1, #-24]
 800da5c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800da60:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800da64:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800da68:	fa2f fe8e 	sxtb16	lr, lr
 800da6c:	ea0e 0a07 	and.w	sl, lr, r7
 800da70:	ea4f 2c35 	mov.w	ip, r5, ror #8
 800da74:	fa2f f686 	sxtb16	r6, r6
 800da78:	fa2f f98c 	sxtb16	r9, ip
 800da7c:	fa1f fb86 	uxth.w	fp, r6
 800da80:	fa2f f585 	sxtb16	r5, r5
 800da84:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800da88:	ea09 0a07 	and.w	sl, r9, r7
 800da8c:	fa1f fc85 	uxth.w	ip, r5
 800da90:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 800da94:	f841 6c0c 	str.w	r6, [r1, #-12]
 800da98:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 800da9c:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 800daa0:	f841 ec10 	str.w	lr, [r1, #-16]
 800daa4:	f841 5c04 	str.w	r5, [r1, #-4]
 800daa8:	f841 cc08 	str.w	ip, [r1, #-8]
 800daac:	428c      	cmp	r4, r1
 800daae:	d1ae      	bne.n	800da0e <st_int8_to16_no_shift+0x1a>
 800dab0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800dab4:	f1a2 0c04 	sub.w	ip, r2, #4
 800dab8:	45b4      	cmp	ip, r6
 800daba:	4430      	add	r0, r6
 800dabc:	db38      	blt.n	800db30 <st_int8_to16_no_shift+0x13c>
 800dabe:	ebac 0c06 	sub.w	ip, ip, r6
 800dac2:	4607      	mov	r7, r0
 800dac4:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800db34 <st_int8_to16_no_shift+0x140>
 800dac8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800dacc:	f10c 0801 	add.w	r8, ip, #1
 800dad0:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 800dad4:	f857 3b04 	ldr.w	r3, [r7], #4
 800dad8:	3408      	adds	r4, #8
 800dada:	fa2f f983 	sxtb16	r9, r3
 800dade:	ea4f 2333 	mov.w	r3, r3, ror #8
 800dae2:	fa1f f189 	uxth.w	r1, r9
 800dae6:	fa2f f383 	sxtb16	r3, r3
 800daea:	ea03 0a0e 	and.w	sl, r3, lr
 800daee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800daf2:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800daf6:	f844 3c08 	str.w	r3, [r4, #-8]
 800dafa:	f844 9c04 	str.w	r9, [r4, #-4]
 800dafe:	42a5      	cmp	r5, r4
 800db00:	d1e8      	bne.n	800dad4 <st_int8_to16_no_shift+0xe0>
 800db02:	3604      	adds	r6, #4
 800db04:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800db08:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 800db0c:	42b2      	cmp	r2, r6
 800db0e:	dd07      	ble.n	800db20 <st_int8_to16_no_shift+0x12c>
 800db10:	1b92      	subs	r2, r2, r6
 800db12:	4402      	add	r2, r0
 800db14:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800db18:	4290      	cmp	r0, r2
 800db1a:	f825 3b02 	strh.w	r3, [r5], #2
 800db1e:	d1f9      	bne.n	800db14 <st_int8_to16_no_shift+0x120>
 800db20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db24:	2600      	movs	r6, #0
 800db26:	f1a2 0c04 	sub.w	ip, r2, #4
 800db2a:	460c      	mov	r4, r1
 800db2c:	45b4      	cmp	ip, r6
 800db2e:	dac6      	bge.n	800dabe <st_int8_to16_no_shift+0xca>
 800db30:	4625      	mov	r5, r4
 800db32:	e7eb      	b.n	800db0c <st_int8_to16_no_shift+0x118>
 800db34:	ffff0000 	.word	0xffff0000

0800db38 <st_sssa8_ch_nn_mat_mult_nt_t>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	b0ad      	sub	sp, #180	; 0xb4
 800db3e:	9222      	str	r2, [sp, #136]	; 0x88
 800db40:	9021      	str	r0, [sp, #132]	; 0x84
 800db42:	9129      	str	r1, [sp, #164]	; 0xa4
 800db44:	932a      	str	r3, [sp, #168]	; 0xa8
 800db46:	e9dd 2b39 	ldrd	r2, fp, [sp, #228]	; 0xe4
 800db4a:	2a01      	cmp	r2, #1
 800db4c:	f340 8260 	ble.w	800e010 <st_sssa8_ch_nn_mat_mult_nt_t+0x4d8>
 800db50:	f00b 0403 	and.w	r4, fp, #3
 800db54:	ea4f 00ab 	mov.w	r0, fp, asr #2
 800db58:	461e      	mov	r6, r3
 800db5a:	3a02      	subs	r2, #2
 800db5c:	941c      	str	r4, [sp, #112]	; 0x70
 800db5e:	f1ab 040f 	sub.w	r4, fp, #15
 800db62:	f1ab 0310 	sub.w	r3, fp, #16
 800db66:	0852      	lsrs	r2, r2, #1
 800db68:	9411      	str	r4, [sp, #68]	; 0x44
 800db6a:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 800db6c:	091b      	lsrs	r3, r3, #4
 800db6e:	922b      	str	r2, [sp, #172]	; 0xac
 800db70:	00d2      	lsls	r2, r2, #3
 800db72:	f004 0401 	and.w	r4, r4, #1
 800db76:	3301      	adds	r3, #1
 800db78:	320c      	adds	r2, #12
 800db7a:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 800db7c:	9423      	str	r4, [sp, #140]	; 0x8c
 800db7e:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 800db80:	106d      	asrs	r5, r5, #1
 800db82:	9225      	str	r2, [sp, #148]	; 0x94
 800db84:	3402      	adds	r4, #2
 800db86:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800db88:	901b      	str	r0, [sp, #108]	; 0x6c
 800db8a:	9418      	str	r4, [sp, #96]	; 0x60
 800db8c:	0084      	lsls	r4, r0, #2
 800db8e:	0052      	lsls	r2, r2, #1
 800db90:	9524      	str	r5, [sp, #144]	; 0x90
 800db92:	9427      	str	r4, [sp, #156]	; 0x9c
 800db94:	445c      	add	r4, fp
 800db96:	9212      	str	r2, [sp, #72]	; 0x48
 800db98:	9426      	str	r4, [sp, #152]	; 0x98
 800db9a:	011c      	lsls	r4, r3, #4
 800db9c:	9617      	str	r6, [sp, #92]	; 0x5c
 800db9e:	9403      	str	r4, [sp, #12]
 800dba0:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 800dba2:	9116      	str	r1, [sp, #88]	; 0x58
 800dba4:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 800dba8:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbaa:	fb02 f305 	mul.w	r3, r2, r5
 800dbae:	9328      	str	r3, [sp, #160]	; 0xa0
 800dbb0:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 800dbb4:	9320      	str	r3, [sp, #128]	; 0x80
 800dbb6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800dbba:	931f      	str	r3, [sp, #124]	; 0x7c
 800dbbc:	2304      	movs	r3, #4
 800dbbe:	9315      	str	r3, [sp, #84]	; 0x54
 800dbc0:	f1ab 0304 	sub.w	r3, fp, #4
 800dbc4:	9314      	str	r3, [sp, #80]	; 0x50
 800dbc6:	f10b 0301 	add.w	r3, fp, #1
 800dbca:	9309      	str	r3, [sp, #36]	; 0x24
 800dbcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbce:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800dbd0:	993c      	ldr	r1, [sp, #240]	; 0xf0
 800dbd2:	441a      	add	r2, r3
 800dbd4:	9818      	ldr	r0, [sp, #96]	; 0x60
 800dbd6:	4419      	add	r1, r3
 800dbd8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800dbda:	921e      	str	r2, [sp, #120]	; 0x78
 800dbdc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800dbe0:	911d      	str	r1, [sp, #116]	; 0x74
 800dbe2:	920c      	str	r2, [sp, #48]	; 0x30
 800dbe4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800dbe8:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 800dbec:	920e      	str	r2, [sp, #56]	; 0x38
 800dbee:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dbf2:	940a      	str	r4, [sp, #40]	; 0x28
 800dbf4:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbf6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800dbf8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	1935      	adds	r5, r6, r4
 800dbfe:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800dc00:	58ca      	ldr	r2, [r1, r3]
 800dc02:	920d      	str	r2, [sp, #52]	; 0x34
 800dc04:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800dc06:	58d3      	ldr	r3, [r2, r3]
 800dc08:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc0a:	2c00      	cmp	r4, #0
 800dc0c:	f000 83d6 	beq.w	800e3bc <st_sssa8_ch_nn_mat_mult_nt_t+0x884>
 800dc10:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800dc12:	f856 1b04 	ldr.w	r1, [r6], #4
 800dc16:	3c01      	subs	r4, #1
 800dc18:	f855 2b04 	ldr.w	r2, [r5], #4
 800dc1c:	f103 0310 	add.w	r3, r3, #16
 800dc20:	ea4f 2031 	mov.w	r0, r1, ror #8
 800dc24:	fa2f f181 	sxtb16	r1, r1
 800dc28:	fa2f f080 	sxtb16	r0, r0
 800dc2c:	f843 1c10 	str.w	r1, [r3, #-16]
 800dc30:	ea4f 2132 	mov.w	r1, r2, ror #8
 800dc34:	f843 0c0c 	str.w	r0, [r3, #-12]
 800dc38:	fa2f f181 	sxtb16	r1, r1
 800dc3c:	fa2f f282 	sxtb16	r2, r2
 800dc40:	f843 1c04 	str.w	r1, [r3, #-4]
 800dc44:	f843 2c08 	str.w	r2, [r3, #-8]
 800dc48:	d1e3      	bne.n	800dc12 <st_sssa8_ch_nn_mat_mult_nt_t+0xda>
 800dc4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800dc4e:	9926      	ldr	r1, [sp, #152]	; 0x98
 800dc50:	189a      	adds	r2, r3, r2
 800dc52:	185d      	adds	r5, r3, r1
 800dc54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800dc56:	981c      	ldr	r0, [sp, #112]	; 0x70
 800dc58:	b1a8      	cbz	r0, 800dc86 <st_sssa8_ch_nn_mat_mult_nt_t+0x14e>
 800dc5a:	f992 1000 	ldrsb.w	r1, [r2]
 800dc5e:	2801      	cmp	r0, #1
 800dc60:	8019      	strh	r1, [r3, #0]
 800dc62:	f995 1000 	ldrsb.w	r1, [r5]
 800dc66:	8059      	strh	r1, [r3, #2]
 800dc68:	d00d      	beq.n	800dc86 <st_sssa8_ch_nn_mat_mult_nt_t+0x14e>
 800dc6a:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800dc6e:	2802      	cmp	r0, #2
 800dc70:	8099      	strh	r1, [r3, #4]
 800dc72:	f995 1001 	ldrsb.w	r1, [r5, #1]
 800dc76:	80d9      	strh	r1, [r3, #6]
 800dc78:	d005      	beq.n	800dc86 <st_sssa8_ch_nn_mat_mult_nt_t+0x14e>
 800dc7a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800dc7e:	811a      	strh	r2, [r3, #8]
 800dc80:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800dc84:	815a      	strh	r2, [r3, #10]
 800dc86:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f040 8347 	bne.w	800e31c <st_sssa8_ch_nn_mat_mult_nt_t+0x7e4>
 800dc8e:	4619      	mov	r1, r3
 800dc90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dc92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800dc94:	1910      	adds	r0, r2, r4
 800dc96:	5912      	ldr	r2, [r2, r4]
 800dc98:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	9308      	str	r3, [sp, #32]
 800dca0:	180b      	adds	r3, r1, r0
 800dca2:	9307      	str	r3, [sp, #28]
 800dca4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 838b 	beq.w	800e3c2 <st_sssa8_ch_nn_mat_mult_nt_t+0x88a>
 800dcac:	9302      	str	r3, [sp, #8]
 800dcae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dcb0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800dcb2:	9301      	str	r3, [sp, #4]
 800dcb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcb6:	3a03      	subs	r2, #3
 800dcb8:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800dcbc:	f1c3 0301 	rsb	r3, r3, #1
 800dcc0:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 800dcc4:	9210      	str	r2, [sp, #64]	; 0x40
 800dcc6:	9319      	str	r3, [sp, #100]	; 0x64
 800dcc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcca:	f1c3 0301 	rsb	r3, r3, #1
 800dcce:	931a      	str	r3, [sp, #104]	; 0x68
 800dcd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f340 8223 	ble.w	800e11e <st_sssa8_ch_nn_mat_mult_nt_t+0x5e6>
 800dcd8:	9b03      	ldr	r3, [sp, #12]
 800dcda:	eb0a 090b 	add.w	r9, sl, fp
 800dcde:	9808      	ldr	r0, [sp, #32]
 800dce0:	4453      	add	r3, sl
 800dce2:	9e07      	ldr	r6, [sp, #28]
 800dce4:	f8dd 80f4 	ldr.w	r8, [sp, #244]	; 0xf4
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	4634      	mov	r4, r6
 800dcec:	4603      	mov	r3, r0
 800dcee:	f8da 5000 	ldr.w	r5, [sl]
 800dcf2:	f8d8 2000 	ldr.w	r2, [r8]
 800dcf6:	fa2f f185 	sxtb16	r1, r5
 800dcfa:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800dcfe:	fa2f f595 	sxtb16	r5, r5, ror #8
 800dd02:	f8d8 e008 	ldr.w	lr, [r8, #8]
 800dd06:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800dd0a:	fb21 6602 	smlad	r6, r1, r2, r6
 800dd0e:	fb25 660c 	smlad	r6, r5, ip, r6
 800dd12:	fb21 000e 	smlad	r0, r1, lr, r0
 800dd16:	fb25 0007 	smlad	r0, r5, r7, r0
 800dd1a:	f85a 100b 	ldr.w	r1, [sl, fp]
 800dd1e:	fa2f f581 	sxtb16	r5, r1
 800dd22:	fa2f f191 	sxtb16	r1, r1, ror #8
 800dd26:	fb25 4202 	smlad	r2, r5, r2, r4
 800dd2a:	fb25 330e 	smlad	r3, r5, lr, r3
 800dd2e:	fb21 220c 	smlad	r2, r1, ip, r2
 800dd32:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800dd36:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800dd3a:	fb21 3707 	smlad	r7, r1, r7, r3
 800dd3e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dd42:	f8d8 e018 	ldr.w	lr, [r8, #24]
 800dd46:	fa2f f583 	sxtb16	r5, r3
 800dd4a:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800dd4e:	fa2f f393 	sxtb16	r3, r3, ror #8
 800dd52:	fb25 660c 	smlad	r6, r5, ip, r6
 800dd56:	fb23 6604 	smlad	r6, r3, r4, r6
 800dd5a:	fb25 050e 	smlad	r5, r5, lr, r0
 800dd5e:	fb23 5501 	smlad	r5, r3, r1, r5
 800dd62:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800dd66:	fa2f f380 	sxtb16	r3, r0
 800dd6a:	fa2f f090 	sxtb16	r0, r0, ror #8
 800dd6e:	fb23 2c0c 	smlad	ip, r3, ip, r2
 800dd72:	fb23 770e 	smlad	r7, r3, lr, r7
 800dd76:	fb20 cc04 	smlad	ip, r0, r4, ip
 800dd7a:	f8d8 4020 	ldr.w	r4, [r8, #32]
 800dd7e:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 800dd82:	fb20 7101 	smlad	r1, r0, r1, r7
 800dd86:	f8da 2008 	ldr.w	r2, [sl, #8]
 800dd8a:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800dd8e:	fa2f f382 	sxtb16	r3, r2
 800dd92:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 800dd96:	fa2f f292 	sxtb16	r2, r2, ror #8
 800dd9a:	fb23 6604 	smlad	r6, r3, r4, r6
 800dd9e:	fb22 660e 	smlad	r6, r2, lr, r6
 800dda2:	fb23 5300 	smlad	r3, r3, r0, r5
 800dda6:	fb22 3207 	smlad	r2, r2, r7, r3
 800ddaa:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800ddae:	fa2f f985 	sxtb16	r9, r5
 800ddb2:	fa2f f595 	sxtb16	r5, r5, ror #8
 800ddb6:	fb29 c404 	smlad	r4, r9, r4, ip
 800ddba:	fb29 1100 	smlad	r1, r9, r0, r1
 800ddbe:	fb25 4e0e 	smlad	lr, r5, lr, r4
 800ddc2:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 800ddc6:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800ddca:	fb25 1707 	smlad	r7, r5, r7, r1
 800ddce:	f8da 000c 	ldr.w	r0, [sl, #12]
 800ddd2:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800ddd6:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800ddda:	f10a 0a10 	add.w	sl, sl, #16
 800ddde:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800dde2:	fa2f f380 	sxtb16	r3, r0
 800dde6:	fa2f f090 	sxtb16	r0, r0, ror #8
 800ddea:	fb23 660c 	smlad	r6, r3, ip, r6
 800ddee:	fb20 6604 	smlad	r6, r0, r4, r6
 800ddf2:	fb23 2201 	smlad	r2, r3, r1, r2
 800ddf6:	fb20 2005 	smlad	r0, r0, r5, r2
 800ddfa:	eb0a 090b 	add.w	r9, sl, fp
 800ddfe:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800de02:	fa2f f283 	sxtb16	r2, r3
 800de06:	fa2f f393 	sxtb16	r3, r3, ror #8
 800de0a:	fb22 ee0c 	smlad	lr, r2, ip, lr
 800de0e:	fb22 7701 	smlad	r7, r2, r1, r7
 800de12:	fb23 e404 	smlad	r4, r3, r4, lr
 800de16:	fb23 7305 	smlad	r3, r3, r5, r7
 800de1a:	9a00      	ldr	r2, [sp, #0]
 800de1c:	4592      	cmp	sl, r2
 800de1e:	f47f af66 	bne.w	800dcee <st_sssa8_ch_nn_mat_mult_nt_t+0x1b6>
 800de22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800de28:	9200      	str	r2, [sp, #0]
 800de2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de2c:	4591      	cmp	r9, r2
 800de2e:	da44      	bge.n	800deba <st_sssa8_ch_nn_mat_mult_nt_t+0x382>
 800de30:	9914      	ldr	r1, [sp, #80]	; 0x50
 800de32:	f8cd 9018 	str.w	r9, [sp, #24]
 800de36:	eba1 0209 	sub.w	r2, r1, r9
 800de3a:	f8cd b0e8 	str.w	fp, [sp, #232]	; 0xe8
 800de3e:	9f00      	ldr	r7, [sp, #0]
 800de40:	468b      	mov	fp, r1
 800de42:	0892      	lsrs	r2, r2, #2
 800de44:	9205      	str	r2, [sp, #20]
 800de46:	3201      	adds	r2, #1
 800de48:	9204      	str	r2, [sp, #16]
 800de4a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800de4e:	4691      	mov	r9, r2
 800de50:	f85a 2b04 	ldr.w	r2, [sl], #4
 800de54:	3710      	adds	r7, #16
 800de56:	f857 5c10 	ldr.w	r5, [r7, #-16]
 800de5a:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 800de5e:	f857 8c08 	ldr.w	r8, [r7, #-8]
 800de62:	fa2f f182 	sxtb16	r1, r2
 800de66:	f857 cc04 	ldr.w	ip, [r7, #-4]
 800de6a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800de6e:	fb21 6605 	smlad	r6, r1, r5, r6
 800de72:	fb22 660e 	smlad	r6, r2, lr, r6
 800de76:	fb21 0008 	smlad	r0, r1, r8, r0
 800de7a:	fb22 000c 	smlad	r0, r2, ip, r0
 800de7e:	f85a 200b 	ldr.w	r2, [sl, fp]
 800de82:	fa2f f182 	sxtb16	r1, r2
 800de86:	fa2f f292 	sxtb16	r2, r2, ror #8
 800de8a:	fb21 4405 	smlad	r4, r1, r5, r4
 800de8e:	fb21 3308 	smlad	r3, r1, r8, r3
 800de92:	fb22 440e 	smlad	r4, r2, lr, r4
 800de96:	fb22 330c 	smlad	r3, r2, ip, r3
 800de9a:	45ca      	cmp	sl, r9
 800de9c:	d1d8      	bne.n	800de50 <st_sssa8_ch_nn_mat_mult_nt_t+0x318>
 800de9e:	9a00      	ldr	r2, [sp, #0]
 800dea0:	9904      	ldr	r1, [sp, #16]
 800dea2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800dea6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800deaa:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 800deae:	f109 0904 	add.w	r9, r9, #4
 800deb2:	9200      	str	r2, [sp, #0]
 800deb4:	9a05      	ldr	r2, [sp, #20]
 800deb6:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800deba:	45cb      	cmp	fp, r9
 800debc:	eb0a 020b 	add.w	r2, sl, fp
 800dec0:	f340 8129 	ble.w	800e116 <st_sssa8_ch_nn_mat_mult_nt_t+0x5de>
 800dec4:	9900      	ldr	r1, [sp, #0]
 800dec6:	f109 0201 	add.w	r2, r9, #1
 800deca:	f99a c000 	ldrsb.w	ip, [sl]
 800dece:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ded2:	4593      	cmp	fp, r2
 800ded4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ded8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deda:	fb17 660c 	smlabb	r6, r7, ip, r6
 800dede:	fb15 000c 	smlabb	r0, r5, ip, r0
 800dee2:	eb0a 0e01 	add.w	lr, sl, r1
 800dee6:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 800deea:	fb17 4401 	smlabb	r4, r7, r1, r4
 800deee:	fb15 3301 	smlabb	r3, r5, r1, r3
 800def2:	f340 8112 	ble.w	800e11a <st_sssa8_ch_nn_mat_mult_nt_t+0x5e2>
 800def6:	9a00      	ldr	r2, [sp, #0]
 800def8:	f109 0902 	add.w	r9, r9, #2
 800defc:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 800df00:	f10a 0c02 	add.w	ip, sl, #2
 800df04:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800df08:	45cb      	cmp	fp, r9
 800df0a:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800df0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df10:	fb15 6607 	smlabb	r6, r5, r7, r6
 800df14:	fb11 0007 	smlabb	r0, r1, r7, r0
 800df18:	4696      	mov	lr, r2
 800df1a:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 800df1e:	fb15 4402 	smlabb	r4, r5, r2, r4
 800df22:	eb0c 050b 	add.w	r5, ip, fp
 800df26:	fb11 3302 	smlabb	r3, r1, r2, r3
 800df2a:	f340 8101 	ble.w	800e130 <st_sssa8_ch_nn_mat_mult_nt_t+0x5f8>
 800df2e:	9a00      	ldr	r2, [sp, #0]
 800df30:	f10a 0703 	add.w	r7, sl, #3
 800df34:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 800df38:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 800df3c:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 800df40:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 800df44:	fb11 4405 	smlabb	r4, r1, r5, r4
 800df48:	fb1c 3305 	smlabb	r3, ip, r5, r3
 800df4c:	eb07 0a0b 	add.w	sl, r7, fp
 800df50:	fb11 6602 	smlabb	r6, r1, r2, r6
 800df54:	fb1c 0002 	smlabb	r0, ip, r2, r0
 800df58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df5a:	2a00      	cmp	r2, #0
 800df5c:	f340 80c1 	ble.w	800e0e2 <st_sssa8_ch_nn_mat_mult_nt_t+0x5aa>
 800df60:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df62:	0076      	lsls	r6, r6, #1
 800df64:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800df66:	0064      	lsls	r4, r4, #1
 800df68:	fb56 7601 	smmla	r6, r6, r1, r7
 800df6c:	fb54 7401 	smmla	r4, r4, r1, r7
 800df70:	4116      	asrs	r6, r2
 800df72:	f306 0607 	ssat	r6, #8, r6
 800df76:	9901      	ldr	r1, [sp, #4]
 800df78:	4114      	asrs	r4, r2
 800df7a:	700e      	strb	r6, [r1, #0]
 800df7c:	f304 0407 	ssat	r4, #8, r4
 800df80:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800df82:	548c      	strb	r4, [r1, r2]
 800df84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df86:	2a00      	cmp	r2, #0
 800df88:	f340 8090 	ble.w	800e0ac <st_sssa8_ch_nn_mat_mult_nt_t+0x574>
 800df8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800df8e:	0040      	lsls	r0, r0, #1
 800df90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	fb50 5001 	smmla	r0, r0, r1, r5
 800df98:	fb53 5301 	smmla	r3, r3, r1, r5
 800df9c:	4110      	asrs	r0, r2
 800df9e:	f300 0007 	ssat	r0, #8, r0
 800dfa2:	9901      	ldr	r1, [sp, #4]
 800dfa4:	4113      	asrs	r3, r2
 800dfa6:	7048      	strb	r0, [r1, #1]
 800dfa8:	f303 0307 	ssat	r3, #8, r3
 800dfac:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800dfae:	188a      	adds	r2, r1, r2
 800dfb0:	7053      	strb	r3, [r2, #1]
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfb6:	4413      	add	r3, r2
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	9b02      	ldr	r3, [sp, #8]
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	9302      	str	r3, [sp, #8]
 800dfc0:	f47f ae86 	bne.w	800dcd0 <st_sssa8_ch_nn_mat_mult_nt_t+0x198>
 800dfc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfc6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800dfc8:	eb03 0b02 	add.w	fp, r3, r2
 800dfcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f040 80b0 	bne.w	800e134 <st_sssa8_ch_nn_mat_mult_nt_t+0x5fc>
 800dfd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dfd6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800dfd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfda:	440a      	add	r2, r1
 800dfdc:	3308      	adds	r3, #8
 800dfde:	9216      	str	r2, [sp, #88]	; 0x58
 800dfe0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dfe2:	9315      	str	r3, [sp, #84]	; 0x54
 800dfe4:	3202      	adds	r2, #2
 800dfe6:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfe8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dfea:	3204      	adds	r2, #4
 800dfec:	9218      	str	r2, [sp, #96]	; 0x60
 800dfee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800dff0:	429a      	cmp	r2, r3
 800dff2:	f47f adec 	bne.w	800dbce <st_sssa8_ch_nn_mat_mult_nt_t+0x96>
 800dff6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800dff8:	460b      	mov	r3, r1
 800dffa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800dffc:	3201      	adds	r2, #1
 800dffe:	f8dd b0e8 	ldr.w	fp, [sp, #232]	; 0xe8
 800e002:	fb02 1303 	mla	r3, r2, r3, r1
 800e006:	9329      	str	r3, [sp, #164]	; 0xa4
 800e008:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e00a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e00e:	932a      	str	r3, [sp, #168]	; 0xa8
 800e010:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800e012:	07db      	lsls	r3, r3, #31
 800e014:	d546      	bpl.n	800e0a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x56c>
 800e016:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	dd43      	ble.n	800e0a4 <st_sssa8_ch_nn_mat_mult_nt_t+0x56c>
 800e01c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800e01e:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 800e022:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800e026:	2500      	movs	r5, #0
 800e028:	449e      	add	lr, r3
 800e02a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800e02c:	441e      	add	r6, r3
 800e02e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800e030:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800e034:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 800e038:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 800e03c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e03e:	f8dd 90ec 	ldr.w	r9, [sp, #236]	; 0xec
 800e042:	4473      	add	r3, lr
 800e044:	461f      	mov	r7, r3
 800e046:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800e048:	eb03 0c0e 	add.w	ip, r3, lr
 800e04c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800e04e:	449e      	add	lr, r3
 800e050:	f1bb 0f00 	cmp.w	fp, #0
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	dd0d      	ble.n	800e074 <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 800e058:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800e05a:	eb01 080b 	add.w	r8, r1, fp
 800e05e:	1e58      	subs	r0, r3, #1
 800e060:	f911 3b01 	ldrsb.w	r3, [r1], #1
 800e064:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800e068:	eba3 0309 	sub.w	r3, r3, r9
 800e06c:	4541      	cmp	r1, r8
 800e06e:	fb04 2203 	mla	r2, r4, r3, r2
 800e072:	d1f5      	bne.n	800e060 <st_sssa8_ch_nn_mat_mult_nt_t+0x528>
 800e074:	f9b6 3000 	ldrsh.w	r3, [r6]
 800e078:	f8dc 4000 	ldr.w	r4, [ip]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f8de 0000 	ldr.w	r0, [lr]
 800e082:	f340 81c5 	ble.w	800e410 <st_sssa8_ch_nn_mat_mult_nt_t+0x8d8>
 800e086:	0052      	lsls	r2, r2, #1
 800e088:	fb52 0204 	smmla	r2, r2, r4, r0
 800e08c:	fa42 f303 	asr.w	r3, r2, r3
 800e090:	f303 0307 	ssat	r3, #8, r3
 800e094:	f88a 3000 	strb.w	r3, [sl]
 800e098:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800e09a:	3501      	adds	r5, #1
 800e09c:	449a      	add	sl, r3
 800e09e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e0a0:	42ab      	cmp	r3, r5
 800e0a2:	d1d5      	bne.n	800e050 <st_sssa8_ch_nn_mat_mult_nt_t+0x518>
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	b02d      	add	sp, #180	; 0xb4
 800e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e0ae:	fa00 f201 	lsl.w	r2, r0, r1
 800e0b2:	f302 021f 	ssat	r2, #32, r2
 800e0b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e0b8:	fb52 f210 	smmulr	r2, r2, r0
 800e0bc:	408b      	lsls	r3, r1
 800e0be:	f303 031f 	ssat	r3, #32, r3
 800e0c2:	fb53 f310 	smmulr	r3, r3, r0
 800e0c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0c8:	440a      	add	r2, r1
 800e0ca:	f302 0207 	ssat	r2, #8, r2
 800e0ce:	9801      	ldr	r0, [sp, #4]
 800e0d0:	440b      	add	r3, r1
 800e0d2:	7042      	strb	r2, [r0, #1]
 800e0d4:	f303 0307 	ssat	r3, #8, r3
 800e0d8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800e0da:	1882      	adds	r2, r0, r2
 800e0dc:	7053      	strb	r3, [r2, #1]
 800e0de:	4603      	mov	r3, r0
 800e0e0:	e768      	b.n	800dfb4 <st_sssa8_ch_nn_mat_mult_nt_t+0x47c>
 800e0e2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e0e4:	fa06 f201 	lsl.w	r2, r6, r1
 800e0e8:	f302 021f 	ssat	r2, #32, r2
 800e0ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0ee:	fb52 f215 	smmulr	r2, r2, r5
 800e0f2:	fa04 f101 	lsl.w	r1, r4, r1
 800e0f6:	f301 011f 	ssat	r1, #32, r1
 800e0fa:	fb51 f115 	smmulr	r1, r1, r5
 800e0fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e100:	4422      	add	r2, r4
 800e102:	f302 0207 	ssat	r2, #8, r2
 800e106:	9d01      	ldr	r5, [sp, #4]
 800e108:	4421      	add	r1, r4
 800e10a:	702a      	strb	r2, [r5, #0]
 800e10c:	f301 0107 	ssat	r1, #8, r1
 800e110:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800e112:	54a9      	strb	r1, [r5, r2]
 800e114:	e736      	b.n	800df84 <st_sssa8_ch_nn_mat_mult_nt_t+0x44c>
 800e116:	4692      	mov	sl, r2
 800e118:	e71e      	b.n	800df58 <st_sssa8_ch_nn_mat_mult_nt_t+0x420>
 800e11a:	46f2      	mov	sl, lr
 800e11c:	e71c      	b.n	800df58 <st_sssa8_ch_nn_mat_mult_nt_t+0x420>
 800e11e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800e120:	f04f 0900 	mov.w	r9, #0
 800e124:	9808      	ldr	r0, [sp, #32]
 800e126:	9e07      	ldr	r6, [sp, #28]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4603      	mov	r3, r0
 800e12c:	4634      	mov	r4, r6
 800e12e:	e67c      	b.n	800de2a <st_sssa8_ch_nn_mat_mult_nt_t+0x2f2>
 800e130:	46aa      	mov	sl, r5
 800e132:	e711      	b.n	800df58 <st_sssa8_ch_nn_mat_mult_nt_t+0x420>
 800e134:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e136:	2b00      	cmp	r3, #0
 800e138:	f340 817c 	ble.w	800e434 <st_sssa8_ch_nn_mat_mult_nt_t+0x8fc>
 800e13c:	9b03      	ldr	r3, [sp, #12]
 800e13e:	9d3d      	ldr	r5, [sp, #244]	; 0xf4
 800e140:	eb0a 0703 	add.w	r7, sl, r3
 800e144:	e9dd 4307 	ldrd	r4, r3, [sp, #28]
 800e148:	f8da 2000 	ldr.w	r2, [sl]
 800e14c:	6828      	ldr	r0, [r5, #0]
 800e14e:	fa2f f182 	sxtb16	r1, r2
 800e152:	fa2f f292 	sxtb16	r2, r2, ror #8
 800e156:	fb21 4000 	smlad	r0, r1, r0, r4
 800e15a:	686c      	ldr	r4, [r5, #4]
 800e15c:	fb22 0404 	smlad	r4, r2, r4, r0
 800e160:	68a8      	ldr	r0, [r5, #8]
 800e162:	fb21 3300 	smlad	r3, r1, r0, r3
 800e166:	68e9      	ldr	r1, [r5, #12]
 800e168:	fb22 3201 	smlad	r2, r2, r1, r3
 800e16c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e170:	6928      	ldr	r0, [r5, #16]
 800e172:	fa2f f183 	sxtb16	r1, r3
 800e176:	fa2f f393 	sxtb16	r3, r3, ror #8
 800e17a:	fb21 4000 	smlad	r0, r1, r0, r4
 800e17e:	696c      	ldr	r4, [r5, #20]
 800e180:	fb23 0404 	smlad	r4, r3, r4, r0
 800e184:	69a8      	ldr	r0, [r5, #24]
 800e186:	fb21 2100 	smlad	r1, r1, r0, r2
 800e18a:	69ea      	ldr	r2, [r5, #28]
 800e18c:	fb23 1302 	smlad	r3, r3, r2, r1
 800e190:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e194:	6a28      	ldr	r0, [r5, #32]
 800e196:	fa2f f182 	sxtb16	r1, r2
 800e19a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800e19e:	fb21 4000 	smlad	r0, r1, r0, r4
 800e1a2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800e1a4:	fb22 0606 	smlad	r6, r2, r6, r0
 800e1a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e1aa:	fb21 3100 	smlad	r1, r1, r0, r3
 800e1ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e1b0:	fb22 1203 	smlad	r2, r2, r3, r1
 800e1b4:	f8da 400c 	ldr.w	r4, [sl, #12]
 800e1b8:	3540      	adds	r5, #64	; 0x40
 800e1ba:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800e1be:	f10a 0a10 	add.w	sl, sl, #16
 800e1c2:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 800e1c6:	f855 ec08 	ldr.w	lr, [r5, #-8]
 800e1ca:	f855 cc04 	ldr.w	ip, [r5, #-4]
 800e1ce:	fa2f f184 	sxtb16	r1, r4
 800e1d2:	fa2f f394 	sxtb16	r3, r4, ror #8
 800e1d6:	fb21 6000 	smlad	r0, r1, r0, r6
 800e1da:	fb23 0408 	smlad	r4, r3, r8, r0
 800e1de:	fb21 220e 	smlad	r2, r1, lr, r2
 800e1e2:	fb23 230c 	smlad	r3, r3, ip, r2
 800e1e6:	45ba      	cmp	sl, r7
 800e1e8:	d1ae      	bne.n	800e148 <st_sssa8_ch_nn_mat_mult_nt_t+0x610>
 800e1ea:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800e1ee:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800e1f2:	e9cd 4307 	strd	r4, r3, [sp, #28]
 800e1f6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e1f8:	3b03      	subs	r3, #3
 800e1fa:	459e      	cmp	lr, r3
 800e1fc:	da30      	bge.n	800e260 <st_sssa8_ch_nn_mat_mult_nt_t+0x728>
 800e1fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e200:	4661      	mov	r1, ip
 800e202:	eba3 090e 	sub.w	r9, r3, lr
 800e206:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800e20a:	f109 0801 	add.w	r8, r9, #1
 800e20e:	e9dd 4507 	ldrd	r4, r5, [sp, #28]
 800e212:	eb0a 0788 	add.w	r7, sl, r8, lsl #2
 800e216:	e9cd ce00 	strd	ip, lr, [sp]
 800e21a:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e21e:	3110      	adds	r1, #16
 800e220:	f851 0c10 	ldr.w	r0, [r1, #-16]
 800e224:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 800e228:	f851 cc08 	ldr.w	ip, [r1, #-8]
 800e22c:	f851 6c04 	ldr.w	r6, [r1, #-4]
 800e230:	fa2f f283 	sxtb16	r2, r3
 800e234:	fa2f f393 	sxtb16	r3, r3, ror #8
 800e238:	fb22 4400 	smlad	r4, r2, r0, r4
 800e23c:	fb23 440e 	smlad	r4, r3, lr, r4
 800e240:	fb22 550c 	smlad	r5, r2, ip, r5
 800e244:	fb23 5506 	smlad	r5, r3, r6, r5
 800e248:	45ba      	cmp	sl, r7
 800e24a:	d1e6      	bne.n	800e21a <st_sssa8_ch_nn_mat_mult_nt_t+0x6e2>
 800e24c:	e9dd ce00 	ldrd	ip, lr, [sp]
 800e250:	e9cd 4507 	strd	r4, r5, [sp, #28]
 800e254:	f10e 0e04 	add.w	lr, lr, #4
 800e258:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 800e25c:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800e260:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e262:	4573      	cmp	r3, lr
 800e264:	dd2f      	ble.n	800e2c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x78e>
 800e266:	f99a 2000 	ldrsb.w	r2, [sl]
 800e26a:	f10e 0301 	add.w	r3, lr, #1
 800e26e:	9c07      	ldr	r4, [sp, #28]
 800e270:	f8bc 0000 	ldrh.w	r0, [ip]
 800e274:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800e278:	fb10 4002 	smlabb	r0, r0, r2, r4
 800e27c:	9c08      	ldr	r4, [sp, #32]
 800e27e:	fb11 4402 	smlabb	r4, r1, r2, r4
 800e282:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800e284:	9007      	str	r0, [sp, #28]
 800e286:	429a      	cmp	r2, r3
 800e288:	9408      	str	r4, [sp, #32]
 800e28a:	dd1c      	ble.n	800e2c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x78e>
 800e28c:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 800e290:	f10e 0e02 	add.w	lr, lr, #2
 800e294:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800e298:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800e29c:	fb11 0003 	smlabb	r0, r1, r3, r0
 800e2a0:	fb12 4403 	smlabb	r4, r2, r3, r4
 800e2a4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e2a6:	9007      	str	r0, [sp, #28]
 800e2a8:	4573      	cmp	r3, lr
 800e2aa:	9408      	str	r4, [sp, #32]
 800e2ac:	dd0b      	ble.n	800e2c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x78e>
 800e2ae:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 800e2b2:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800e2b6:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 800e2ba:	fb12 0203 	smlabb	r2, r2, r3, r0
 800e2be:	fb11 4303 	smlabb	r3, r1, r3, r4
 800e2c2:	9207      	str	r2, [sp, #28]
 800e2c4:	9308      	str	r3, [sp, #32]
 800e2c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e2c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2ca:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 800e2ce:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e2d6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800e2da:	f340 808b 	ble.w	800e3f4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8bc>
 800e2de:	9807      	ldr	r0, [sp, #28]
 800e2e0:	0040      	lsls	r0, r0, #1
 800e2e2:	fb50 2201 	smmla	r2, r0, r1, r2
 800e2e6:	fa42 f303 	asr.w	r3, r2, r3
 800e2ea:	f303 0307 	ssat	r3, #8, r3
 800e2ee:	f88b 3000 	strb.w	r3, [fp]
 800e2f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e2f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	dd67      	ble.n	800e3cc <st_sssa8_ch_nn_mat_mult_nt_t+0x894>
 800e2fc:	9b08      	ldr	r3, [sp, #32]
 800e2fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e300:	0058      	lsls	r0, r3, #1
 800e302:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800e304:	461c      	mov	r4, r3
 800e306:	58a3      	ldr	r3, [r4, r2]
 800e308:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 800e30a:	58a2      	ldr	r2, [r4, r2]
 800e30c:	fb50 2303 	smmla	r3, r0, r3, r2
 800e310:	410b      	asrs	r3, r1
 800e312:	f303 0307 	ssat	r3, #8, r3
 800e316:	f88b 3001 	strb.w	r3, [fp, #1]
 800e31a:	e65b      	b.n	800dfd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 800e31c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800e31e:	2c00      	cmp	r4, #0
 800e320:	f000 8084 	beq.w	800e42c <st_sssa8_ch_nn_mat_mult_nt_t+0x8f4>
 800e324:	2300      	movs	r3, #0
 800e326:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800e328:	4619      	mov	r1, r3
 800e32a:	f102 0010 	add.w	r0, r2, #16
 800e32e:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 800e332:	3c01      	subs	r4, #1
 800e334:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 800e338:	f100 0010 	add.w	r0, r0, #16
 800e33c:	eba1 0105 	sub.w	r1, r1, r5
 800e340:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 800e344:	eba3 0302 	sub.w	r3, r3, r2
 800e348:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 800e34c:	eba1 0105 	sub.w	r1, r1, r5
 800e350:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 800e354:	eba3 0302 	sub.w	r3, r3, r2
 800e358:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 800e35c:	eba1 0105 	sub.w	r1, r1, r5
 800e360:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 800e364:	eba3 0302 	sub.w	r3, r3, r2
 800e368:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 800e36c:	eba1 0105 	sub.w	r1, r1, r5
 800e370:	eba3 0302 	sub.w	r3, r3, r2
 800e374:	d1db      	bne.n	800e32e <st_sssa8_ch_nn_mat_mult_nt_t+0x7f6>
 800e376:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e378:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800e37a:	b1cd      	cbz	r5, 800e3b0 <st_sssa8_ch_nn_mat_mult_nt_t+0x878>
 800e37c:	f9b2 4000 	ldrsh.w	r4, [r2]
 800e380:	2d01      	cmp	r5, #1
 800e382:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800e386:	eba1 0104 	sub.w	r1, r1, r4
 800e38a:	eba3 0300 	sub.w	r3, r3, r0
 800e38e:	d00f      	beq.n	800e3b0 <st_sssa8_ch_nn_mat_mult_nt_t+0x878>
 800e390:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800e394:	2d02      	cmp	r5, #2
 800e396:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800e39a:	eba1 0104 	sub.w	r1, r1, r4
 800e39e:	eba3 0300 	sub.w	r3, r3, r0
 800e3a2:	d005      	beq.n	800e3b0 <st_sssa8_ch_nn_mat_mult_nt_t+0x878>
 800e3a4:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 800e3a8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800e3ac:	1a09      	subs	r1, r1, r0
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 800e3b2:	fb02 f101 	mul.w	r1, r2, r1
 800e3b6:	fb02 f303 	mul.w	r3, r2, r3
 800e3ba:	e469      	b.n	800dc90 <st_sssa8_ch_nn_mat_mult_nt_t+0x158>
 800e3bc:	4632      	mov	r2, r6
 800e3be:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800e3c0:	e449      	b.n	800dc56 <st_sssa8_ch_nn_mat_mult_nt_t+0x11e>
 800e3c2:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 800e3c6:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 800e3ca:	e5ff      	b.n	800dfcc <st_sssa8_ch_nn_mat_mult_nt_t+0x494>
 800e3cc:	f1c1 0101 	rsb	r1, r1, #1
 800e3d0:	9a08      	ldr	r2, [sp, #32]
 800e3d2:	408a      	lsls	r2, r1
 800e3d4:	f302 021f 	ssat	r2, #32, r2
 800e3d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800e3da:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e3dc:	4618      	mov	r0, r3
 800e3de:	5843      	ldr	r3, [r0, r1]
 800e3e0:	fb52 f213 	smmulr	r2, r2, r3
 800e3e4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800e3e6:	585b      	ldr	r3, [r3, r1]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f303 0307 	ssat	r3, #8, r3
 800e3ee:	f88b 3001 	strb.w	r3, [fp, #1]
 800e3f2:	e5ef      	b.n	800dfd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 800e3f4:	f1c3 0301 	rsb	r3, r3, #1
 800e3f8:	9807      	ldr	r0, [sp, #28]
 800e3fa:	4098      	lsls	r0, r3
 800e3fc:	f300 031f 	ssat	r3, #32, r0
 800e400:	fb53 f311 	smmulr	r3, r3, r1
 800e404:	4413      	add	r3, r2
 800e406:	f303 0307 	ssat	r3, #8, r3
 800e40a:	f88b 3000 	strb.w	r3, [fp]
 800e40e:	e770      	b.n	800e2f2 <st_sssa8_ch_nn_mat_mult_nt_t+0x7ba>
 800e410:	f1c3 0301 	rsb	r3, r3, #1
 800e414:	fa02 f303 	lsl.w	r3, r2, r3
 800e418:	f303 031f 	ssat	r3, #32, r3
 800e41c:	fb53 f314 	smmulr	r3, r3, r4
 800e420:	4403      	add	r3, r0
 800e422:	f303 0307 	ssat	r3, #8, r3
 800e426:	f88a 3000 	strb.w	r3, [sl]
 800e42a:	e635      	b.n	800e098 <st_sssa8_ch_nn_mat_mult_nt_t+0x560>
 800e42c:	4621      	mov	r1, r4
 800e42e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800e430:	4623      	mov	r3, r4
 800e432:	e7a1      	b.n	800e378 <st_sssa8_ch_nn_mat_mult_nt_t+0x840>
 800e434:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
 800e438:	f04f 0e00 	mov.w	lr, #0
 800e43c:	e6db      	b.n	800e1f6 <st_sssa8_ch_nn_mat_mult_nt_t+0x6be>
 800e43e:	bf00      	nop

0800e440 <st_int8_reordered_no_shift_zero>:
 800e440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e442:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800e446:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800e44a:	d02e      	beq.n	800e4aa <st_int8_reordered_no_shift_zero+0x6a>
 800e44c:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 800e450:	460e      	mov	r6, r1
 800e452:	f850 4b04 	ldr.w	r4, [r0], #4
 800e456:	ea4f 2534 	mov.w	r5, r4, ror #8
 800e45a:	fa2f f585 	sxtb16	r5, r5
 800e45e:	fad5 f503 	ssub16	r5, r5, r3
 800e462:	fa2f f484 	sxtb16	r4, r4
 800e466:	fad4 f403 	ssub16	r4, r4, r3
 800e46a:	42b8      	cmp	r0, r7
 800e46c:	6034      	str	r4, [r6, #0]
 800e46e:	6075      	str	r5, [r6, #4]
 800e470:	f106 0608 	add.w	r6, r6, #8
 800e474:	d1ed      	bne.n	800e452 <st_int8_reordered_no_shift_zero+0x12>
 800e476:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800e47a:	f012 0203 	ands.w	r2, r2, #3
 800e47e:	d013      	beq.n	800e4a8 <st_int8_reordered_no_shift_zero+0x68>
 800e480:	f997 0000 	ldrsb.w	r0, [r7]
 800e484:	fa4f f38c 	sxtb.w	r3, ip
 800e488:	2a01      	cmp	r2, #1
 800e48a:	eba0 0003 	sub.w	r0, r0, r3
 800e48e:	8008      	strh	r0, [r1, #0]
 800e490:	d00a      	beq.n	800e4a8 <st_int8_reordered_no_shift_zero+0x68>
 800e492:	f997 0001 	ldrsb.w	r0, [r7, #1]
 800e496:	2a02      	cmp	r2, #2
 800e498:	eba0 0003 	sub.w	r0, r0, r3
 800e49c:	8048      	strh	r0, [r1, #2]
 800e49e:	d003      	beq.n	800e4a8 <st_int8_reordered_no_shift_zero+0x68>
 800e4a0:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	808b      	strh	r3, [r1, #4]
 800e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4aa:	4607      	mov	r7, r0
 800e4ac:	e7e5      	b.n	800e47a <st_int8_reordered_no_shift_zero+0x3a>
 800e4ae:	bf00      	nop

0800e4b0 <st_int8_avepool>:
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	b099      	sub	sp, #100	; 0x64
 800e4b6:	4615      	mov	r5, r2
 800e4b8:	eec0 4a20 	vdiv.f32	s9, s0, s1
 800e4bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e4be:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 800e4c2:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 800e4c6:	9012      	str	r0, [sp, #72]	; 0x48
 800e4c8:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 800e4cc:	9109      	str	r1, [sp, #36]	; 0x24
 800e4ce:	9015      	str	r0, [sp, #84]	; 0x54
 800e4d0:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 800e4d4:	9416      	str	r4, [sp, #88]	; 0x58
 800e4d6:	900e      	str	r0, [sp, #56]	; 0x38
 800e4d8:	f99d 00ac 	ldrsb.w	r0, [sp, #172]	; 0xac
 800e4dc:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 800e4e0:	ee03 0a90 	vmov	s7, r0
 800e4e4:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800e4e8:	f99d 00b0 	ldrsb.w	r0, [sp, #176]	; 0xb0
 800e4ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e4f0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800e4f4:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 800e4f8:	9311      	str	r3, [sp, #68]	; 0x44
 800e4fa:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800e4fe:	2c00      	cmp	r4, #0
 800e500:	f000 80dd 	beq.w	800e6be <st_int8_avepool+0x20e>
 800e504:	1a89      	subs	r1, r1, r2
 800e506:	eeb4 0a60 	vcmp.f32	s0, s1
 800e50a:	4252      	negs	r2, r2
 800e50c:	425b      	negs	r3, r3
 800e50e:	b289      	uxth	r1, r1
 800e510:	ee04 0a10 	vmov	s8, r0
 800e514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e518:	f04f 0000 	mov.w	r0, #0
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	9113      	str	r1, [sp, #76]	; 0x4c
 800e520:	b291      	uxth	r1, r2
 800e522:	9014      	str	r0, [sp, #80]	; 0x50
 800e524:	9317      	str	r3, [sp, #92]	; 0x5c
 800e526:	4602      	mov	r2, r0
 800e528:	462b      	mov	r3, r5
 800e52a:	9101      	str	r1, [sp, #4]
 800e52c:	bf18      	it	ne
 800e52e:	4603      	movne	r3, r0
 800e530:	fb05 fb07 	mul.w	fp, r5, r7
 800e534:	bf08      	it	eq
 800e536:	2301      	moveq	r3, #1
 800e538:	ee13 1a90 	vmov	r1, s7
 800e53c:	ee14 0a10 	vmov	r0, s8
 800e540:	ed9f 3a6d 	vldr	s6, [pc, #436]	; 800e6f8 <st_int8_avepool+0x248>
 800e544:	46da      	mov	sl, fp
 800e546:	46b9      	mov	r9, r7
 800e548:	4281      	cmp	r1, r0
 800e54a:	bf14      	ite	ne
 800e54c:	2300      	movne	r3, #0
 800e54e:	f003 0301 	andeq.w	r3, r3, #1
 800e552:	9307      	str	r3, [sp, #28]
 800e554:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e556:	2900      	cmp	r1, #0
 800e558:	f000 809e 	beq.w	800e698 <st_int8_avepool+0x1e8>
 800e55c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e55e:	fb01 f202 	mul.w	r2, r1, r2
 800e562:	9d01      	ldr	r5, [sp, #4]
 800e564:	2400      	movs	r4, #0
 800e566:	1e43      	subs	r3, r0, #1
 800e568:	920f      	str	r2, [sp, #60]	; 0x3c
 800e56a:	fa0f fb85 	sxth.w	fp, r5
 800e56e:	9a03      	ldr	r2, [sp, #12]
 800e570:	1b5b      	subs	r3, r3, r5
 800e572:	b201      	sxth	r1, r0
 800e574:	fb02 f20b 	mul.w	r2, r2, fp
 800e578:	464f      	mov	r7, r9
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	9108      	str	r1, [sp, #32]
 800e57e:	9210      	str	r2, [sp, #64]	; 0x40
 800e580:	4622      	mov	r2, r4
 800e582:	3301      	adds	r3, #1
 800e584:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e586:	940d      	str	r4, [sp, #52]	; 0x34
 800e588:	4699      	mov	r9, r3
 800e58a:	910c      	str	r1, [sp, #48]	; 0x30
 800e58c:	2f00      	cmp	r7, #0
 800e58e:	d075      	beq.n	800e67c <st_int8_avepool+0x1cc>
 800e590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e592:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 800e596:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e598:	eef8 5ac4 	vcvt.f32.s32	s11, s8
 800e59c:	441a      	add	r2, r3
 800e59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5a0:	fa0f f881 	sxth.w	r8, r1
 800e5a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e5a8:	185d      	adds	r5, r3, r1
 800e5aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	fb07 f202 	mul.w	r2, r7, r2
 800e5b2:	4443      	add	r3, r8
 800e5b4:	b22d      	sxth	r5, r5
 800e5b6:	9105      	str	r1, [sp, #20]
 800e5b8:	fb07 f303 	mul.w	r3, r7, r3
 800e5bc:	9206      	str	r2, [sp, #24]
 800e5be:	930a      	str	r3, [sp, #40]	; 0x28
 800e5c0:	9104      	str	r1, [sp, #16]
 800e5c2:	9b08      	ldr	r3, [sp, #32]
 800e5c4:	459b      	cmp	fp, r3
 800e5c6:	f280 8090 	bge.w	800e6ea <st_int8_avepool+0x23a>
 800e5ca:	9b04      	ldr	r3, [sp, #16]
 800e5cc:	2400      	movs	r4, #0
 800e5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5d0:	46a4      	mov	ip, r4
 800e5d2:	46a6      	mov	lr, r4
 800e5d4:	189e      	adds	r6, r3, r2
 800e5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5d8:	441e      	add	r6, r3
 800e5da:	45a8      	cmp	r8, r5
 800e5dc:	da1b      	bge.n	800e616 <st_int8_avepool+0x166>
 800e5de:	9b01      	ldr	r3, [sp, #4]
 800e5e0:	9902      	ldr	r1, [sp, #8]
 800e5e2:	191a      	adds	r2, r3, r4
 800e5e4:	eb0b 0304 	add.w	r3, fp, r4
 800e5e8:	43d2      	mvns	r2, r2
 800e5ea:	4299      	cmp	r1, r3
 800e5ec:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800e5f0:	dd11      	ble.n	800e616 <st_int8_avepool+0x166>
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4643      	mov	r3, r8
 800e5f6:	0418      	lsls	r0, r3, #16
 800e5f8:	d408      	bmi.n	800e60c <st_int8_avepool+0x15c>
 800e5fa:	b13a      	cbz	r2, 800e60c <st_int8_avepool+0x15c>
 800e5fc:	9803      	ldr	r0, [sp, #12]
 800e5fe:	4298      	cmp	r0, r3
 800e600:	dd04      	ble.n	800e60c <st_int8_avepool+0x15c>
 800e602:	f991 0000 	ldrsb.w	r0, [r1]
 800e606:	f10c 0c01 	add.w	ip, ip, #1
 800e60a:	4486      	add	lr, r0
 800e60c:	3301      	adds	r3, #1
 800e60e:	4439      	add	r1, r7
 800e610:	b218      	sxth	r0, r3
 800e612:	4285      	cmp	r5, r0
 800e614:	dcef      	bgt.n	800e5f6 <st_int8_avepool+0x146>
 800e616:	3401      	adds	r4, #1
 800e618:	4456      	add	r6, sl
 800e61a:	45a1      	cmp	r9, r4
 800e61c:	d1dd      	bne.n	800e5da <st_int8_avepool+0x12a>
 800e61e:	9b07      	ldr	r3, [sp, #28]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d14f      	bne.n	800e6c4 <st_int8_avepool+0x214>
 800e624:	ee07 ea90 	vmov	s15, lr
 800e628:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e62c:	ee07 ca90 	vmov	s15, ip
 800e630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e638:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e63c:	eef0 6a65 	vmov.f32	s13, s11
 800e640:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e644:	eee7 6aa4 	vfma.f32	s13, s15, s9
 800e648:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e650:	fe26 7a07 	vselge.f32	s14, s12, s14
 800e654:	ee77 7a26 	vadd.f32	s15, s14, s13
 800e658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e65c:	ee17 3a90 	vmov	r3, s15
 800e660:	f303 0307 	ssat	r3, #8, r3
 800e664:	9906      	ldr	r1, [sp, #24]
 800e666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e668:	440a      	add	r2, r1
 800e66a:	9904      	ldr	r1, [sp, #16]
 800e66c:	5453      	strb	r3, [r2, r1]
 800e66e:	9b05      	ldr	r3, [sp, #20]
 800e670:	3301      	adds	r3, #1
 800e672:	b21b      	sxth	r3, r3
 800e674:	42bb      	cmp	r3, r7
 800e676:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e67a:	dba2      	blt.n	800e5c2 <st_int8_avepool+0x112>
 800e67c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e67e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e680:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e682:	3201      	adds	r2, #1
 800e684:	440b      	add	r3, r1
 800e686:	b212      	sxth	r2, r2
 800e688:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	920d      	str	r2, [sp, #52]	; 0x34
 800e68e:	428a      	cmp	r2, r1
 800e690:	930c      	str	r3, [sp, #48]	; 0x30
 800e692:	f6ff af7b 	blt.w	800e58c <st_int8_avepool+0xdc>
 800e696:	46b9      	mov	r9, r7
 800e698:	9b01      	ldr	r3, [sp, #4]
 800e69a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e69c:	461a      	mov	r2, r3
 800e69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e6a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e6a2:	4403      	add	r3, r0
 800e6a4:	4402      	add	r2, r0
 800e6a6:	3101      	adds	r1, #1
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	b209      	sxth	r1, r1
 800e6ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800e6ae:	b292      	uxth	r2, r2
 800e6b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6b2:	9201      	str	r2, [sp, #4]
 800e6b4:	460a      	mov	r2, r1
 800e6b6:	428b      	cmp	r3, r1
 800e6b8:	9114      	str	r1, [sp, #80]	; 0x50
 800e6ba:	f73f af4b 	bgt.w	800e554 <st_int8_avepool+0xa4>
 800e6be:	b019      	add	sp, #100	; 0x64
 800e6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c4:	f1be 0f00 	cmp.w	lr, #0
 800e6c8:	db04      	blt.n	800e6d4 <st_int8_avepool+0x224>
 800e6ca:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 800e6ce:	fb9e f3fc 	sdiv	r3, lr, ip
 800e6d2:	e7c5      	b.n	800e660 <st_int8_avepool+0x1b0>
 800e6d4:	f1bc 0f00 	cmp.w	ip, #0
 800e6d8:	4663      	mov	r3, ip
 800e6da:	bfb8      	it	lt
 800e6dc:	f10c 0301 	addlt.w	r3, ip, #1
 800e6e0:	ebae 0363 	sub.w	r3, lr, r3, asr #1
 800e6e4:	fb93 f3fc 	sdiv	r3, r3, ip
 800e6e8:	e7ba      	b.n	800e660 <st_int8_avepool+0x1b0>
 800e6ea:	9b07      	ldr	r3, [sp, #28]
 800e6ec:	b913      	cbnz	r3, 800e6f4 <st_int8_avepool+0x244>
 800e6ee:	eef0 7a43 	vmov.f32	s15, s6
 800e6f2:	e7a1      	b.n	800e638 <st_int8_avepool+0x188>
 800e6f4:	deff      	udf	#255	; 0xff
 800e6f6:	bf00      	nop
 800e6f8:	7fc00000 	.word	0x7fc00000

0800e6fc <ai_array_to_buffer_fmt>:
 800e6fc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e700:	2b02      	cmp	r3, #2
 800e702:	d01f      	beq.n	800e744 <ai_array_to_buffer_fmt+0x48>
 800e704:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800e708:	4a1b      	ldr	r2, [pc, #108]	; (800e778 <ai_array_to_buffer_fmt+0x7c>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d00a      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e70e:	dc0d      	bgt.n	800e72c <ai_array_to_buffer_fmt+0x30>
 800e710:	4a1a      	ldr	r2, [pc, #104]	; (800e77c <ai_array_to_buffer_fmt+0x80>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d006      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e716:	dd1d      	ble.n	800e754 <ai_array_to_buffer_fmt+0x58>
 800e718:	4a19      	ldr	r2, [pc, #100]	; (800e780 <ai_array_to_buffer_fmt+0x84>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d002      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e71e:	320f      	adds	r2, #15
 800e720:	4293      	cmp	r3, r2
 800e722:	d10d      	bne.n	800e740 <ai_array_to_buffer_fmt+0x44>
 800e724:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e728:	4318      	orrs	r0, r3
 800e72a:	4770      	bx	lr
 800e72c:	4a15      	ldr	r2, [pc, #84]	; (800e784 <ai_array_to_buffer_fmt+0x88>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d0f8      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e732:	dd18      	ble.n	800e766 <ai_array_to_buffer_fmt+0x6a>
 800e734:	4a14      	ldr	r2, [pc, #80]	; (800e788 <ai_array_to_buffer_fmt+0x8c>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d0f4      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e73a:	4a14      	ldr	r2, [pc, #80]	; (800e78c <ai_array_to_buffer_fmt+0x90>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d0f1      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e740:	2340      	movs	r3, #64	; 0x40
 800e742:	e7ef      	b.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e744:	4b12      	ldr	r3, [pc, #72]	; (800e790 <ai_array_to_buffer_fmt+0x94>)
 800e746:	4003      	ands	r3, r0
 800e748:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e74c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e750:	4318      	orrs	r0, r3
 800e752:	4770      	bx	lr
 800e754:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800e758:	4293      	cmp	r3, r2
 800e75a:	d0e3      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e75c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e760:	4293      	cmp	r3, r2
 800e762:	d0df      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e764:	e7ec      	b.n	800e740 <ai_array_to_buffer_fmt+0x44>
 800e766:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d0da      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e76e:	3207      	adds	r2, #7
 800e770:	4293      	cmp	r3, r2
 800e772:	d0d7      	beq.n	800e724 <ai_array_to_buffer_fmt+0x28>
 800e774:	e7e4      	b.n	800e740 <ai_array_to_buffer_fmt+0x44>
 800e776:	bf00      	nop
 800e778:	00840040 	.word	0x00840040
 800e77c:	00040447 	.word	0x00040447
 800e780:	00040840 	.word	0x00040840
 800e784:	00840840 	.word	0x00840840
 800e788:	0084084f 	.word	0x0084084f
 800e78c:	01821040 	.word	0x01821040
 800e790:	00803fff 	.word	0x00803fff

0800e794 <ai_array_get_byte_size>:
 800e794:	b1e1      	cbz	r1, 800e7d0 <ai_array_get_byte_size+0x3c>
 800e796:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e79a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800e79e:	b410      	push	{r4}
 800e7a0:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800e7a4:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800e7a8:	4423      	add	r3, r4
 800e7aa:	2804      	cmp	r0, #4
 800e7ac:	fb01 f103 	mul.w	r1, r1, r3
 800e7b0:	f101 0107 	add.w	r1, r1, #7
 800e7b4:	f021 0107 	bic.w	r1, r1, #7
 800e7b8:	fa21 f102 	lsr.w	r1, r1, r2
 800e7bc:	d00a      	beq.n	800e7d4 <ai_array_get_byte_size+0x40>
 800e7be:	2808      	cmp	r0, #8
 800e7c0:	d101      	bne.n	800e7c6 <ai_array_get_byte_size+0x32>
 800e7c2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e7c6:	3107      	adds	r1, #7
 800e7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7cc:	08c8      	lsrs	r0, r1, #3
 800e7ce:	4770      	bx	lr
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	4770      	bx	lr
 800e7d4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800e7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7dc:	3107      	adds	r1, #7
 800e7de:	08c8      	lsrs	r0, r1, #3
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop

0800e7e4 <core_tensor_clone>:
 800e7e4:	680b      	ldr	r3, [r1, #0]
 800e7e6:	6882      	ldr	r2, [r0, #8]
 800e7e8:	6003      	str	r3, [r0, #0]
 800e7ea:	684b      	ldr	r3, [r1, #4]
 800e7ec:	6043      	str	r3, [r0, #4]
 800e7ee:	698b      	ldr	r3, [r1, #24]
 800e7f0:	6183      	str	r3, [r0, #24]
 800e7f2:	688b      	ldr	r3, [r1, #8]
 800e7f4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e7f8:	f363 221f 	bfi	r2, r3, #8, #24
 800e7fc:	b410      	push	{r4}
 800e7fe:	6082      	str	r2, [r0, #8]
 800e800:	b15b      	cbz	r3, 800e81a <core_tensor_clone+0x36>
 800e802:	2300      	movs	r3, #0
 800e804:	68cc      	ldr	r4, [r1, #12]
 800e806:	68c2      	ldr	r2, [r0, #12]
 800e808:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e80c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e810:	3301      	adds	r3, #1
 800e812:	6882      	ldr	r2, [r0, #8]
 800e814:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e818:	d3f4      	bcc.n	800e804 <core_tensor_clone+0x20>
 800e81a:	690b      	ldr	r3, [r1, #16]
 800e81c:	6902      	ldr	r2, [r0, #16]
 800e81e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e822:	f363 221f 	bfi	r2, r3, #8, #24
 800e826:	6102      	str	r2, [r0, #16]
 800e828:	b15b      	cbz	r3, 800e842 <core_tensor_clone+0x5e>
 800e82a:	2300      	movs	r3, #0
 800e82c:	694c      	ldr	r4, [r1, #20]
 800e82e:	6942      	ldr	r2, [r0, #20]
 800e830:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e834:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e838:	3301      	adds	r3, #1
 800e83a:	6902      	ldr	r2, [r0, #16]
 800e83c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e840:	d3f4      	bcc.n	800e82c <core_tensor_clone+0x48>
 800e842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <core_array_clone>:
 800e848:	b410      	push	{r4}
 800e84a:	4604      	mov	r4, r0
 800e84c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e84e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <arm_copy_q7>:
 800e858:	b470      	push	{r4, r5, r6}
 800e85a:	0896      	lsrs	r6, r2, #2
 800e85c:	d01b      	beq.n	800e896 <arm_copy_q7+0x3e>
 800e85e:	00b6      	lsls	r6, r6, #2
 800e860:	460b      	mov	r3, r1
 800e862:	1985      	adds	r5, r0, r6
 800e864:	f850 4b04 	ldr.w	r4, [r0], #4
 800e868:	42a8      	cmp	r0, r5
 800e86a:	f843 4b04 	str.w	r4, [r3], #4
 800e86e:	d1f9      	bne.n	800e864 <arm_copy_q7+0xc>
 800e870:	4431      	add	r1, r6
 800e872:	f012 0203 	ands.w	r2, r2, #3
 800e876:	d00c      	beq.n	800e892 <arm_copy_q7+0x3a>
 800e878:	f995 3000 	ldrsb.w	r3, [r5]
 800e87c:	2a01      	cmp	r2, #1
 800e87e:	700b      	strb	r3, [r1, #0]
 800e880:	d007      	beq.n	800e892 <arm_copy_q7+0x3a>
 800e882:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e886:	2a02      	cmp	r2, #2
 800e888:	704b      	strb	r3, [r1, #1]
 800e88a:	d002      	beq.n	800e892 <arm_copy_q7+0x3a>
 800e88c:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800e890:	708b      	strb	r3, [r1, #2]
 800e892:	bc70      	pop	{r4, r5, r6}
 800e894:	4770      	bx	lr
 800e896:	4605      	mov	r5, r0
 800e898:	e7eb      	b.n	800e872 <arm_copy_q7+0x1a>
 800e89a:	bf00      	nop

0800e89c <arm_fill_q15>:
 800e89c:	b470      	push	{r4, r5, r6}
 800e89e:	b285      	uxth	r5, r0
 800e8a0:	0896      	lsrs	r6, r2, #2
 800e8a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800e8a6:	d009      	beq.n	800e8bc <arm_fill_q15+0x20>
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4634      	mov	r4, r6
 800e8ac:	3c01      	subs	r4, #1
 800e8ae:	601d      	str	r5, [r3, #0]
 800e8b0:	605d      	str	r5, [r3, #4]
 800e8b2:	f103 0308 	add.w	r3, r3, #8
 800e8b6:	d1f9      	bne.n	800e8ac <arm_fill_q15+0x10>
 800e8b8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e8bc:	f012 0203 	ands.w	r2, r2, #3
 800e8c0:	d006      	beq.n	800e8d0 <arm_fill_q15+0x34>
 800e8c2:	2a01      	cmp	r2, #1
 800e8c4:	8008      	strh	r0, [r1, #0]
 800e8c6:	d003      	beq.n	800e8d0 <arm_fill_q15+0x34>
 800e8c8:	2a02      	cmp	r2, #2
 800e8ca:	8048      	strh	r0, [r1, #2]
 800e8cc:	bf18      	it	ne
 800e8ce:	8088      	strhne	r0, [r1, #4]
 800e8d0:	bc70      	pop	{r4, r5, r6}
 800e8d2:	4770      	bx	lr

0800e8d4 <__errno>:
 800e8d4:	4b01      	ldr	r3, [pc, #4]	; (800e8dc <__errno+0x8>)
 800e8d6:	6818      	ldr	r0, [r3, #0]
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	200011c4 	.word	0x200011c4

0800e8e0 <__libc_init_array>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	4d0d      	ldr	r5, [pc, #52]	; (800e918 <__libc_init_array+0x38>)
 800e8e4:	4c0d      	ldr	r4, [pc, #52]	; (800e91c <__libc_init_array+0x3c>)
 800e8e6:	1b64      	subs	r4, r4, r5
 800e8e8:	10a4      	asrs	r4, r4, #2
 800e8ea:	2600      	movs	r6, #0
 800e8ec:	42a6      	cmp	r6, r4
 800e8ee:	d109      	bne.n	800e904 <__libc_init_array+0x24>
 800e8f0:	4d0b      	ldr	r5, [pc, #44]	; (800e920 <__libc_init_array+0x40>)
 800e8f2:	4c0c      	ldr	r4, [pc, #48]	; (800e924 <__libc_init_array+0x44>)
 800e8f4:	f003 f90c 	bl	8011b10 <_init>
 800e8f8:	1b64      	subs	r4, r4, r5
 800e8fa:	10a4      	asrs	r4, r4, #2
 800e8fc:	2600      	movs	r6, #0
 800e8fe:	42a6      	cmp	r6, r4
 800e900:	d105      	bne.n	800e90e <__libc_init_array+0x2e>
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	f855 3b04 	ldr.w	r3, [r5], #4
 800e908:	4798      	blx	r3
 800e90a:	3601      	adds	r6, #1
 800e90c:	e7ee      	b.n	800e8ec <__libc_init_array+0xc>
 800e90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e912:	4798      	blx	r3
 800e914:	3601      	adds	r6, #1
 800e916:	e7f2      	b.n	800e8fe <__libc_init_array+0x1e>
 800e918:	08013038 	.word	0x08013038
 800e91c:	08013038 	.word	0x08013038
 800e920:	08013038 	.word	0x08013038
 800e924:	0801303c 	.word	0x0801303c

0800e928 <malloc>:
 800e928:	4b02      	ldr	r3, [pc, #8]	; (800e934 <malloc+0xc>)
 800e92a:	4601      	mov	r1, r0
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	f000 b88d 	b.w	800ea4c <_malloc_r>
 800e932:	bf00      	nop
 800e934:	200011c4 	.word	0x200011c4

0800e938 <free>:
 800e938:	4b02      	ldr	r3, [pc, #8]	; (800e944 <free+0xc>)
 800e93a:	4601      	mov	r1, r0
 800e93c:	6818      	ldr	r0, [r3, #0]
 800e93e:	f000 b819 	b.w	800e974 <_free_r>
 800e942:	bf00      	nop
 800e944:	200011c4 	.word	0x200011c4

0800e948 <memcpy>:
 800e948:	440a      	add	r2, r1
 800e94a:	4291      	cmp	r1, r2
 800e94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e950:	d100      	bne.n	800e954 <memcpy+0xc>
 800e952:	4770      	bx	lr
 800e954:	b510      	push	{r4, lr}
 800e956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e95e:	4291      	cmp	r1, r2
 800e960:	d1f9      	bne.n	800e956 <memcpy+0xe>
 800e962:	bd10      	pop	{r4, pc}

0800e964 <memset>:
 800e964:	4402      	add	r2, r0
 800e966:	4603      	mov	r3, r0
 800e968:	4293      	cmp	r3, r2
 800e96a:	d100      	bne.n	800e96e <memset+0xa>
 800e96c:	4770      	bx	lr
 800e96e:	f803 1b01 	strb.w	r1, [r3], #1
 800e972:	e7f9      	b.n	800e968 <memset+0x4>

0800e974 <_free_r>:
 800e974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e976:	2900      	cmp	r1, #0
 800e978:	d044      	beq.n	800ea04 <_free_r+0x90>
 800e97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e97e:	9001      	str	r0, [sp, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	f1a1 0404 	sub.w	r4, r1, #4
 800e986:	bfb8      	it	lt
 800e988:	18e4      	addlt	r4, r4, r3
 800e98a:	f001 fe9b 	bl	80106c4 <__malloc_lock>
 800e98e:	4a1e      	ldr	r2, [pc, #120]	; (800ea08 <_free_r+0x94>)
 800e990:	9801      	ldr	r0, [sp, #4]
 800e992:	6813      	ldr	r3, [r2, #0]
 800e994:	b933      	cbnz	r3, 800e9a4 <_free_r+0x30>
 800e996:	6063      	str	r3, [r4, #4]
 800e998:	6014      	str	r4, [r2, #0]
 800e99a:	b003      	add	sp, #12
 800e99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9a0:	f001 be96 	b.w	80106d0 <__malloc_unlock>
 800e9a4:	42a3      	cmp	r3, r4
 800e9a6:	d908      	bls.n	800e9ba <_free_r+0x46>
 800e9a8:	6825      	ldr	r5, [r4, #0]
 800e9aa:	1961      	adds	r1, r4, r5
 800e9ac:	428b      	cmp	r3, r1
 800e9ae:	bf01      	itttt	eq
 800e9b0:	6819      	ldreq	r1, [r3, #0]
 800e9b2:	685b      	ldreq	r3, [r3, #4]
 800e9b4:	1949      	addeq	r1, r1, r5
 800e9b6:	6021      	streq	r1, [r4, #0]
 800e9b8:	e7ed      	b.n	800e996 <_free_r+0x22>
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	b10b      	cbz	r3, 800e9c4 <_free_r+0x50>
 800e9c0:	42a3      	cmp	r3, r4
 800e9c2:	d9fa      	bls.n	800e9ba <_free_r+0x46>
 800e9c4:	6811      	ldr	r1, [r2, #0]
 800e9c6:	1855      	adds	r5, r2, r1
 800e9c8:	42a5      	cmp	r5, r4
 800e9ca:	d10b      	bne.n	800e9e4 <_free_r+0x70>
 800e9cc:	6824      	ldr	r4, [r4, #0]
 800e9ce:	4421      	add	r1, r4
 800e9d0:	1854      	adds	r4, r2, r1
 800e9d2:	42a3      	cmp	r3, r4
 800e9d4:	6011      	str	r1, [r2, #0]
 800e9d6:	d1e0      	bne.n	800e99a <_free_r+0x26>
 800e9d8:	681c      	ldr	r4, [r3, #0]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	6053      	str	r3, [r2, #4]
 800e9de:	4421      	add	r1, r4
 800e9e0:	6011      	str	r1, [r2, #0]
 800e9e2:	e7da      	b.n	800e99a <_free_r+0x26>
 800e9e4:	d902      	bls.n	800e9ec <_free_r+0x78>
 800e9e6:	230c      	movs	r3, #12
 800e9e8:	6003      	str	r3, [r0, #0]
 800e9ea:	e7d6      	b.n	800e99a <_free_r+0x26>
 800e9ec:	6825      	ldr	r5, [r4, #0]
 800e9ee:	1961      	adds	r1, r4, r5
 800e9f0:	428b      	cmp	r3, r1
 800e9f2:	bf04      	itt	eq
 800e9f4:	6819      	ldreq	r1, [r3, #0]
 800e9f6:	685b      	ldreq	r3, [r3, #4]
 800e9f8:	6063      	str	r3, [r4, #4]
 800e9fa:	bf04      	itt	eq
 800e9fc:	1949      	addeq	r1, r1, r5
 800e9fe:	6021      	streq	r1, [r4, #0]
 800ea00:	6054      	str	r4, [r2, #4]
 800ea02:	e7ca      	b.n	800e99a <_free_r+0x26>
 800ea04:	b003      	add	sp, #12
 800ea06:	bd30      	pop	{r4, r5, pc}
 800ea08:	200018dc 	.word	0x200018dc

0800ea0c <sbrk_aligned>:
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	4e0e      	ldr	r6, [pc, #56]	; (800ea48 <sbrk_aligned+0x3c>)
 800ea10:	460c      	mov	r4, r1
 800ea12:	6831      	ldr	r1, [r6, #0]
 800ea14:	4605      	mov	r5, r0
 800ea16:	b911      	cbnz	r1, 800ea1e <sbrk_aligned+0x12>
 800ea18:	f000 fd46 	bl	800f4a8 <_sbrk_r>
 800ea1c:	6030      	str	r0, [r6, #0]
 800ea1e:	4621      	mov	r1, r4
 800ea20:	4628      	mov	r0, r5
 800ea22:	f000 fd41 	bl	800f4a8 <_sbrk_r>
 800ea26:	1c43      	adds	r3, r0, #1
 800ea28:	d00a      	beq.n	800ea40 <sbrk_aligned+0x34>
 800ea2a:	1cc4      	adds	r4, r0, #3
 800ea2c:	f024 0403 	bic.w	r4, r4, #3
 800ea30:	42a0      	cmp	r0, r4
 800ea32:	d007      	beq.n	800ea44 <sbrk_aligned+0x38>
 800ea34:	1a21      	subs	r1, r4, r0
 800ea36:	4628      	mov	r0, r5
 800ea38:	f000 fd36 	bl	800f4a8 <_sbrk_r>
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	d101      	bne.n	800ea44 <sbrk_aligned+0x38>
 800ea40:	f04f 34ff 	mov.w	r4, #4294967295
 800ea44:	4620      	mov	r0, r4
 800ea46:	bd70      	pop	{r4, r5, r6, pc}
 800ea48:	200018e0 	.word	0x200018e0

0800ea4c <_malloc_r>:
 800ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea50:	1ccd      	adds	r5, r1, #3
 800ea52:	f025 0503 	bic.w	r5, r5, #3
 800ea56:	3508      	adds	r5, #8
 800ea58:	2d0c      	cmp	r5, #12
 800ea5a:	bf38      	it	cc
 800ea5c:	250c      	movcc	r5, #12
 800ea5e:	2d00      	cmp	r5, #0
 800ea60:	4607      	mov	r7, r0
 800ea62:	db01      	blt.n	800ea68 <_malloc_r+0x1c>
 800ea64:	42a9      	cmp	r1, r5
 800ea66:	d905      	bls.n	800ea74 <_malloc_r+0x28>
 800ea68:	230c      	movs	r3, #12
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	2600      	movs	r6, #0
 800ea6e:	4630      	mov	r0, r6
 800ea70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea74:	4e2e      	ldr	r6, [pc, #184]	; (800eb30 <_malloc_r+0xe4>)
 800ea76:	f001 fe25 	bl	80106c4 <__malloc_lock>
 800ea7a:	6833      	ldr	r3, [r6, #0]
 800ea7c:	461c      	mov	r4, r3
 800ea7e:	bb34      	cbnz	r4, 800eace <_malloc_r+0x82>
 800ea80:	4629      	mov	r1, r5
 800ea82:	4638      	mov	r0, r7
 800ea84:	f7ff ffc2 	bl	800ea0c <sbrk_aligned>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	d14d      	bne.n	800eb2a <_malloc_r+0xde>
 800ea8e:	6834      	ldr	r4, [r6, #0]
 800ea90:	4626      	mov	r6, r4
 800ea92:	2e00      	cmp	r6, #0
 800ea94:	d140      	bne.n	800eb18 <_malloc_r+0xcc>
 800ea96:	6823      	ldr	r3, [r4, #0]
 800ea98:	4631      	mov	r1, r6
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	eb04 0803 	add.w	r8, r4, r3
 800eaa0:	f000 fd02 	bl	800f4a8 <_sbrk_r>
 800eaa4:	4580      	cmp	r8, r0
 800eaa6:	d13a      	bne.n	800eb1e <_malloc_r+0xd2>
 800eaa8:	6821      	ldr	r1, [r4, #0]
 800eaaa:	3503      	adds	r5, #3
 800eaac:	1a6d      	subs	r5, r5, r1
 800eaae:	f025 0503 	bic.w	r5, r5, #3
 800eab2:	3508      	adds	r5, #8
 800eab4:	2d0c      	cmp	r5, #12
 800eab6:	bf38      	it	cc
 800eab8:	250c      	movcc	r5, #12
 800eaba:	4629      	mov	r1, r5
 800eabc:	4638      	mov	r0, r7
 800eabe:	f7ff ffa5 	bl	800ea0c <sbrk_aligned>
 800eac2:	3001      	adds	r0, #1
 800eac4:	d02b      	beq.n	800eb1e <_malloc_r+0xd2>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	442b      	add	r3, r5
 800eaca:	6023      	str	r3, [r4, #0]
 800eacc:	e00e      	b.n	800eaec <_malloc_r+0xa0>
 800eace:	6822      	ldr	r2, [r4, #0]
 800ead0:	1b52      	subs	r2, r2, r5
 800ead2:	d41e      	bmi.n	800eb12 <_malloc_r+0xc6>
 800ead4:	2a0b      	cmp	r2, #11
 800ead6:	d916      	bls.n	800eb06 <_malloc_r+0xba>
 800ead8:	1961      	adds	r1, r4, r5
 800eada:	42a3      	cmp	r3, r4
 800eadc:	6025      	str	r5, [r4, #0]
 800eade:	bf18      	it	ne
 800eae0:	6059      	strne	r1, [r3, #4]
 800eae2:	6863      	ldr	r3, [r4, #4]
 800eae4:	bf08      	it	eq
 800eae6:	6031      	streq	r1, [r6, #0]
 800eae8:	5162      	str	r2, [r4, r5]
 800eaea:	604b      	str	r3, [r1, #4]
 800eaec:	4638      	mov	r0, r7
 800eaee:	f104 060b 	add.w	r6, r4, #11
 800eaf2:	f001 fded 	bl	80106d0 <__malloc_unlock>
 800eaf6:	f026 0607 	bic.w	r6, r6, #7
 800eafa:	1d23      	adds	r3, r4, #4
 800eafc:	1af2      	subs	r2, r6, r3
 800eafe:	d0b6      	beq.n	800ea6e <_malloc_r+0x22>
 800eb00:	1b9b      	subs	r3, r3, r6
 800eb02:	50a3      	str	r3, [r4, r2]
 800eb04:	e7b3      	b.n	800ea6e <_malloc_r+0x22>
 800eb06:	6862      	ldr	r2, [r4, #4]
 800eb08:	42a3      	cmp	r3, r4
 800eb0a:	bf0c      	ite	eq
 800eb0c:	6032      	streq	r2, [r6, #0]
 800eb0e:	605a      	strne	r2, [r3, #4]
 800eb10:	e7ec      	b.n	800eaec <_malloc_r+0xa0>
 800eb12:	4623      	mov	r3, r4
 800eb14:	6864      	ldr	r4, [r4, #4]
 800eb16:	e7b2      	b.n	800ea7e <_malloc_r+0x32>
 800eb18:	4634      	mov	r4, r6
 800eb1a:	6876      	ldr	r6, [r6, #4]
 800eb1c:	e7b9      	b.n	800ea92 <_malloc_r+0x46>
 800eb1e:	230c      	movs	r3, #12
 800eb20:	603b      	str	r3, [r7, #0]
 800eb22:	4638      	mov	r0, r7
 800eb24:	f001 fdd4 	bl	80106d0 <__malloc_unlock>
 800eb28:	e7a1      	b.n	800ea6e <_malloc_r+0x22>
 800eb2a:	6025      	str	r5, [r4, #0]
 800eb2c:	e7de      	b.n	800eaec <_malloc_r+0xa0>
 800eb2e:	bf00      	nop
 800eb30:	200018dc 	.word	0x200018dc

0800eb34 <__cvt>:
 800eb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb36:	ed2d 8b02 	vpush	{d8}
 800eb3a:	eeb0 8b40 	vmov.f64	d8, d0
 800eb3e:	b085      	sub	sp, #20
 800eb40:	4617      	mov	r7, r2
 800eb42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800eb44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eb46:	ee18 2a90 	vmov	r2, s17
 800eb4a:	f025 0520 	bic.w	r5, r5, #32
 800eb4e:	2a00      	cmp	r2, #0
 800eb50:	bfb6      	itet	lt
 800eb52:	222d      	movlt	r2, #45	; 0x2d
 800eb54:	2200      	movge	r2, #0
 800eb56:	eeb1 8b40 	vneglt.f64	d8, d0
 800eb5a:	2d46      	cmp	r5, #70	; 0x46
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	701a      	strb	r2, [r3, #0]
 800eb60:	d004      	beq.n	800eb6c <__cvt+0x38>
 800eb62:	2d45      	cmp	r5, #69	; 0x45
 800eb64:	d100      	bne.n	800eb68 <__cvt+0x34>
 800eb66:	3401      	adds	r4, #1
 800eb68:	2102      	movs	r1, #2
 800eb6a:	e000      	b.n	800eb6e <__cvt+0x3a>
 800eb6c:	2103      	movs	r1, #3
 800eb6e:	ab03      	add	r3, sp, #12
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	ab02      	add	r3, sp, #8
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	4622      	mov	r2, r4
 800eb78:	4633      	mov	r3, r6
 800eb7a:	eeb0 0b48 	vmov.f64	d0, d8
 800eb7e:	f000 fe0f 	bl	800f7a0 <_dtoa_r>
 800eb82:	2d47      	cmp	r5, #71	; 0x47
 800eb84:	d101      	bne.n	800eb8a <__cvt+0x56>
 800eb86:	07fb      	lsls	r3, r7, #31
 800eb88:	d51a      	bpl.n	800ebc0 <__cvt+0x8c>
 800eb8a:	2d46      	cmp	r5, #70	; 0x46
 800eb8c:	eb00 0204 	add.w	r2, r0, r4
 800eb90:	d10c      	bne.n	800ebac <__cvt+0x78>
 800eb92:	7803      	ldrb	r3, [r0, #0]
 800eb94:	2b30      	cmp	r3, #48	; 0x30
 800eb96:	d107      	bne.n	800eba8 <__cvt+0x74>
 800eb98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba0:	bf1c      	itt	ne
 800eba2:	f1c4 0401 	rsbne	r4, r4, #1
 800eba6:	6034      	strne	r4, [r6, #0]
 800eba8:	6833      	ldr	r3, [r6, #0]
 800ebaa:	441a      	add	r2, r3
 800ebac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ebb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb4:	bf08      	it	eq
 800ebb6:	9203      	streq	r2, [sp, #12]
 800ebb8:	2130      	movs	r1, #48	; 0x30
 800ebba:	9b03      	ldr	r3, [sp, #12]
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d307      	bcc.n	800ebd0 <__cvt+0x9c>
 800ebc0:	9b03      	ldr	r3, [sp, #12]
 800ebc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebc4:	1a1b      	subs	r3, r3, r0
 800ebc6:	6013      	str	r3, [r2, #0]
 800ebc8:	b005      	add	sp, #20
 800ebca:	ecbd 8b02 	vpop	{d8}
 800ebce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebd0:	1c5c      	adds	r4, r3, #1
 800ebd2:	9403      	str	r4, [sp, #12]
 800ebd4:	7019      	strb	r1, [r3, #0]
 800ebd6:	e7f0      	b.n	800ebba <__cvt+0x86>

0800ebd8 <__exponent>:
 800ebd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2900      	cmp	r1, #0
 800ebde:	bfb8      	it	lt
 800ebe0:	4249      	neglt	r1, r1
 800ebe2:	f803 2b02 	strb.w	r2, [r3], #2
 800ebe6:	bfb4      	ite	lt
 800ebe8:	222d      	movlt	r2, #45	; 0x2d
 800ebea:	222b      	movge	r2, #43	; 0x2b
 800ebec:	2909      	cmp	r1, #9
 800ebee:	7042      	strb	r2, [r0, #1]
 800ebf0:	dd2a      	ble.n	800ec48 <__exponent+0x70>
 800ebf2:	f10d 0407 	add.w	r4, sp, #7
 800ebf6:	46a4      	mov	ip, r4
 800ebf8:	270a      	movs	r7, #10
 800ebfa:	46a6      	mov	lr, r4
 800ebfc:	460a      	mov	r2, r1
 800ebfe:	fb91 f6f7 	sdiv	r6, r1, r7
 800ec02:	fb07 1516 	mls	r5, r7, r6, r1
 800ec06:	3530      	adds	r5, #48	; 0x30
 800ec08:	2a63      	cmp	r2, #99	; 0x63
 800ec0a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ec0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ec12:	4631      	mov	r1, r6
 800ec14:	dcf1      	bgt.n	800ebfa <__exponent+0x22>
 800ec16:	3130      	adds	r1, #48	; 0x30
 800ec18:	f1ae 0502 	sub.w	r5, lr, #2
 800ec1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ec20:	1c44      	adds	r4, r0, #1
 800ec22:	4629      	mov	r1, r5
 800ec24:	4561      	cmp	r1, ip
 800ec26:	d30a      	bcc.n	800ec3e <__exponent+0x66>
 800ec28:	f10d 0209 	add.w	r2, sp, #9
 800ec2c:	eba2 020e 	sub.w	r2, r2, lr
 800ec30:	4565      	cmp	r5, ip
 800ec32:	bf88      	it	hi
 800ec34:	2200      	movhi	r2, #0
 800ec36:	4413      	add	r3, r2
 800ec38:	1a18      	subs	r0, r3, r0
 800ec3a:	b003      	add	sp, #12
 800ec3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ec46:	e7ed      	b.n	800ec24 <__exponent+0x4c>
 800ec48:	2330      	movs	r3, #48	; 0x30
 800ec4a:	3130      	adds	r1, #48	; 0x30
 800ec4c:	7083      	strb	r3, [r0, #2]
 800ec4e:	70c1      	strb	r1, [r0, #3]
 800ec50:	1d03      	adds	r3, r0, #4
 800ec52:	e7f1      	b.n	800ec38 <__exponent+0x60>
 800ec54:	0000      	movs	r0, r0
	...

0800ec58 <_printf_float>:
 800ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5c:	b08b      	sub	sp, #44	; 0x2c
 800ec5e:	460c      	mov	r4, r1
 800ec60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ec64:	4616      	mov	r6, r2
 800ec66:	461f      	mov	r7, r3
 800ec68:	4605      	mov	r5, r0
 800ec6a:	f001 fcbf 	bl	80105ec <_localeconv_r>
 800ec6e:	f8d0 b000 	ldr.w	fp, [r0]
 800ec72:	4658      	mov	r0, fp
 800ec74:	f7f1 fae4 	bl	8000240 <strlen>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	9308      	str	r3, [sp, #32]
 800ec7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ec80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ec84:	6822      	ldr	r2, [r4, #0]
 800ec86:	3307      	adds	r3, #7
 800ec88:	f023 0307 	bic.w	r3, r3, #7
 800ec8c:	f103 0108 	add.w	r1, r3, #8
 800ec90:	f8c8 1000 	str.w	r1, [r8]
 800ec94:	4682      	mov	sl, r0
 800ec96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ec9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ef00 <_printf_float+0x2a8>
 800eca2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800eca6:	eeb0 6bc0 	vabs.f64	d6, d0
 800ecaa:	eeb4 6b47 	vcmp.f64	d6, d7
 800ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb2:	dd24      	ble.n	800ecfe <_printf_float+0xa6>
 800ecb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ecb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbc:	d502      	bpl.n	800ecc4 <_printf_float+0x6c>
 800ecbe:	232d      	movs	r3, #45	; 0x2d
 800ecc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecc4:	4b90      	ldr	r3, [pc, #576]	; (800ef08 <_printf_float+0x2b0>)
 800ecc6:	4891      	ldr	r0, [pc, #580]	; (800ef0c <_printf_float+0x2b4>)
 800ecc8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800eccc:	bf94      	ite	ls
 800ecce:	4698      	movls	r8, r3
 800ecd0:	4680      	movhi	r8, r0
 800ecd2:	2303      	movs	r3, #3
 800ecd4:	6123      	str	r3, [r4, #16]
 800ecd6:	f022 0204 	bic.w	r2, r2, #4
 800ecda:	2300      	movs	r3, #0
 800ecdc:	6022      	str	r2, [r4, #0]
 800ecde:	9304      	str	r3, [sp, #16]
 800ece0:	9700      	str	r7, [sp, #0]
 800ece2:	4633      	mov	r3, r6
 800ece4:	aa09      	add	r2, sp, #36	; 0x24
 800ece6:	4621      	mov	r1, r4
 800ece8:	4628      	mov	r0, r5
 800ecea:	f000 f9d3 	bl	800f094 <_printf_common>
 800ecee:	3001      	adds	r0, #1
 800ecf0:	f040 808a 	bne.w	800ee08 <_printf_float+0x1b0>
 800ecf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf8:	b00b      	add	sp, #44	; 0x2c
 800ecfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfe:	eeb4 0b40 	vcmp.f64	d0, d0
 800ed02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed06:	d709      	bvc.n	800ed1c <_printf_float+0xc4>
 800ed08:	ee10 3a90 	vmov	r3, s1
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bfbc      	itt	lt
 800ed10:	232d      	movlt	r3, #45	; 0x2d
 800ed12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ed16:	487e      	ldr	r0, [pc, #504]	; (800ef10 <_printf_float+0x2b8>)
 800ed18:	4b7e      	ldr	r3, [pc, #504]	; (800ef14 <_printf_float+0x2bc>)
 800ed1a:	e7d5      	b.n	800ecc8 <_printf_float+0x70>
 800ed1c:	6863      	ldr	r3, [r4, #4]
 800ed1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ed22:	9104      	str	r1, [sp, #16]
 800ed24:	1c59      	adds	r1, r3, #1
 800ed26:	d13c      	bne.n	800eda2 <_printf_float+0x14a>
 800ed28:	2306      	movs	r3, #6
 800ed2a:	6063      	str	r3, [r4, #4]
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9303      	str	r3, [sp, #12]
 800ed30:	ab08      	add	r3, sp, #32
 800ed32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ed36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed3a:	ab07      	add	r3, sp, #28
 800ed3c:	6861      	ldr	r1, [r4, #4]
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	6022      	str	r2, [r4, #0]
 800ed42:	f10d 031b 	add.w	r3, sp, #27
 800ed46:	4628      	mov	r0, r5
 800ed48:	f7ff fef4 	bl	800eb34 <__cvt>
 800ed4c:	9b04      	ldr	r3, [sp, #16]
 800ed4e:	9907      	ldr	r1, [sp, #28]
 800ed50:	2b47      	cmp	r3, #71	; 0x47
 800ed52:	4680      	mov	r8, r0
 800ed54:	d108      	bne.n	800ed68 <_printf_float+0x110>
 800ed56:	1cc8      	adds	r0, r1, #3
 800ed58:	db02      	blt.n	800ed60 <_printf_float+0x108>
 800ed5a:	6863      	ldr	r3, [r4, #4]
 800ed5c:	4299      	cmp	r1, r3
 800ed5e:	dd41      	ble.n	800ede4 <_printf_float+0x18c>
 800ed60:	f1a9 0902 	sub.w	r9, r9, #2
 800ed64:	fa5f f989 	uxtb.w	r9, r9
 800ed68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ed6c:	d820      	bhi.n	800edb0 <_printf_float+0x158>
 800ed6e:	3901      	subs	r1, #1
 800ed70:	464a      	mov	r2, r9
 800ed72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ed76:	9107      	str	r1, [sp, #28]
 800ed78:	f7ff ff2e 	bl	800ebd8 <__exponent>
 800ed7c:	9a08      	ldr	r2, [sp, #32]
 800ed7e:	9004      	str	r0, [sp, #16]
 800ed80:	1813      	adds	r3, r2, r0
 800ed82:	2a01      	cmp	r2, #1
 800ed84:	6123      	str	r3, [r4, #16]
 800ed86:	dc02      	bgt.n	800ed8e <_printf_float+0x136>
 800ed88:	6822      	ldr	r2, [r4, #0]
 800ed8a:	07d2      	lsls	r2, r2, #31
 800ed8c:	d501      	bpl.n	800ed92 <_printf_float+0x13a>
 800ed8e:	3301      	adds	r3, #1
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d0a2      	beq.n	800ece0 <_printf_float+0x88>
 800ed9a:	232d      	movs	r3, #45	; 0x2d
 800ed9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eda0:	e79e      	b.n	800ece0 <_printf_float+0x88>
 800eda2:	9904      	ldr	r1, [sp, #16]
 800eda4:	2947      	cmp	r1, #71	; 0x47
 800eda6:	d1c1      	bne.n	800ed2c <_printf_float+0xd4>
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1bf      	bne.n	800ed2c <_printf_float+0xd4>
 800edac:	2301      	movs	r3, #1
 800edae:	e7bc      	b.n	800ed2a <_printf_float+0xd2>
 800edb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800edb4:	d118      	bne.n	800ede8 <_printf_float+0x190>
 800edb6:	2900      	cmp	r1, #0
 800edb8:	6863      	ldr	r3, [r4, #4]
 800edba:	dd0b      	ble.n	800edd4 <_printf_float+0x17c>
 800edbc:	6121      	str	r1, [r4, #16]
 800edbe:	b913      	cbnz	r3, 800edc6 <_printf_float+0x16e>
 800edc0:	6822      	ldr	r2, [r4, #0]
 800edc2:	07d0      	lsls	r0, r2, #31
 800edc4:	d502      	bpl.n	800edcc <_printf_float+0x174>
 800edc6:	3301      	adds	r3, #1
 800edc8:	440b      	add	r3, r1
 800edca:	6123      	str	r3, [r4, #16]
 800edcc:	2300      	movs	r3, #0
 800edce:	65a1      	str	r1, [r4, #88]	; 0x58
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	e7de      	b.n	800ed92 <_printf_float+0x13a>
 800edd4:	b913      	cbnz	r3, 800eddc <_printf_float+0x184>
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	07d2      	lsls	r2, r2, #31
 800edda:	d501      	bpl.n	800ede0 <_printf_float+0x188>
 800eddc:	3302      	adds	r3, #2
 800edde:	e7f4      	b.n	800edca <_printf_float+0x172>
 800ede0:	2301      	movs	r3, #1
 800ede2:	e7f2      	b.n	800edca <_printf_float+0x172>
 800ede4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ede8:	9b08      	ldr	r3, [sp, #32]
 800edea:	4299      	cmp	r1, r3
 800edec:	db05      	blt.n	800edfa <_printf_float+0x1a2>
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	6121      	str	r1, [r4, #16]
 800edf2:	07d8      	lsls	r0, r3, #31
 800edf4:	d5ea      	bpl.n	800edcc <_printf_float+0x174>
 800edf6:	1c4b      	adds	r3, r1, #1
 800edf8:	e7e7      	b.n	800edca <_printf_float+0x172>
 800edfa:	2900      	cmp	r1, #0
 800edfc:	bfd4      	ite	le
 800edfe:	f1c1 0202 	rsble	r2, r1, #2
 800ee02:	2201      	movgt	r2, #1
 800ee04:	4413      	add	r3, r2
 800ee06:	e7e0      	b.n	800edca <_printf_float+0x172>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	055a      	lsls	r2, r3, #21
 800ee0c:	d407      	bmi.n	800ee1e <_printf_float+0x1c6>
 800ee0e:	6923      	ldr	r3, [r4, #16]
 800ee10:	4642      	mov	r2, r8
 800ee12:	4631      	mov	r1, r6
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b8      	blx	r7
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d12a      	bne.n	800ee72 <_printf_float+0x21a>
 800ee1c:	e76a      	b.n	800ecf4 <_printf_float+0x9c>
 800ee1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ee22:	f240 80e2 	bls.w	800efea <_printf_float+0x392>
 800ee26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ee2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee32:	d133      	bne.n	800ee9c <_printf_float+0x244>
 800ee34:	4a38      	ldr	r2, [pc, #224]	; (800ef18 <_printf_float+0x2c0>)
 800ee36:	2301      	movs	r3, #1
 800ee38:	4631      	mov	r1, r6
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	47b8      	blx	r7
 800ee3e:	3001      	adds	r0, #1
 800ee40:	f43f af58 	beq.w	800ecf4 <_printf_float+0x9c>
 800ee44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	db02      	blt.n	800ee52 <_printf_float+0x1fa>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	07d8      	lsls	r0, r3, #31
 800ee50:	d50f      	bpl.n	800ee72 <_printf_float+0x21a>
 800ee52:	4653      	mov	r3, sl
 800ee54:	465a      	mov	r2, fp
 800ee56:	4631      	mov	r1, r6
 800ee58:	4628      	mov	r0, r5
 800ee5a:	47b8      	blx	r7
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	f43f af49 	beq.w	800ecf4 <_printf_float+0x9c>
 800ee62:	f04f 0800 	mov.w	r8, #0
 800ee66:	f104 091a 	add.w	r9, r4, #26
 800ee6a:	9b08      	ldr	r3, [sp, #32]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	4543      	cmp	r3, r8
 800ee70:	dc09      	bgt.n	800ee86 <_printf_float+0x22e>
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	079b      	lsls	r3, r3, #30
 800ee76:	f100 8108 	bmi.w	800f08a <_printf_float+0x432>
 800ee7a:	68e0      	ldr	r0, [r4, #12]
 800ee7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7e:	4298      	cmp	r0, r3
 800ee80:	bfb8      	it	lt
 800ee82:	4618      	movlt	r0, r3
 800ee84:	e738      	b.n	800ecf8 <_printf_float+0xa0>
 800ee86:	2301      	movs	r3, #1
 800ee88:	464a      	mov	r2, r9
 800ee8a:	4631      	mov	r1, r6
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	47b8      	blx	r7
 800ee90:	3001      	adds	r0, #1
 800ee92:	f43f af2f 	beq.w	800ecf4 <_printf_float+0x9c>
 800ee96:	f108 0801 	add.w	r8, r8, #1
 800ee9a:	e7e6      	b.n	800ee6a <_printf_float+0x212>
 800ee9c:	9b07      	ldr	r3, [sp, #28]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	dc3c      	bgt.n	800ef1c <_printf_float+0x2c4>
 800eea2:	4a1d      	ldr	r2, [pc, #116]	; (800ef18 <_printf_float+0x2c0>)
 800eea4:	2301      	movs	r3, #1
 800eea6:	4631      	mov	r1, r6
 800eea8:	4628      	mov	r0, r5
 800eeaa:	47b8      	blx	r7
 800eeac:	3001      	adds	r0, #1
 800eeae:	f43f af21 	beq.w	800ecf4 <_printf_float+0x9c>
 800eeb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	d102      	bne.n	800eec0 <_printf_float+0x268>
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	07d9      	lsls	r1, r3, #31
 800eebe:	d5d8      	bpl.n	800ee72 <_printf_float+0x21a>
 800eec0:	4653      	mov	r3, sl
 800eec2:	465a      	mov	r2, fp
 800eec4:	4631      	mov	r1, r6
 800eec6:	4628      	mov	r0, r5
 800eec8:	47b8      	blx	r7
 800eeca:	3001      	adds	r0, #1
 800eecc:	f43f af12 	beq.w	800ecf4 <_printf_float+0x9c>
 800eed0:	f04f 0900 	mov.w	r9, #0
 800eed4:	f104 0a1a 	add.w	sl, r4, #26
 800eed8:	9b07      	ldr	r3, [sp, #28]
 800eeda:	425b      	negs	r3, r3
 800eedc:	454b      	cmp	r3, r9
 800eede:	dc01      	bgt.n	800eee4 <_printf_float+0x28c>
 800eee0:	9b08      	ldr	r3, [sp, #32]
 800eee2:	e795      	b.n	800ee10 <_printf_float+0x1b8>
 800eee4:	2301      	movs	r3, #1
 800eee6:	4652      	mov	r2, sl
 800eee8:	4631      	mov	r1, r6
 800eeea:	4628      	mov	r0, r5
 800eeec:	47b8      	blx	r7
 800eeee:	3001      	adds	r0, #1
 800eef0:	f43f af00 	beq.w	800ecf4 <_printf_float+0x9c>
 800eef4:	f109 0901 	add.w	r9, r9, #1
 800eef8:	e7ee      	b.n	800eed8 <_printf_float+0x280>
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w
 800ef00:	ffffffff 	.word	0xffffffff
 800ef04:	7fefffff 	.word	0x7fefffff
 800ef08:	080129e4 	.word	0x080129e4
 800ef0c:	080129e8 	.word	0x080129e8
 800ef10:	080129f0 	.word	0x080129f0
 800ef14:	080129ec 	.word	0x080129ec
 800ef18:	080129f4 	.word	0x080129f4
 800ef1c:	9a08      	ldr	r2, [sp, #32]
 800ef1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef20:	429a      	cmp	r2, r3
 800ef22:	bfa8      	it	ge
 800ef24:	461a      	movge	r2, r3
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	4691      	mov	r9, r2
 800ef2a:	dc38      	bgt.n	800ef9e <_printf_float+0x346>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	9305      	str	r3, [sp, #20]
 800ef30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef34:	f104 021a 	add.w	r2, r4, #26
 800ef38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ef3a:	9905      	ldr	r1, [sp, #20]
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	eba3 0309 	sub.w	r3, r3, r9
 800ef42:	428b      	cmp	r3, r1
 800ef44:	dc33      	bgt.n	800efae <_printf_float+0x356>
 800ef46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	db3c      	blt.n	800efc8 <_printf_float+0x370>
 800ef4e:	6823      	ldr	r3, [r4, #0]
 800ef50:	07da      	lsls	r2, r3, #31
 800ef52:	d439      	bmi.n	800efc8 <_printf_float+0x370>
 800ef54:	9b08      	ldr	r3, [sp, #32]
 800ef56:	9a04      	ldr	r2, [sp, #16]
 800ef58:	9907      	ldr	r1, [sp, #28]
 800ef5a:	1a9a      	subs	r2, r3, r2
 800ef5c:	eba3 0901 	sub.w	r9, r3, r1
 800ef60:	4591      	cmp	r9, r2
 800ef62:	bfa8      	it	ge
 800ef64:	4691      	movge	r9, r2
 800ef66:	f1b9 0f00 	cmp.w	r9, #0
 800ef6a:	dc35      	bgt.n	800efd8 <_printf_float+0x380>
 800ef6c:	f04f 0800 	mov.w	r8, #0
 800ef70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef74:	f104 0a1a 	add.w	sl, r4, #26
 800ef78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ef7c:	1a9b      	subs	r3, r3, r2
 800ef7e:	eba3 0309 	sub.w	r3, r3, r9
 800ef82:	4543      	cmp	r3, r8
 800ef84:	f77f af75 	ble.w	800ee72 <_printf_float+0x21a>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	4652      	mov	r2, sl
 800ef8c:	4631      	mov	r1, r6
 800ef8e:	4628      	mov	r0, r5
 800ef90:	47b8      	blx	r7
 800ef92:	3001      	adds	r0, #1
 800ef94:	f43f aeae 	beq.w	800ecf4 <_printf_float+0x9c>
 800ef98:	f108 0801 	add.w	r8, r8, #1
 800ef9c:	e7ec      	b.n	800ef78 <_printf_float+0x320>
 800ef9e:	4613      	mov	r3, r2
 800efa0:	4631      	mov	r1, r6
 800efa2:	4642      	mov	r2, r8
 800efa4:	4628      	mov	r0, r5
 800efa6:	47b8      	blx	r7
 800efa8:	3001      	adds	r0, #1
 800efaa:	d1bf      	bne.n	800ef2c <_printf_float+0x2d4>
 800efac:	e6a2      	b.n	800ecf4 <_printf_float+0x9c>
 800efae:	2301      	movs	r3, #1
 800efb0:	4631      	mov	r1, r6
 800efb2:	4628      	mov	r0, r5
 800efb4:	9204      	str	r2, [sp, #16]
 800efb6:	47b8      	blx	r7
 800efb8:	3001      	adds	r0, #1
 800efba:	f43f ae9b 	beq.w	800ecf4 <_printf_float+0x9c>
 800efbe:	9b05      	ldr	r3, [sp, #20]
 800efc0:	9a04      	ldr	r2, [sp, #16]
 800efc2:	3301      	adds	r3, #1
 800efc4:	9305      	str	r3, [sp, #20]
 800efc6:	e7b7      	b.n	800ef38 <_printf_float+0x2e0>
 800efc8:	4653      	mov	r3, sl
 800efca:	465a      	mov	r2, fp
 800efcc:	4631      	mov	r1, r6
 800efce:	4628      	mov	r0, r5
 800efd0:	47b8      	blx	r7
 800efd2:	3001      	adds	r0, #1
 800efd4:	d1be      	bne.n	800ef54 <_printf_float+0x2fc>
 800efd6:	e68d      	b.n	800ecf4 <_printf_float+0x9c>
 800efd8:	9a04      	ldr	r2, [sp, #16]
 800efda:	464b      	mov	r3, r9
 800efdc:	4442      	add	r2, r8
 800efde:	4631      	mov	r1, r6
 800efe0:	4628      	mov	r0, r5
 800efe2:	47b8      	blx	r7
 800efe4:	3001      	adds	r0, #1
 800efe6:	d1c1      	bne.n	800ef6c <_printf_float+0x314>
 800efe8:	e684      	b.n	800ecf4 <_printf_float+0x9c>
 800efea:	9a08      	ldr	r2, [sp, #32]
 800efec:	2a01      	cmp	r2, #1
 800efee:	dc01      	bgt.n	800eff4 <_printf_float+0x39c>
 800eff0:	07db      	lsls	r3, r3, #31
 800eff2:	d537      	bpl.n	800f064 <_printf_float+0x40c>
 800eff4:	2301      	movs	r3, #1
 800eff6:	4642      	mov	r2, r8
 800eff8:	4631      	mov	r1, r6
 800effa:	4628      	mov	r0, r5
 800effc:	47b8      	blx	r7
 800effe:	3001      	adds	r0, #1
 800f000:	f43f ae78 	beq.w	800ecf4 <_printf_float+0x9c>
 800f004:	4653      	mov	r3, sl
 800f006:	465a      	mov	r2, fp
 800f008:	4631      	mov	r1, r6
 800f00a:	4628      	mov	r0, r5
 800f00c:	47b8      	blx	r7
 800f00e:	3001      	adds	r0, #1
 800f010:	f43f ae70 	beq.w	800ecf4 <_printf_float+0x9c>
 800f014:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f018:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f020:	d01b      	beq.n	800f05a <_printf_float+0x402>
 800f022:	9b08      	ldr	r3, [sp, #32]
 800f024:	f108 0201 	add.w	r2, r8, #1
 800f028:	3b01      	subs	r3, #1
 800f02a:	4631      	mov	r1, r6
 800f02c:	4628      	mov	r0, r5
 800f02e:	47b8      	blx	r7
 800f030:	3001      	adds	r0, #1
 800f032:	d10e      	bne.n	800f052 <_printf_float+0x3fa>
 800f034:	e65e      	b.n	800ecf4 <_printf_float+0x9c>
 800f036:	2301      	movs	r3, #1
 800f038:	464a      	mov	r2, r9
 800f03a:	4631      	mov	r1, r6
 800f03c:	4628      	mov	r0, r5
 800f03e:	47b8      	blx	r7
 800f040:	3001      	adds	r0, #1
 800f042:	f43f ae57 	beq.w	800ecf4 <_printf_float+0x9c>
 800f046:	f108 0801 	add.w	r8, r8, #1
 800f04a:	9b08      	ldr	r3, [sp, #32]
 800f04c:	3b01      	subs	r3, #1
 800f04e:	4543      	cmp	r3, r8
 800f050:	dcf1      	bgt.n	800f036 <_printf_float+0x3de>
 800f052:	9b04      	ldr	r3, [sp, #16]
 800f054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f058:	e6db      	b.n	800ee12 <_printf_float+0x1ba>
 800f05a:	f04f 0800 	mov.w	r8, #0
 800f05e:	f104 091a 	add.w	r9, r4, #26
 800f062:	e7f2      	b.n	800f04a <_printf_float+0x3f2>
 800f064:	2301      	movs	r3, #1
 800f066:	4642      	mov	r2, r8
 800f068:	e7df      	b.n	800f02a <_printf_float+0x3d2>
 800f06a:	2301      	movs	r3, #1
 800f06c:	464a      	mov	r2, r9
 800f06e:	4631      	mov	r1, r6
 800f070:	4628      	mov	r0, r5
 800f072:	47b8      	blx	r7
 800f074:	3001      	adds	r0, #1
 800f076:	f43f ae3d 	beq.w	800ecf4 <_printf_float+0x9c>
 800f07a:	f108 0801 	add.w	r8, r8, #1
 800f07e:	68e3      	ldr	r3, [r4, #12]
 800f080:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f082:	1a5b      	subs	r3, r3, r1
 800f084:	4543      	cmp	r3, r8
 800f086:	dcf0      	bgt.n	800f06a <_printf_float+0x412>
 800f088:	e6f7      	b.n	800ee7a <_printf_float+0x222>
 800f08a:	f04f 0800 	mov.w	r8, #0
 800f08e:	f104 0919 	add.w	r9, r4, #25
 800f092:	e7f4      	b.n	800f07e <_printf_float+0x426>

0800f094 <_printf_common>:
 800f094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	4616      	mov	r6, r2
 800f09a:	4699      	mov	r9, r3
 800f09c:	688a      	ldr	r2, [r1, #8]
 800f09e:	690b      	ldr	r3, [r1, #16]
 800f0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	bfb8      	it	lt
 800f0a8:	4613      	movlt	r3, r2
 800f0aa:	6033      	str	r3, [r6, #0]
 800f0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	b10a      	cbz	r2, 800f0ba <_printf_common+0x26>
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	6033      	str	r3, [r6, #0]
 800f0ba:	6823      	ldr	r3, [r4, #0]
 800f0bc:	0699      	lsls	r1, r3, #26
 800f0be:	bf42      	ittt	mi
 800f0c0:	6833      	ldrmi	r3, [r6, #0]
 800f0c2:	3302      	addmi	r3, #2
 800f0c4:	6033      	strmi	r3, [r6, #0]
 800f0c6:	6825      	ldr	r5, [r4, #0]
 800f0c8:	f015 0506 	ands.w	r5, r5, #6
 800f0cc:	d106      	bne.n	800f0dc <_printf_common+0x48>
 800f0ce:	f104 0a19 	add.w	sl, r4, #25
 800f0d2:	68e3      	ldr	r3, [r4, #12]
 800f0d4:	6832      	ldr	r2, [r6, #0]
 800f0d6:	1a9b      	subs	r3, r3, r2
 800f0d8:	42ab      	cmp	r3, r5
 800f0da:	dc26      	bgt.n	800f12a <_printf_common+0x96>
 800f0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0e0:	1e13      	subs	r3, r2, #0
 800f0e2:	6822      	ldr	r2, [r4, #0]
 800f0e4:	bf18      	it	ne
 800f0e6:	2301      	movne	r3, #1
 800f0e8:	0692      	lsls	r2, r2, #26
 800f0ea:	d42b      	bmi.n	800f144 <_printf_common+0xb0>
 800f0ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0f0:	4649      	mov	r1, r9
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	47c0      	blx	r8
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	d01e      	beq.n	800f138 <_printf_common+0xa4>
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	68e5      	ldr	r5, [r4, #12]
 800f0fe:	6832      	ldr	r2, [r6, #0]
 800f100:	f003 0306 	and.w	r3, r3, #6
 800f104:	2b04      	cmp	r3, #4
 800f106:	bf08      	it	eq
 800f108:	1aad      	subeq	r5, r5, r2
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	6922      	ldr	r2, [r4, #16]
 800f10e:	bf0c      	ite	eq
 800f110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f114:	2500      	movne	r5, #0
 800f116:	4293      	cmp	r3, r2
 800f118:	bfc4      	itt	gt
 800f11a:	1a9b      	subgt	r3, r3, r2
 800f11c:	18ed      	addgt	r5, r5, r3
 800f11e:	2600      	movs	r6, #0
 800f120:	341a      	adds	r4, #26
 800f122:	42b5      	cmp	r5, r6
 800f124:	d11a      	bne.n	800f15c <_printf_common+0xc8>
 800f126:	2000      	movs	r0, #0
 800f128:	e008      	b.n	800f13c <_printf_common+0xa8>
 800f12a:	2301      	movs	r3, #1
 800f12c:	4652      	mov	r2, sl
 800f12e:	4649      	mov	r1, r9
 800f130:	4638      	mov	r0, r7
 800f132:	47c0      	blx	r8
 800f134:	3001      	adds	r0, #1
 800f136:	d103      	bne.n	800f140 <_printf_common+0xac>
 800f138:	f04f 30ff 	mov.w	r0, #4294967295
 800f13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f140:	3501      	adds	r5, #1
 800f142:	e7c6      	b.n	800f0d2 <_printf_common+0x3e>
 800f144:	18e1      	adds	r1, r4, r3
 800f146:	1c5a      	adds	r2, r3, #1
 800f148:	2030      	movs	r0, #48	; 0x30
 800f14a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f14e:	4422      	add	r2, r4
 800f150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f158:	3302      	adds	r3, #2
 800f15a:	e7c7      	b.n	800f0ec <_printf_common+0x58>
 800f15c:	2301      	movs	r3, #1
 800f15e:	4622      	mov	r2, r4
 800f160:	4649      	mov	r1, r9
 800f162:	4638      	mov	r0, r7
 800f164:	47c0      	blx	r8
 800f166:	3001      	adds	r0, #1
 800f168:	d0e6      	beq.n	800f138 <_printf_common+0xa4>
 800f16a:	3601      	adds	r6, #1
 800f16c:	e7d9      	b.n	800f122 <_printf_common+0x8e>
	...

0800f170 <_printf_i>:
 800f170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f174:	7e0f      	ldrb	r7, [r1, #24]
 800f176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f178:	2f78      	cmp	r7, #120	; 0x78
 800f17a:	4691      	mov	r9, r2
 800f17c:	4680      	mov	r8, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	469a      	mov	sl, r3
 800f182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f186:	d807      	bhi.n	800f198 <_printf_i+0x28>
 800f188:	2f62      	cmp	r7, #98	; 0x62
 800f18a:	d80a      	bhi.n	800f1a2 <_printf_i+0x32>
 800f18c:	2f00      	cmp	r7, #0
 800f18e:	f000 80d8 	beq.w	800f342 <_printf_i+0x1d2>
 800f192:	2f58      	cmp	r7, #88	; 0x58
 800f194:	f000 80a3 	beq.w	800f2de <_printf_i+0x16e>
 800f198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f19c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1a0:	e03a      	b.n	800f218 <_printf_i+0xa8>
 800f1a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1a6:	2b15      	cmp	r3, #21
 800f1a8:	d8f6      	bhi.n	800f198 <_printf_i+0x28>
 800f1aa:	a101      	add	r1, pc, #4	; (adr r1, 800f1b0 <_printf_i+0x40>)
 800f1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1b0:	0800f209 	.word	0x0800f209
 800f1b4:	0800f21d 	.word	0x0800f21d
 800f1b8:	0800f199 	.word	0x0800f199
 800f1bc:	0800f199 	.word	0x0800f199
 800f1c0:	0800f199 	.word	0x0800f199
 800f1c4:	0800f199 	.word	0x0800f199
 800f1c8:	0800f21d 	.word	0x0800f21d
 800f1cc:	0800f199 	.word	0x0800f199
 800f1d0:	0800f199 	.word	0x0800f199
 800f1d4:	0800f199 	.word	0x0800f199
 800f1d8:	0800f199 	.word	0x0800f199
 800f1dc:	0800f329 	.word	0x0800f329
 800f1e0:	0800f24d 	.word	0x0800f24d
 800f1e4:	0800f30b 	.word	0x0800f30b
 800f1e8:	0800f199 	.word	0x0800f199
 800f1ec:	0800f199 	.word	0x0800f199
 800f1f0:	0800f34b 	.word	0x0800f34b
 800f1f4:	0800f199 	.word	0x0800f199
 800f1f8:	0800f24d 	.word	0x0800f24d
 800f1fc:	0800f199 	.word	0x0800f199
 800f200:	0800f199 	.word	0x0800f199
 800f204:	0800f313 	.word	0x0800f313
 800f208:	682b      	ldr	r3, [r5, #0]
 800f20a:	1d1a      	adds	r2, r3, #4
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	602a      	str	r2, [r5, #0]
 800f210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f218:	2301      	movs	r3, #1
 800f21a:	e0a3      	b.n	800f364 <_printf_i+0x1f4>
 800f21c:	6820      	ldr	r0, [r4, #0]
 800f21e:	6829      	ldr	r1, [r5, #0]
 800f220:	0606      	lsls	r6, r0, #24
 800f222:	f101 0304 	add.w	r3, r1, #4
 800f226:	d50a      	bpl.n	800f23e <_printf_i+0xce>
 800f228:	680e      	ldr	r6, [r1, #0]
 800f22a:	602b      	str	r3, [r5, #0]
 800f22c:	2e00      	cmp	r6, #0
 800f22e:	da03      	bge.n	800f238 <_printf_i+0xc8>
 800f230:	232d      	movs	r3, #45	; 0x2d
 800f232:	4276      	negs	r6, r6
 800f234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f238:	485e      	ldr	r0, [pc, #376]	; (800f3b4 <_printf_i+0x244>)
 800f23a:	230a      	movs	r3, #10
 800f23c:	e019      	b.n	800f272 <_printf_i+0x102>
 800f23e:	680e      	ldr	r6, [r1, #0]
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f246:	bf18      	it	ne
 800f248:	b236      	sxthne	r6, r6
 800f24a:	e7ef      	b.n	800f22c <_printf_i+0xbc>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	6820      	ldr	r0, [r4, #0]
 800f250:	1d19      	adds	r1, r3, #4
 800f252:	6029      	str	r1, [r5, #0]
 800f254:	0601      	lsls	r1, r0, #24
 800f256:	d501      	bpl.n	800f25c <_printf_i+0xec>
 800f258:	681e      	ldr	r6, [r3, #0]
 800f25a:	e002      	b.n	800f262 <_printf_i+0xf2>
 800f25c:	0646      	lsls	r6, r0, #25
 800f25e:	d5fb      	bpl.n	800f258 <_printf_i+0xe8>
 800f260:	881e      	ldrh	r6, [r3, #0]
 800f262:	4854      	ldr	r0, [pc, #336]	; (800f3b4 <_printf_i+0x244>)
 800f264:	2f6f      	cmp	r7, #111	; 0x6f
 800f266:	bf0c      	ite	eq
 800f268:	2308      	moveq	r3, #8
 800f26a:	230a      	movne	r3, #10
 800f26c:	2100      	movs	r1, #0
 800f26e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f272:	6865      	ldr	r5, [r4, #4]
 800f274:	60a5      	str	r5, [r4, #8]
 800f276:	2d00      	cmp	r5, #0
 800f278:	bfa2      	ittt	ge
 800f27a:	6821      	ldrge	r1, [r4, #0]
 800f27c:	f021 0104 	bicge.w	r1, r1, #4
 800f280:	6021      	strge	r1, [r4, #0]
 800f282:	b90e      	cbnz	r6, 800f288 <_printf_i+0x118>
 800f284:	2d00      	cmp	r5, #0
 800f286:	d04d      	beq.n	800f324 <_printf_i+0x1b4>
 800f288:	4615      	mov	r5, r2
 800f28a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f28e:	fb03 6711 	mls	r7, r3, r1, r6
 800f292:	5dc7      	ldrb	r7, [r0, r7]
 800f294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f298:	4637      	mov	r7, r6
 800f29a:	42bb      	cmp	r3, r7
 800f29c:	460e      	mov	r6, r1
 800f29e:	d9f4      	bls.n	800f28a <_printf_i+0x11a>
 800f2a0:	2b08      	cmp	r3, #8
 800f2a2:	d10b      	bne.n	800f2bc <_printf_i+0x14c>
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	07de      	lsls	r6, r3, #31
 800f2a8:	d508      	bpl.n	800f2bc <_printf_i+0x14c>
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	6861      	ldr	r1, [r4, #4]
 800f2ae:	4299      	cmp	r1, r3
 800f2b0:	bfde      	ittt	le
 800f2b2:	2330      	movle	r3, #48	; 0x30
 800f2b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2bc:	1b52      	subs	r2, r2, r5
 800f2be:	6122      	str	r2, [r4, #16]
 800f2c0:	f8cd a000 	str.w	sl, [sp]
 800f2c4:	464b      	mov	r3, r9
 800f2c6:	aa03      	add	r2, sp, #12
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	4640      	mov	r0, r8
 800f2cc:	f7ff fee2 	bl	800f094 <_printf_common>
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	d14c      	bne.n	800f36e <_printf_i+0x1fe>
 800f2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d8:	b004      	add	sp, #16
 800f2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2de:	4835      	ldr	r0, [pc, #212]	; (800f3b4 <_printf_i+0x244>)
 800f2e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f2e4:	6829      	ldr	r1, [r5, #0]
 800f2e6:	6823      	ldr	r3, [r4, #0]
 800f2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2ec:	6029      	str	r1, [r5, #0]
 800f2ee:	061d      	lsls	r5, r3, #24
 800f2f0:	d514      	bpl.n	800f31c <_printf_i+0x1ac>
 800f2f2:	07df      	lsls	r7, r3, #31
 800f2f4:	bf44      	itt	mi
 800f2f6:	f043 0320 	orrmi.w	r3, r3, #32
 800f2fa:	6023      	strmi	r3, [r4, #0]
 800f2fc:	b91e      	cbnz	r6, 800f306 <_printf_i+0x196>
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	f023 0320 	bic.w	r3, r3, #32
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	2310      	movs	r3, #16
 800f308:	e7b0      	b.n	800f26c <_printf_i+0xfc>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	f043 0320 	orr.w	r3, r3, #32
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	2378      	movs	r3, #120	; 0x78
 800f314:	4828      	ldr	r0, [pc, #160]	; (800f3b8 <_printf_i+0x248>)
 800f316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f31a:	e7e3      	b.n	800f2e4 <_printf_i+0x174>
 800f31c:	0659      	lsls	r1, r3, #25
 800f31e:	bf48      	it	mi
 800f320:	b2b6      	uxthmi	r6, r6
 800f322:	e7e6      	b.n	800f2f2 <_printf_i+0x182>
 800f324:	4615      	mov	r5, r2
 800f326:	e7bb      	b.n	800f2a0 <_printf_i+0x130>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	6826      	ldr	r6, [r4, #0]
 800f32c:	6961      	ldr	r1, [r4, #20]
 800f32e:	1d18      	adds	r0, r3, #4
 800f330:	6028      	str	r0, [r5, #0]
 800f332:	0635      	lsls	r5, r6, #24
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	d501      	bpl.n	800f33c <_printf_i+0x1cc>
 800f338:	6019      	str	r1, [r3, #0]
 800f33a:	e002      	b.n	800f342 <_printf_i+0x1d2>
 800f33c:	0670      	lsls	r0, r6, #25
 800f33e:	d5fb      	bpl.n	800f338 <_printf_i+0x1c8>
 800f340:	8019      	strh	r1, [r3, #0]
 800f342:	2300      	movs	r3, #0
 800f344:	6123      	str	r3, [r4, #16]
 800f346:	4615      	mov	r5, r2
 800f348:	e7ba      	b.n	800f2c0 <_printf_i+0x150>
 800f34a:	682b      	ldr	r3, [r5, #0]
 800f34c:	1d1a      	adds	r2, r3, #4
 800f34e:	602a      	str	r2, [r5, #0]
 800f350:	681d      	ldr	r5, [r3, #0]
 800f352:	6862      	ldr	r2, [r4, #4]
 800f354:	2100      	movs	r1, #0
 800f356:	4628      	mov	r0, r5
 800f358:	f7f0 ff7a 	bl	8000250 <memchr>
 800f35c:	b108      	cbz	r0, 800f362 <_printf_i+0x1f2>
 800f35e:	1b40      	subs	r0, r0, r5
 800f360:	6060      	str	r0, [r4, #4]
 800f362:	6863      	ldr	r3, [r4, #4]
 800f364:	6123      	str	r3, [r4, #16]
 800f366:	2300      	movs	r3, #0
 800f368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f36c:	e7a8      	b.n	800f2c0 <_printf_i+0x150>
 800f36e:	6923      	ldr	r3, [r4, #16]
 800f370:	462a      	mov	r2, r5
 800f372:	4649      	mov	r1, r9
 800f374:	4640      	mov	r0, r8
 800f376:	47d0      	blx	sl
 800f378:	3001      	adds	r0, #1
 800f37a:	d0ab      	beq.n	800f2d4 <_printf_i+0x164>
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	079b      	lsls	r3, r3, #30
 800f380:	d413      	bmi.n	800f3aa <_printf_i+0x23a>
 800f382:	68e0      	ldr	r0, [r4, #12]
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	4298      	cmp	r0, r3
 800f388:	bfb8      	it	lt
 800f38a:	4618      	movlt	r0, r3
 800f38c:	e7a4      	b.n	800f2d8 <_printf_i+0x168>
 800f38e:	2301      	movs	r3, #1
 800f390:	4632      	mov	r2, r6
 800f392:	4649      	mov	r1, r9
 800f394:	4640      	mov	r0, r8
 800f396:	47d0      	blx	sl
 800f398:	3001      	adds	r0, #1
 800f39a:	d09b      	beq.n	800f2d4 <_printf_i+0x164>
 800f39c:	3501      	adds	r5, #1
 800f39e:	68e3      	ldr	r3, [r4, #12]
 800f3a0:	9903      	ldr	r1, [sp, #12]
 800f3a2:	1a5b      	subs	r3, r3, r1
 800f3a4:	42ab      	cmp	r3, r5
 800f3a6:	dcf2      	bgt.n	800f38e <_printf_i+0x21e>
 800f3a8:	e7eb      	b.n	800f382 <_printf_i+0x212>
 800f3aa:	2500      	movs	r5, #0
 800f3ac:	f104 0619 	add.w	r6, r4, #25
 800f3b0:	e7f5      	b.n	800f39e <_printf_i+0x22e>
 800f3b2:	bf00      	nop
 800f3b4:	080129f6 	.word	0x080129f6
 800f3b8:	08012a07 	.word	0x08012a07

0800f3bc <_puts_r>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	460e      	mov	r6, r1
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	b118      	cbz	r0, 800f3cc <_puts_r+0x10>
 800f3c4:	6983      	ldr	r3, [r0, #24]
 800f3c6:	b90b      	cbnz	r3, 800f3cc <_puts_r+0x10>
 800f3c8:	f001 f872 	bl	80104b0 <__sinit>
 800f3cc:	69ab      	ldr	r3, [r5, #24]
 800f3ce:	68ac      	ldr	r4, [r5, #8]
 800f3d0:	b913      	cbnz	r3, 800f3d8 <_puts_r+0x1c>
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f001 f86c 	bl	80104b0 <__sinit>
 800f3d8:	4b2c      	ldr	r3, [pc, #176]	; (800f48c <_puts_r+0xd0>)
 800f3da:	429c      	cmp	r4, r3
 800f3dc:	d120      	bne.n	800f420 <_puts_r+0x64>
 800f3de:	686c      	ldr	r4, [r5, #4]
 800f3e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3e2:	07db      	lsls	r3, r3, #31
 800f3e4:	d405      	bmi.n	800f3f2 <_puts_r+0x36>
 800f3e6:	89a3      	ldrh	r3, [r4, #12]
 800f3e8:	0598      	lsls	r0, r3, #22
 800f3ea:	d402      	bmi.n	800f3f2 <_puts_r+0x36>
 800f3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ee:	f001 f902 	bl	80105f6 <__retarget_lock_acquire_recursive>
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	0719      	lsls	r1, r3, #28
 800f3f6:	d51d      	bpl.n	800f434 <_puts_r+0x78>
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	b1db      	cbz	r3, 800f434 <_puts_r+0x78>
 800f3fc:	3e01      	subs	r6, #1
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f404:	3b01      	subs	r3, #1
 800f406:	60a3      	str	r3, [r4, #8]
 800f408:	bb39      	cbnz	r1, 800f45a <_puts_r+0x9e>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da38      	bge.n	800f480 <_puts_r+0xc4>
 800f40e:	4622      	mov	r2, r4
 800f410:	210a      	movs	r1, #10
 800f412:	4628      	mov	r0, r5
 800f414:	f000 f878 	bl	800f508 <__swbuf_r>
 800f418:	3001      	adds	r0, #1
 800f41a:	d011      	beq.n	800f440 <_puts_r+0x84>
 800f41c:	250a      	movs	r5, #10
 800f41e:	e011      	b.n	800f444 <_puts_r+0x88>
 800f420:	4b1b      	ldr	r3, [pc, #108]	; (800f490 <_puts_r+0xd4>)
 800f422:	429c      	cmp	r4, r3
 800f424:	d101      	bne.n	800f42a <_puts_r+0x6e>
 800f426:	68ac      	ldr	r4, [r5, #8]
 800f428:	e7da      	b.n	800f3e0 <_puts_r+0x24>
 800f42a:	4b1a      	ldr	r3, [pc, #104]	; (800f494 <_puts_r+0xd8>)
 800f42c:	429c      	cmp	r4, r3
 800f42e:	bf08      	it	eq
 800f430:	68ec      	ldreq	r4, [r5, #12]
 800f432:	e7d5      	b.n	800f3e0 <_puts_r+0x24>
 800f434:	4621      	mov	r1, r4
 800f436:	4628      	mov	r0, r5
 800f438:	f000 f8b8 	bl	800f5ac <__swsetup_r>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d0dd      	beq.n	800f3fc <_puts_r+0x40>
 800f440:	f04f 35ff 	mov.w	r5, #4294967295
 800f444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f446:	07da      	lsls	r2, r3, #31
 800f448:	d405      	bmi.n	800f456 <_puts_r+0x9a>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	059b      	lsls	r3, r3, #22
 800f44e:	d402      	bmi.n	800f456 <_puts_r+0x9a>
 800f450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f452:	f001 f8d1 	bl	80105f8 <__retarget_lock_release_recursive>
 800f456:	4628      	mov	r0, r5
 800f458:	bd70      	pop	{r4, r5, r6, pc}
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	da04      	bge.n	800f468 <_puts_r+0xac>
 800f45e:	69a2      	ldr	r2, [r4, #24]
 800f460:	429a      	cmp	r2, r3
 800f462:	dc06      	bgt.n	800f472 <_puts_r+0xb6>
 800f464:	290a      	cmp	r1, #10
 800f466:	d004      	beq.n	800f472 <_puts_r+0xb6>
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	6022      	str	r2, [r4, #0]
 800f46e:	7019      	strb	r1, [r3, #0]
 800f470:	e7c5      	b.n	800f3fe <_puts_r+0x42>
 800f472:	4622      	mov	r2, r4
 800f474:	4628      	mov	r0, r5
 800f476:	f000 f847 	bl	800f508 <__swbuf_r>
 800f47a:	3001      	adds	r0, #1
 800f47c:	d1bf      	bne.n	800f3fe <_puts_r+0x42>
 800f47e:	e7df      	b.n	800f440 <_puts_r+0x84>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	250a      	movs	r5, #10
 800f484:	1c5a      	adds	r2, r3, #1
 800f486:	6022      	str	r2, [r4, #0]
 800f488:	701d      	strb	r5, [r3, #0]
 800f48a:	e7db      	b.n	800f444 <_puts_r+0x88>
 800f48c:	08012ac8 	.word	0x08012ac8
 800f490:	08012ae8 	.word	0x08012ae8
 800f494:	08012aa8 	.word	0x08012aa8

0800f498 <puts>:
 800f498:	4b02      	ldr	r3, [pc, #8]	; (800f4a4 <puts+0xc>)
 800f49a:	4601      	mov	r1, r0
 800f49c:	6818      	ldr	r0, [r3, #0]
 800f49e:	f7ff bf8d 	b.w	800f3bc <_puts_r>
 800f4a2:	bf00      	nop
 800f4a4:	200011c4 	.word	0x200011c4

0800f4a8 <_sbrk_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4d06      	ldr	r5, [pc, #24]	; (800f4c4 <_sbrk_r+0x1c>)
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	4608      	mov	r0, r1
 800f4b2:	602b      	str	r3, [r5, #0]
 800f4b4:	f7f2 ff1e 	bl	80022f4 <_sbrk>
 800f4b8:	1c43      	adds	r3, r0, #1
 800f4ba:	d102      	bne.n	800f4c2 <_sbrk_r+0x1a>
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	b103      	cbz	r3, 800f4c2 <_sbrk_r+0x1a>
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	bd38      	pop	{r3, r4, r5, pc}
 800f4c4:	200018e8 	.word	0x200018e8

0800f4c8 <siprintf>:
 800f4c8:	b40e      	push	{r1, r2, r3}
 800f4ca:	b500      	push	{lr}
 800f4cc:	b09c      	sub	sp, #112	; 0x70
 800f4ce:	ab1d      	add	r3, sp, #116	; 0x74
 800f4d0:	9002      	str	r0, [sp, #8]
 800f4d2:	9006      	str	r0, [sp, #24]
 800f4d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4d8:	4809      	ldr	r0, [pc, #36]	; (800f500 <siprintf+0x38>)
 800f4da:	9107      	str	r1, [sp, #28]
 800f4dc:	9104      	str	r1, [sp, #16]
 800f4de:	4909      	ldr	r1, [pc, #36]	; (800f504 <siprintf+0x3c>)
 800f4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4e4:	9105      	str	r1, [sp, #20]
 800f4e6:	6800      	ldr	r0, [r0, #0]
 800f4e8:	9301      	str	r3, [sp, #4]
 800f4ea:	a902      	add	r1, sp, #8
 800f4ec:	f001 fd1a 	bl	8010f24 <_svfiprintf_r>
 800f4f0:	9b02      	ldr	r3, [sp, #8]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	b01c      	add	sp, #112	; 0x70
 800f4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4fc:	b003      	add	sp, #12
 800f4fe:	4770      	bx	lr
 800f500:	200011c4 	.word	0x200011c4
 800f504:	ffff0208 	.word	0xffff0208

0800f508 <__swbuf_r>:
 800f508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50a:	460e      	mov	r6, r1
 800f50c:	4614      	mov	r4, r2
 800f50e:	4605      	mov	r5, r0
 800f510:	b118      	cbz	r0, 800f51a <__swbuf_r+0x12>
 800f512:	6983      	ldr	r3, [r0, #24]
 800f514:	b90b      	cbnz	r3, 800f51a <__swbuf_r+0x12>
 800f516:	f000 ffcb 	bl	80104b0 <__sinit>
 800f51a:	4b21      	ldr	r3, [pc, #132]	; (800f5a0 <__swbuf_r+0x98>)
 800f51c:	429c      	cmp	r4, r3
 800f51e:	d12b      	bne.n	800f578 <__swbuf_r+0x70>
 800f520:	686c      	ldr	r4, [r5, #4]
 800f522:	69a3      	ldr	r3, [r4, #24]
 800f524:	60a3      	str	r3, [r4, #8]
 800f526:	89a3      	ldrh	r3, [r4, #12]
 800f528:	071a      	lsls	r2, r3, #28
 800f52a:	d52f      	bpl.n	800f58c <__swbuf_r+0x84>
 800f52c:	6923      	ldr	r3, [r4, #16]
 800f52e:	b36b      	cbz	r3, 800f58c <__swbuf_r+0x84>
 800f530:	6923      	ldr	r3, [r4, #16]
 800f532:	6820      	ldr	r0, [r4, #0]
 800f534:	1ac0      	subs	r0, r0, r3
 800f536:	6963      	ldr	r3, [r4, #20]
 800f538:	b2f6      	uxtb	r6, r6
 800f53a:	4283      	cmp	r3, r0
 800f53c:	4637      	mov	r7, r6
 800f53e:	dc04      	bgt.n	800f54a <__swbuf_r+0x42>
 800f540:	4621      	mov	r1, r4
 800f542:	4628      	mov	r0, r5
 800f544:	f000 ff20 	bl	8010388 <_fflush_r>
 800f548:	bb30      	cbnz	r0, 800f598 <__swbuf_r+0x90>
 800f54a:	68a3      	ldr	r3, [r4, #8]
 800f54c:	3b01      	subs	r3, #1
 800f54e:	60a3      	str	r3, [r4, #8]
 800f550:	6823      	ldr	r3, [r4, #0]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	6022      	str	r2, [r4, #0]
 800f556:	701e      	strb	r6, [r3, #0]
 800f558:	6963      	ldr	r3, [r4, #20]
 800f55a:	3001      	adds	r0, #1
 800f55c:	4283      	cmp	r3, r0
 800f55e:	d004      	beq.n	800f56a <__swbuf_r+0x62>
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	07db      	lsls	r3, r3, #31
 800f564:	d506      	bpl.n	800f574 <__swbuf_r+0x6c>
 800f566:	2e0a      	cmp	r6, #10
 800f568:	d104      	bne.n	800f574 <__swbuf_r+0x6c>
 800f56a:	4621      	mov	r1, r4
 800f56c:	4628      	mov	r0, r5
 800f56e:	f000 ff0b 	bl	8010388 <_fflush_r>
 800f572:	b988      	cbnz	r0, 800f598 <__swbuf_r+0x90>
 800f574:	4638      	mov	r0, r7
 800f576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f578:	4b0a      	ldr	r3, [pc, #40]	; (800f5a4 <__swbuf_r+0x9c>)
 800f57a:	429c      	cmp	r4, r3
 800f57c:	d101      	bne.n	800f582 <__swbuf_r+0x7a>
 800f57e:	68ac      	ldr	r4, [r5, #8]
 800f580:	e7cf      	b.n	800f522 <__swbuf_r+0x1a>
 800f582:	4b09      	ldr	r3, [pc, #36]	; (800f5a8 <__swbuf_r+0xa0>)
 800f584:	429c      	cmp	r4, r3
 800f586:	bf08      	it	eq
 800f588:	68ec      	ldreq	r4, [r5, #12]
 800f58a:	e7ca      	b.n	800f522 <__swbuf_r+0x1a>
 800f58c:	4621      	mov	r1, r4
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 f80c 	bl	800f5ac <__swsetup_r>
 800f594:	2800      	cmp	r0, #0
 800f596:	d0cb      	beq.n	800f530 <__swbuf_r+0x28>
 800f598:	f04f 37ff 	mov.w	r7, #4294967295
 800f59c:	e7ea      	b.n	800f574 <__swbuf_r+0x6c>
 800f59e:	bf00      	nop
 800f5a0:	08012ac8 	.word	0x08012ac8
 800f5a4:	08012ae8 	.word	0x08012ae8
 800f5a8:	08012aa8 	.word	0x08012aa8

0800f5ac <__swsetup_r>:
 800f5ac:	4b32      	ldr	r3, [pc, #200]	; (800f678 <__swsetup_r+0xcc>)
 800f5ae:	b570      	push	{r4, r5, r6, lr}
 800f5b0:	681d      	ldr	r5, [r3, #0]
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	b125      	cbz	r5, 800f5c2 <__swsetup_r+0x16>
 800f5b8:	69ab      	ldr	r3, [r5, #24]
 800f5ba:	b913      	cbnz	r3, 800f5c2 <__swsetup_r+0x16>
 800f5bc:	4628      	mov	r0, r5
 800f5be:	f000 ff77 	bl	80104b0 <__sinit>
 800f5c2:	4b2e      	ldr	r3, [pc, #184]	; (800f67c <__swsetup_r+0xd0>)
 800f5c4:	429c      	cmp	r4, r3
 800f5c6:	d10f      	bne.n	800f5e8 <__swsetup_r+0x3c>
 800f5c8:	686c      	ldr	r4, [r5, #4]
 800f5ca:	89a3      	ldrh	r3, [r4, #12]
 800f5cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5d0:	0719      	lsls	r1, r3, #28
 800f5d2:	d42c      	bmi.n	800f62e <__swsetup_r+0x82>
 800f5d4:	06dd      	lsls	r5, r3, #27
 800f5d6:	d411      	bmi.n	800f5fc <__swsetup_r+0x50>
 800f5d8:	2309      	movs	r3, #9
 800f5da:	6033      	str	r3, [r6, #0]
 800f5dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e6:	e03e      	b.n	800f666 <__swsetup_r+0xba>
 800f5e8:	4b25      	ldr	r3, [pc, #148]	; (800f680 <__swsetup_r+0xd4>)
 800f5ea:	429c      	cmp	r4, r3
 800f5ec:	d101      	bne.n	800f5f2 <__swsetup_r+0x46>
 800f5ee:	68ac      	ldr	r4, [r5, #8]
 800f5f0:	e7eb      	b.n	800f5ca <__swsetup_r+0x1e>
 800f5f2:	4b24      	ldr	r3, [pc, #144]	; (800f684 <__swsetup_r+0xd8>)
 800f5f4:	429c      	cmp	r4, r3
 800f5f6:	bf08      	it	eq
 800f5f8:	68ec      	ldreq	r4, [r5, #12]
 800f5fa:	e7e6      	b.n	800f5ca <__swsetup_r+0x1e>
 800f5fc:	0758      	lsls	r0, r3, #29
 800f5fe:	d512      	bpl.n	800f626 <__swsetup_r+0x7a>
 800f600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f602:	b141      	cbz	r1, 800f616 <__swsetup_r+0x6a>
 800f604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f608:	4299      	cmp	r1, r3
 800f60a:	d002      	beq.n	800f612 <__swsetup_r+0x66>
 800f60c:	4630      	mov	r0, r6
 800f60e:	f7ff f9b1 	bl	800e974 <_free_r>
 800f612:	2300      	movs	r3, #0
 800f614:	6363      	str	r3, [r4, #52]	; 0x34
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f61c:	81a3      	strh	r3, [r4, #12]
 800f61e:	2300      	movs	r3, #0
 800f620:	6063      	str	r3, [r4, #4]
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	6023      	str	r3, [r4, #0]
 800f626:	89a3      	ldrh	r3, [r4, #12]
 800f628:	f043 0308 	orr.w	r3, r3, #8
 800f62c:	81a3      	strh	r3, [r4, #12]
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	b94b      	cbnz	r3, 800f646 <__swsetup_r+0x9a>
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f63c:	d003      	beq.n	800f646 <__swsetup_r+0x9a>
 800f63e:	4621      	mov	r1, r4
 800f640:	4630      	mov	r0, r6
 800f642:	f000 ffff 	bl	8010644 <__smakebuf_r>
 800f646:	89a0      	ldrh	r0, [r4, #12]
 800f648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f64c:	f010 0301 	ands.w	r3, r0, #1
 800f650:	d00a      	beq.n	800f668 <__swsetup_r+0xbc>
 800f652:	2300      	movs	r3, #0
 800f654:	60a3      	str	r3, [r4, #8]
 800f656:	6963      	ldr	r3, [r4, #20]
 800f658:	425b      	negs	r3, r3
 800f65a:	61a3      	str	r3, [r4, #24]
 800f65c:	6923      	ldr	r3, [r4, #16]
 800f65e:	b943      	cbnz	r3, 800f672 <__swsetup_r+0xc6>
 800f660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f664:	d1ba      	bne.n	800f5dc <__swsetup_r+0x30>
 800f666:	bd70      	pop	{r4, r5, r6, pc}
 800f668:	0781      	lsls	r1, r0, #30
 800f66a:	bf58      	it	pl
 800f66c:	6963      	ldrpl	r3, [r4, #20]
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	e7f4      	b.n	800f65c <__swsetup_r+0xb0>
 800f672:	2000      	movs	r0, #0
 800f674:	e7f7      	b.n	800f666 <__swsetup_r+0xba>
 800f676:	bf00      	nop
 800f678:	200011c4 	.word	0x200011c4
 800f67c:	08012ac8 	.word	0x08012ac8
 800f680:	08012ae8 	.word	0x08012ae8
 800f684:	08012aa8 	.word	0x08012aa8

0800f688 <quorem>:
 800f688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	6903      	ldr	r3, [r0, #16]
 800f68e:	690c      	ldr	r4, [r1, #16]
 800f690:	42a3      	cmp	r3, r4
 800f692:	4607      	mov	r7, r0
 800f694:	f2c0 8081 	blt.w	800f79a <quorem+0x112>
 800f698:	3c01      	subs	r4, #1
 800f69a:	f101 0814 	add.w	r8, r1, #20
 800f69e:	f100 0514 	add.w	r5, r0, #20
 800f6a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6a6:	9301      	str	r3, [sp, #4]
 800f6a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f6b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6c0:	d331      	bcc.n	800f726 <quorem+0x9e>
 800f6c2:	f04f 0e00 	mov.w	lr, #0
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	46ac      	mov	ip, r5
 800f6ca:	46f2      	mov	sl, lr
 800f6cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f6d0:	b293      	uxth	r3, r2
 800f6d2:	fb06 e303 	mla	r3, r6, r3, lr
 800f6d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	ebaa 0303 	sub.w	r3, sl, r3
 800f6e0:	f8dc a000 	ldr.w	sl, [ip]
 800f6e4:	0c12      	lsrs	r2, r2, #16
 800f6e6:	fa13 f38a 	uxtah	r3, r3, sl
 800f6ea:	fb06 e202 	mla	r2, r6, r2, lr
 800f6ee:	9300      	str	r3, [sp, #0]
 800f6f0:	9b00      	ldr	r3, [sp, #0]
 800f6f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f6f6:	b292      	uxth	r2, r2
 800f6f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f6fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f700:	f8bd 3000 	ldrh.w	r3, [sp]
 800f704:	4581      	cmp	r9, r0
 800f706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f70a:	f84c 3b04 	str.w	r3, [ip], #4
 800f70e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f712:	d2db      	bcs.n	800f6cc <quorem+0x44>
 800f714:	f855 300b 	ldr.w	r3, [r5, fp]
 800f718:	b92b      	cbnz	r3, 800f726 <quorem+0x9e>
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	3b04      	subs	r3, #4
 800f71e:	429d      	cmp	r5, r3
 800f720:	461a      	mov	r2, r3
 800f722:	d32e      	bcc.n	800f782 <quorem+0xfa>
 800f724:	613c      	str	r4, [r7, #16]
 800f726:	4638      	mov	r0, r7
 800f728:	f001 fa5a 	bl	8010be0 <__mcmp>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	db24      	blt.n	800f77a <quorem+0xf2>
 800f730:	3601      	adds	r6, #1
 800f732:	4628      	mov	r0, r5
 800f734:	f04f 0c00 	mov.w	ip, #0
 800f738:	f858 2b04 	ldr.w	r2, [r8], #4
 800f73c:	f8d0 e000 	ldr.w	lr, [r0]
 800f740:	b293      	uxth	r3, r2
 800f742:	ebac 0303 	sub.w	r3, ip, r3
 800f746:	0c12      	lsrs	r2, r2, #16
 800f748:	fa13 f38e 	uxtah	r3, r3, lr
 800f74c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f754:	b29b      	uxth	r3, r3
 800f756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f75a:	45c1      	cmp	r9, r8
 800f75c:	f840 3b04 	str.w	r3, [r0], #4
 800f760:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f764:	d2e8      	bcs.n	800f738 <quorem+0xb0>
 800f766:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f76a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f76e:	b922      	cbnz	r2, 800f77a <quorem+0xf2>
 800f770:	3b04      	subs	r3, #4
 800f772:	429d      	cmp	r5, r3
 800f774:	461a      	mov	r2, r3
 800f776:	d30a      	bcc.n	800f78e <quorem+0x106>
 800f778:	613c      	str	r4, [r7, #16]
 800f77a:	4630      	mov	r0, r6
 800f77c:	b003      	add	sp, #12
 800f77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f782:	6812      	ldr	r2, [r2, #0]
 800f784:	3b04      	subs	r3, #4
 800f786:	2a00      	cmp	r2, #0
 800f788:	d1cc      	bne.n	800f724 <quorem+0x9c>
 800f78a:	3c01      	subs	r4, #1
 800f78c:	e7c7      	b.n	800f71e <quorem+0x96>
 800f78e:	6812      	ldr	r2, [r2, #0]
 800f790:	3b04      	subs	r3, #4
 800f792:	2a00      	cmp	r2, #0
 800f794:	d1f0      	bne.n	800f778 <quorem+0xf0>
 800f796:	3c01      	subs	r4, #1
 800f798:	e7eb      	b.n	800f772 <quorem+0xea>
 800f79a:	2000      	movs	r0, #0
 800f79c:	e7ee      	b.n	800f77c <quorem+0xf4>
	...

0800f7a0 <_dtoa_r>:
 800f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a4:	ed2d 8b02 	vpush	{d8}
 800f7a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f7aa:	b091      	sub	sp, #68	; 0x44
 800f7ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f7b0:	ec59 8b10 	vmov	r8, r9, d0
 800f7b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f7b6:	9106      	str	r1, [sp, #24]
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	9208      	str	r2, [sp, #32]
 800f7bc:	930c      	str	r3, [sp, #48]	; 0x30
 800f7be:	b975      	cbnz	r5, 800f7de <_dtoa_r+0x3e>
 800f7c0:	2010      	movs	r0, #16
 800f7c2:	f7ff f8b1 	bl	800e928 <malloc>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	6270      	str	r0, [r6, #36]	; 0x24
 800f7ca:	b920      	cbnz	r0, 800f7d6 <_dtoa_r+0x36>
 800f7cc:	4baa      	ldr	r3, [pc, #680]	; (800fa78 <_dtoa_r+0x2d8>)
 800f7ce:	21ea      	movs	r1, #234	; 0xea
 800f7d0:	48aa      	ldr	r0, [pc, #680]	; (800fa7c <_dtoa_r+0x2dc>)
 800f7d2:	f001 fcfd 	bl	80111d0 <__assert_func>
 800f7d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f7da:	6005      	str	r5, [r0, #0]
 800f7dc:	60c5      	str	r5, [r0, #12]
 800f7de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f7e0:	6819      	ldr	r1, [r3, #0]
 800f7e2:	b151      	cbz	r1, 800f7fa <_dtoa_r+0x5a>
 800f7e4:	685a      	ldr	r2, [r3, #4]
 800f7e6:	604a      	str	r2, [r1, #4]
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4093      	lsls	r3, r2
 800f7ec:	608b      	str	r3, [r1, #8]
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f000 ffb4 	bl	801075c <_Bfree>
 800f7f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	f1b9 0300 	subs.w	r3, r9, #0
 800f7fe:	bfbb      	ittet	lt
 800f800:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f804:	9303      	strlt	r3, [sp, #12]
 800f806:	2300      	movge	r3, #0
 800f808:	2201      	movlt	r2, #1
 800f80a:	bfac      	ite	ge
 800f80c:	6023      	strge	r3, [r4, #0]
 800f80e:	6022      	strlt	r2, [r4, #0]
 800f810:	4b9b      	ldr	r3, [pc, #620]	; (800fa80 <_dtoa_r+0x2e0>)
 800f812:	9c03      	ldr	r4, [sp, #12]
 800f814:	43a3      	bics	r3, r4
 800f816:	d11c      	bne.n	800f852 <_dtoa_r+0xb2>
 800f818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f81a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f824:	ea53 0308 	orrs.w	r3, r3, r8
 800f828:	f000 84fd 	beq.w	8010226 <_dtoa_r+0xa86>
 800f82c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f82e:	b963      	cbnz	r3, 800f84a <_dtoa_r+0xaa>
 800f830:	4b94      	ldr	r3, [pc, #592]	; (800fa84 <_dtoa_r+0x2e4>)
 800f832:	e01f      	b.n	800f874 <_dtoa_r+0xd4>
 800f834:	4b94      	ldr	r3, [pc, #592]	; (800fa88 <_dtoa_r+0x2e8>)
 800f836:	9301      	str	r3, [sp, #4]
 800f838:	3308      	adds	r3, #8
 800f83a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f83c:	6013      	str	r3, [r2, #0]
 800f83e:	9801      	ldr	r0, [sp, #4]
 800f840:	b011      	add	sp, #68	; 0x44
 800f842:	ecbd 8b02 	vpop	{d8}
 800f846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f84a:	4b8e      	ldr	r3, [pc, #568]	; (800fa84 <_dtoa_r+0x2e4>)
 800f84c:	9301      	str	r3, [sp, #4]
 800f84e:	3303      	adds	r3, #3
 800f850:	e7f3      	b.n	800f83a <_dtoa_r+0x9a>
 800f852:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f856:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85e:	d10b      	bne.n	800f878 <_dtoa_r+0xd8>
 800f860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f862:	2301      	movs	r3, #1
 800f864:	6013      	str	r3, [r2, #0]
 800f866:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f000 84d9 	beq.w	8010220 <_dtoa_r+0xa80>
 800f86e:	4887      	ldr	r0, [pc, #540]	; (800fa8c <_dtoa_r+0x2ec>)
 800f870:	6018      	str	r0, [r3, #0]
 800f872:	1e43      	subs	r3, r0, #1
 800f874:	9301      	str	r3, [sp, #4]
 800f876:	e7e2      	b.n	800f83e <_dtoa_r+0x9e>
 800f878:	a90f      	add	r1, sp, #60	; 0x3c
 800f87a:	aa0e      	add	r2, sp, #56	; 0x38
 800f87c:	4630      	mov	r0, r6
 800f87e:	eeb0 0b48 	vmov.f64	d0, d8
 800f882:	f001 fa53 	bl	8010d2c <__d2b>
 800f886:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f88a:	4605      	mov	r5, r0
 800f88c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f88e:	2900      	cmp	r1, #0
 800f890:	d046      	beq.n	800f920 <_dtoa_r+0x180>
 800f892:	ee18 4a90 	vmov	r4, s17
 800f896:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f89a:	ec53 2b18 	vmov	r2, r3, d8
 800f89e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f8a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f8a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f8aa:	2400      	movs	r4, #0
 800f8ac:	ec43 2b16 	vmov	d6, r2, r3
 800f8b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f8b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800fa60 <_dtoa_r+0x2c0>
 800f8b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f8bc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800fa68 <_dtoa_r+0x2c8>
 800f8c0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f8c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800fa70 <_dtoa_r+0x2d0>
 800f8c8:	ee07 1a90 	vmov	s15, r1
 800f8cc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f8d0:	eeb0 7b46 	vmov.f64	d7, d6
 800f8d4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f8d8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f8dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e4:	ee16 ba90 	vmov	fp, s13
 800f8e8:	940a      	str	r4, [sp, #40]	; 0x28
 800f8ea:	d508      	bpl.n	800f8fe <_dtoa_r+0x15e>
 800f8ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f8f0:	eeb4 6b47 	vcmp.f64	d6, d7
 800f8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f8:	bf18      	it	ne
 800f8fa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f8fe:	f1bb 0f16 	cmp.w	fp, #22
 800f902:	d82f      	bhi.n	800f964 <_dtoa_r+0x1c4>
 800f904:	4b62      	ldr	r3, [pc, #392]	; (800fa90 <_dtoa_r+0x2f0>)
 800f906:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f90a:	ed93 7b00 	vldr	d7, [r3]
 800f90e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f916:	d501      	bpl.n	800f91c <_dtoa_r+0x17c>
 800f918:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f91c:	2300      	movs	r3, #0
 800f91e:	e022      	b.n	800f966 <_dtoa_r+0x1c6>
 800f920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f922:	4401      	add	r1, r0
 800f924:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f928:	2b20      	cmp	r3, #32
 800f92a:	bfc1      	itttt	gt
 800f92c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f930:	fa04 f303 	lslgt.w	r3, r4, r3
 800f934:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f938:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f93c:	bfd6      	itet	le
 800f93e:	f1c3 0320 	rsble	r3, r3, #32
 800f942:	ea43 0808 	orrgt.w	r8, r3, r8
 800f946:	fa08 f803 	lslle.w	r8, r8, r3
 800f94a:	ee07 8a90 	vmov	s15, r8
 800f94e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f952:	3901      	subs	r1, #1
 800f954:	ee17 4a90 	vmov	r4, s15
 800f958:	ec53 2b17 	vmov	r2, r3, d7
 800f95c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f960:	2401      	movs	r4, #1
 800f962:	e7a3      	b.n	800f8ac <_dtoa_r+0x10c>
 800f964:	2301      	movs	r3, #1
 800f966:	930b      	str	r3, [sp, #44]	; 0x2c
 800f968:	1a43      	subs	r3, r0, r1
 800f96a:	1e5a      	subs	r2, r3, #1
 800f96c:	bf45      	ittet	mi
 800f96e:	f1c3 0301 	rsbmi	r3, r3, #1
 800f972:	9304      	strmi	r3, [sp, #16]
 800f974:	2300      	movpl	r3, #0
 800f976:	2300      	movmi	r3, #0
 800f978:	9205      	str	r2, [sp, #20]
 800f97a:	bf54      	ite	pl
 800f97c:	9304      	strpl	r3, [sp, #16]
 800f97e:	9305      	strmi	r3, [sp, #20]
 800f980:	f1bb 0f00 	cmp.w	fp, #0
 800f984:	db18      	blt.n	800f9b8 <_dtoa_r+0x218>
 800f986:	9b05      	ldr	r3, [sp, #20]
 800f988:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f98c:	445b      	add	r3, fp
 800f98e:	9305      	str	r3, [sp, #20]
 800f990:	2300      	movs	r3, #0
 800f992:	9a06      	ldr	r2, [sp, #24]
 800f994:	2a09      	cmp	r2, #9
 800f996:	d849      	bhi.n	800fa2c <_dtoa_r+0x28c>
 800f998:	2a05      	cmp	r2, #5
 800f99a:	bfc4      	itt	gt
 800f99c:	3a04      	subgt	r2, #4
 800f99e:	9206      	strgt	r2, [sp, #24]
 800f9a0:	9a06      	ldr	r2, [sp, #24]
 800f9a2:	f1a2 0202 	sub.w	r2, r2, #2
 800f9a6:	bfcc      	ite	gt
 800f9a8:	2400      	movgt	r4, #0
 800f9aa:	2401      	movle	r4, #1
 800f9ac:	2a03      	cmp	r2, #3
 800f9ae:	d848      	bhi.n	800fa42 <_dtoa_r+0x2a2>
 800f9b0:	e8df f002 	tbb	[pc, r2]
 800f9b4:	3a2c2e0b 	.word	0x3a2c2e0b
 800f9b8:	9b04      	ldr	r3, [sp, #16]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	eba3 030b 	sub.w	r3, r3, fp
 800f9c0:	9304      	str	r3, [sp, #16]
 800f9c2:	9209      	str	r2, [sp, #36]	; 0x24
 800f9c4:	f1cb 0300 	rsb	r3, fp, #0
 800f9c8:	e7e3      	b.n	800f992 <_dtoa_r+0x1f2>
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	9207      	str	r2, [sp, #28]
 800f9ce:	9a08      	ldr	r2, [sp, #32]
 800f9d0:	2a00      	cmp	r2, #0
 800f9d2:	dc39      	bgt.n	800fa48 <_dtoa_r+0x2a8>
 800f9d4:	f04f 0a01 	mov.w	sl, #1
 800f9d8:	46d1      	mov	r9, sl
 800f9da:	4652      	mov	r2, sl
 800f9dc:	f8cd a020 	str.w	sl, [sp, #32]
 800f9e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	6079      	str	r1, [r7, #4]
 800f9e6:	2004      	movs	r0, #4
 800f9e8:	f100 0c14 	add.w	ip, r0, #20
 800f9ec:	4594      	cmp	ip, r2
 800f9ee:	6879      	ldr	r1, [r7, #4]
 800f9f0:	d92f      	bls.n	800fa52 <_dtoa_r+0x2b2>
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	930d      	str	r3, [sp, #52]	; 0x34
 800f9f6:	f000 fe71 	bl	80106dc <_Balloc>
 800f9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9fc:	9001      	str	r0, [sp, #4]
 800f9fe:	4602      	mov	r2, r0
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d149      	bne.n	800fa98 <_dtoa_r+0x2f8>
 800fa04:	4b23      	ldr	r3, [pc, #140]	; (800fa94 <_dtoa_r+0x2f4>)
 800fa06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fa0a:	e6e1      	b.n	800f7d0 <_dtoa_r+0x30>
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	e7dd      	b.n	800f9cc <_dtoa_r+0x22c>
 800fa10:	2200      	movs	r2, #0
 800fa12:	9207      	str	r2, [sp, #28]
 800fa14:	9a08      	ldr	r2, [sp, #32]
 800fa16:	eb0b 0a02 	add.w	sl, fp, r2
 800fa1a:	f10a 0901 	add.w	r9, sl, #1
 800fa1e:	464a      	mov	r2, r9
 800fa20:	2a01      	cmp	r2, #1
 800fa22:	bfb8      	it	lt
 800fa24:	2201      	movlt	r2, #1
 800fa26:	e7db      	b.n	800f9e0 <_dtoa_r+0x240>
 800fa28:	2201      	movs	r2, #1
 800fa2a:	e7f2      	b.n	800fa12 <_dtoa_r+0x272>
 800fa2c:	2401      	movs	r4, #1
 800fa2e:	2200      	movs	r2, #0
 800fa30:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800fa34:	f04f 3aff 	mov.w	sl, #4294967295
 800fa38:	2100      	movs	r1, #0
 800fa3a:	46d1      	mov	r9, sl
 800fa3c:	2212      	movs	r2, #18
 800fa3e:	9108      	str	r1, [sp, #32]
 800fa40:	e7ce      	b.n	800f9e0 <_dtoa_r+0x240>
 800fa42:	2201      	movs	r2, #1
 800fa44:	9207      	str	r2, [sp, #28]
 800fa46:	e7f5      	b.n	800fa34 <_dtoa_r+0x294>
 800fa48:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa4c:	46d1      	mov	r9, sl
 800fa4e:	4652      	mov	r2, sl
 800fa50:	e7c6      	b.n	800f9e0 <_dtoa_r+0x240>
 800fa52:	3101      	adds	r1, #1
 800fa54:	6079      	str	r1, [r7, #4]
 800fa56:	0040      	lsls	r0, r0, #1
 800fa58:	e7c6      	b.n	800f9e8 <_dtoa_r+0x248>
 800fa5a:	bf00      	nop
 800fa5c:	f3af 8000 	nop.w
 800fa60:	636f4361 	.word	0x636f4361
 800fa64:	3fd287a7 	.word	0x3fd287a7
 800fa68:	8b60c8b3 	.word	0x8b60c8b3
 800fa6c:	3fc68a28 	.word	0x3fc68a28
 800fa70:	509f79fb 	.word	0x509f79fb
 800fa74:	3fd34413 	.word	0x3fd34413
 800fa78:	08012a25 	.word	0x08012a25
 800fa7c:	08012a3c 	.word	0x08012a3c
 800fa80:	7ff00000 	.word	0x7ff00000
 800fa84:	08012a21 	.word	0x08012a21
 800fa88:	08012a18 	.word	0x08012a18
 800fa8c:	080129f5 	.word	0x080129f5
 800fa90:	08012b90 	.word	0x08012b90
 800fa94:	08012a97 	.word	0x08012a97
 800fa98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800fa9a:	9901      	ldr	r1, [sp, #4]
 800fa9c:	6011      	str	r1, [r2, #0]
 800fa9e:	f1b9 0f0e 	cmp.w	r9, #14
 800faa2:	d86c      	bhi.n	800fb7e <_dtoa_r+0x3de>
 800faa4:	2c00      	cmp	r4, #0
 800faa6:	d06a      	beq.n	800fb7e <_dtoa_r+0x3de>
 800faa8:	f1bb 0f00 	cmp.w	fp, #0
 800faac:	f340 80a0 	ble.w	800fbf0 <_dtoa_r+0x450>
 800fab0:	49c1      	ldr	r1, [pc, #772]	; (800fdb8 <_dtoa_r+0x618>)
 800fab2:	f00b 020f 	and.w	r2, fp, #15
 800fab6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800faba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fabe:	ed92 7b00 	vldr	d7, [r2]
 800fac2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800fac6:	f000 8087 	beq.w	800fbd8 <_dtoa_r+0x438>
 800faca:	4abc      	ldr	r2, [pc, #752]	; (800fdbc <_dtoa_r+0x61c>)
 800facc:	ed92 6b08 	vldr	d6, [r2, #32]
 800fad0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fad4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fad8:	f001 010f 	and.w	r1, r1, #15
 800fadc:	2203      	movs	r2, #3
 800fade:	48b7      	ldr	r0, [pc, #732]	; (800fdbc <_dtoa_r+0x61c>)
 800fae0:	2900      	cmp	r1, #0
 800fae2:	d17b      	bne.n	800fbdc <_dtoa_r+0x43c>
 800fae4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fae8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800faec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800faf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800faf2:	2900      	cmp	r1, #0
 800faf4:	f000 80a2 	beq.w	800fc3c <_dtoa_r+0x49c>
 800faf8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fafc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb08:	f140 8098 	bpl.w	800fc3c <_dtoa_r+0x49c>
 800fb0c:	f1b9 0f00 	cmp.w	r9, #0
 800fb10:	f000 8094 	beq.w	800fc3c <_dtoa_r+0x49c>
 800fb14:	f1ba 0f00 	cmp.w	sl, #0
 800fb18:	dd2f      	ble.n	800fb7a <_dtoa_r+0x3da>
 800fb1a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800fb1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fb22:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fb26:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fb2a:	3201      	adds	r2, #1
 800fb2c:	4650      	mov	r0, sl
 800fb2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fb32:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800fb36:	ee07 2a90 	vmov	s15, r2
 800fb3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fb3e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fb42:	ee15 4a90 	vmov	r4, s11
 800fb46:	ec52 1b15 	vmov	r1, r2, d5
 800fb4a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	d177      	bne.n	800fc42 <_dtoa_r+0x4a2>
 800fb52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fb56:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fb5a:	ec42 1b17 	vmov	d7, r1, r2
 800fb5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb66:	f300 8263 	bgt.w	8010030 <_dtoa_r+0x890>
 800fb6a:	eeb1 7b47 	vneg.f64	d7, d7
 800fb6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb76:	f100 8258 	bmi.w	801002a <_dtoa_r+0x88a>
 800fb7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fb7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb80:	2a00      	cmp	r2, #0
 800fb82:	f2c0 811d 	blt.w	800fdc0 <_dtoa_r+0x620>
 800fb86:	f1bb 0f0e 	cmp.w	fp, #14
 800fb8a:	f300 8119 	bgt.w	800fdc0 <_dtoa_r+0x620>
 800fb8e:	4b8a      	ldr	r3, [pc, #552]	; (800fdb8 <_dtoa_r+0x618>)
 800fb90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb94:	ed93 6b00 	vldr	d6, [r3]
 800fb98:	9b08      	ldr	r3, [sp, #32]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f280 80b7 	bge.w	800fd0e <_dtoa_r+0x56e>
 800fba0:	f1b9 0f00 	cmp.w	r9, #0
 800fba4:	f300 80b3 	bgt.w	800fd0e <_dtoa_r+0x56e>
 800fba8:	f040 823f 	bne.w	801002a <_dtoa_r+0x88a>
 800fbac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fbb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fbb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc0:	464c      	mov	r4, r9
 800fbc2:	464f      	mov	r7, r9
 800fbc4:	f280 8215 	bge.w	800fff2 <_dtoa_r+0x852>
 800fbc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fbcc:	2331      	movs	r3, #49	; 0x31
 800fbce:	f808 3b01 	strb.w	r3, [r8], #1
 800fbd2:	f10b 0b01 	add.w	fp, fp, #1
 800fbd6:	e211      	b.n	800fffc <_dtoa_r+0x85c>
 800fbd8:	2202      	movs	r2, #2
 800fbda:	e780      	b.n	800fade <_dtoa_r+0x33e>
 800fbdc:	07cc      	lsls	r4, r1, #31
 800fbde:	d504      	bpl.n	800fbea <_dtoa_r+0x44a>
 800fbe0:	ed90 6b00 	vldr	d6, [r0]
 800fbe4:	3201      	adds	r2, #1
 800fbe6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fbea:	1049      	asrs	r1, r1, #1
 800fbec:	3008      	adds	r0, #8
 800fbee:	e777      	b.n	800fae0 <_dtoa_r+0x340>
 800fbf0:	d022      	beq.n	800fc38 <_dtoa_r+0x498>
 800fbf2:	f1cb 0100 	rsb	r1, fp, #0
 800fbf6:	4a70      	ldr	r2, [pc, #448]	; (800fdb8 <_dtoa_r+0x618>)
 800fbf8:	f001 000f 	and.w	r0, r1, #15
 800fbfc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fc00:	ed92 7b00 	vldr	d7, [r2]
 800fc04:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fc08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc0c:	486b      	ldr	r0, [pc, #428]	; (800fdbc <_dtoa_r+0x61c>)
 800fc0e:	1109      	asrs	r1, r1, #4
 800fc10:	2400      	movs	r4, #0
 800fc12:	2202      	movs	r2, #2
 800fc14:	b929      	cbnz	r1, 800fc22 <_dtoa_r+0x482>
 800fc16:	2c00      	cmp	r4, #0
 800fc18:	f43f af6a 	beq.w	800faf0 <_dtoa_r+0x350>
 800fc1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc20:	e766      	b.n	800faf0 <_dtoa_r+0x350>
 800fc22:	07cf      	lsls	r7, r1, #31
 800fc24:	d505      	bpl.n	800fc32 <_dtoa_r+0x492>
 800fc26:	ed90 6b00 	vldr	d6, [r0]
 800fc2a:	3201      	adds	r2, #1
 800fc2c:	2401      	movs	r4, #1
 800fc2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fc32:	1049      	asrs	r1, r1, #1
 800fc34:	3008      	adds	r0, #8
 800fc36:	e7ed      	b.n	800fc14 <_dtoa_r+0x474>
 800fc38:	2202      	movs	r2, #2
 800fc3a:	e759      	b.n	800faf0 <_dtoa_r+0x350>
 800fc3c:	465f      	mov	r7, fp
 800fc3e:	4648      	mov	r0, r9
 800fc40:	e775      	b.n	800fb2e <_dtoa_r+0x38e>
 800fc42:	ec42 1b17 	vmov	d7, r1, r2
 800fc46:	4a5c      	ldr	r2, [pc, #368]	; (800fdb8 <_dtoa_r+0x618>)
 800fc48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fc4c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fc50:	9a01      	ldr	r2, [sp, #4]
 800fc52:	1814      	adds	r4, r2, r0
 800fc54:	9a07      	ldr	r2, [sp, #28]
 800fc56:	b352      	cbz	r2, 800fcae <_dtoa_r+0x50e>
 800fc58:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800fc5c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800fc60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc64:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fc68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fc6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fc70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fc74:	ee14 2a90 	vmov	r2, s9
 800fc78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fc7c:	3230      	adds	r2, #48	; 0x30
 800fc7e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fc82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8a:	f808 2b01 	strb.w	r2, [r8], #1
 800fc8e:	d439      	bmi.n	800fd04 <_dtoa_r+0x564>
 800fc90:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fc94:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9c:	d472      	bmi.n	800fd84 <_dtoa_r+0x5e4>
 800fc9e:	45a0      	cmp	r8, r4
 800fca0:	f43f af6b 	beq.w	800fb7a <_dtoa_r+0x3da>
 800fca4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fca8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fcac:	e7e0      	b.n	800fc70 <_dtoa_r+0x4d0>
 800fcae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fcb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fcbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fcc0:	ee14 2a90 	vmov	r2, s9
 800fcc4:	3230      	adds	r2, #48	; 0x30
 800fcc6:	f808 2b01 	strb.w	r2, [r8], #1
 800fcca:	45a0      	cmp	r8, r4
 800fccc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800fcd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800fcd4:	d118      	bne.n	800fd08 <_dtoa_r+0x568>
 800fcd6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fcda:	ee37 4b05 	vadd.f64	d4, d7, d5
 800fcde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	dc4d      	bgt.n	800fd84 <_dtoa_r+0x5e4>
 800fce8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fcec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	f57f af41 	bpl.w	800fb7a <_dtoa_r+0x3da>
 800fcf8:	4688      	mov	r8, r1
 800fcfa:	3901      	subs	r1, #1
 800fcfc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800fd00:	2b30      	cmp	r3, #48	; 0x30
 800fd02:	d0f9      	beq.n	800fcf8 <_dtoa_r+0x558>
 800fd04:	46bb      	mov	fp, r7
 800fd06:	e02a      	b.n	800fd5e <_dtoa_r+0x5be>
 800fd08:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fd0c:	e7d6      	b.n	800fcbc <_dtoa_r+0x51c>
 800fd0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd12:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800fd16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fd1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fd1e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fd22:	ee15 3a10 	vmov	r3, s10
 800fd26:	3330      	adds	r3, #48	; 0x30
 800fd28:	f808 3b01 	strb.w	r3, [r8], #1
 800fd2c:	9b01      	ldr	r3, [sp, #4]
 800fd2e:	eba8 0303 	sub.w	r3, r8, r3
 800fd32:	4599      	cmp	r9, r3
 800fd34:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fd38:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fd3c:	d133      	bne.n	800fda6 <_dtoa_r+0x606>
 800fd3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fd42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4a:	dc1a      	bgt.n	800fd82 <_dtoa_r+0x5e2>
 800fd4c:	eeb4 7b46 	vcmp.f64	d7, d6
 800fd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd54:	d103      	bne.n	800fd5e <_dtoa_r+0x5be>
 800fd56:	ee15 3a10 	vmov	r3, s10
 800fd5a:	07d9      	lsls	r1, r3, #31
 800fd5c:	d411      	bmi.n	800fd82 <_dtoa_r+0x5e2>
 800fd5e:	4629      	mov	r1, r5
 800fd60:	4630      	mov	r0, r6
 800fd62:	f000 fcfb 	bl	801075c <_Bfree>
 800fd66:	2300      	movs	r3, #0
 800fd68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd6a:	f888 3000 	strb.w	r3, [r8]
 800fd6e:	f10b 0301 	add.w	r3, fp, #1
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f43f ad61 	beq.w	800f83e <_dtoa_r+0x9e>
 800fd7c:	f8c3 8000 	str.w	r8, [r3]
 800fd80:	e55d      	b.n	800f83e <_dtoa_r+0x9e>
 800fd82:	465f      	mov	r7, fp
 800fd84:	4643      	mov	r3, r8
 800fd86:	4698      	mov	r8, r3
 800fd88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd8c:	2a39      	cmp	r2, #57	; 0x39
 800fd8e:	d106      	bne.n	800fd9e <_dtoa_r+0x5fe>
 800fd90:	9a01      	ldr	r2, [sp, #4]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d1f7      	bne.n	800fd86 <_dtoa_r+0x5e6>
 800fd96:	9901      	ldr	r1, [sp, #4]
 800fd98:	2230      	movs	r2, #48	; 0x30
 800fd9a:	3701      	adds	r7, #1
 800fd9c:	700a      	strb	r2, [r1, #0]
 800fd9e:	781a      	ldrb	r2, [r3, #0]
 800fda0:	3201      	adds	r2, #1
 800fda2:	701a      	strb	r2, [r3, #0]
 800fda4:	e7ae      	b.n	800fd04 <_dtoa_r+0x564>
 800fda6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fdaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb2:	d1b2      	bne.n	800fd1a <_dtoa_r+0x57a>
 800fdb4:	e7d3      	b.n	800fd5e <_dtoa_r+0x5be>
 800fdb6:	bf00      	nop
 800fdb8:	08012b90 	.word	0x08012b90
 800fdbc:	08012b68 	.word	0x08012b68
 800fdc0:	9907      	ldr	r1, [sp, #28]
 800fdc2:	2900      	cmp	r1, #0
 800fdc4:	f000 80d0 	beq.w	800ff68 <_dtoa_r+0x7c8>
 800fdc8:	9906      	ldr	r1, [sp, #24]
 800fdca:	2901      	cmp	r1, #1
 800fdcc:	f300 80b4 	bgt.w	800ff38 <_dtoa_r+0x798>
 800fdd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fdd2:	2900      	cmp	r1, #0
 800fdd4:	f000 80ac 	beq.w	800ff30 <_dtoa_r+0x790>
 800fdd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fddc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fde0:	461c      	mov	r4, r3
 800fde2:	930a      	str	r3, [sp, #40]	; 0x28
 800fde4:	9b04      	ldr	r3, [sp, #16]
 800fde6:	4413      	add	r3, r2
 800fde8:	9304      	str	r3, [sp, #16]
 800fdea:	9b05      	ldr	r3, [sp, #20]
 800fdec:	2101      	movs	r1, #1
 800fdee:	4413      	add	r3, r2
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	9305      	str	r3, [sp, #20]
 800fdf4:	f000 fd6a 	bl	80108cc <__i2b>
 800fdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdfa:	4607      	mov	r7, r0
 800fdfc:	f1b8 0f00 	cmp.w	r8, #0
 800fe00:	dd0d      	ble.n	800fe1e <_dtoa_r+0x67e>
 800fe02:	9a05      	ldr	r2, [sp, #20]
 800fe04:	2a00      	cmp	r2, #0
 800fe06:	dd0a      	ble.n	800fe1e <_dtoa_r+0x67e>
 800fe08:	4542      	cmp	r2, r8
 800fe0a:	9904      	ldr	r1, [sp, #16]
 800fe0c:	bfa8      	it	ge
 800fe0e:	4642      	movge	r2, r8
 800fe10:	1a89      	subs	r1, r1, r2
 800fe12:	9104      	str	r1, [sp, #16]
 800fe14:	9905      	ldr	r1, [sp, #20]
 800fe16:	eba8 0802 	sub.w	r8, r8, r2
 800fe1a:	1a8a      	subs	r2, r1, r2
 800fe1c:	9205      	str	r2, [sp, #20]
 800fe1e:	b303      	cbz	r3, 800fe62 <_dtoa_r+0x6c2>
 800fe20:	9a07      	ldr	r2, [sp, #28]
 800fe22:	2a00      	cmp	r2, #0
 800fe24:	f000 80a5 	beq.w	800ff72 <_dtoa_r+0x7d2>
 800fe28:	2c00      	cmp	r4, #0
 800fe2a:	dd13      	ble.n	800fe54 <_dtoa_r+0x6b4>
 800fe2c:	4639      	mov	r1, r7
 800fe2e:	4622      	mov	r2, r4
 800fe30:	4630      	mov	r0, r6
 800fe32:	930d      	str	r3, [sp, #52]	; 0x34
 800fe34:	f000 fe0a 	bl	8010a4c <__pow5mult>
 800fe38:	462a      	mov	r2, r5
 800fe3a:	4601      	mov	r1, r0
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	4630      	mov	r0, r6
 800fe40:	f000 fd5a 	bl	80108f8 <__multiply>
 800fe44:	4629      	mov	r1, r5
 800fe46:	900a      	str	r0, [sp, #40]	; 0x28
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f000 fc87 	bl	801075c <_Bfree>
 800fe4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe52:	4615      	mov	r5, r2
 800fe54:	1b1a      	subs	r2, r3, r4
 800fe56:	d004      	beq.n	800fe62 <_dtoa_r+0x6c2>
 800fe58:	4629      	mov	r1, r5
 800fe5a:	4630      	mov	r0, r6
 800fe5c:	f000 fdf6 	bl	8010a4c <__pow5mult>
 800fe60:	4605      	mov	r5, r0
 800fe62:	2101      	movs	r1, #1
 800fe64:	4630      	mov	r0, r6
 800fe66:	f000 fd31 	bl	80108cc <__i2b>
 800fe6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	4604      	mov	r4, r0
 800fe70:	f340 8081 	ble.w	800ff76 <_dtoa_r+0x7d6>
 800fe74:	461a      	mov	r2, r3
 800fe76:	4601      	mov	r1, r0
 800fe78:	4630      	mov	r0, r6
 800fe7a:	f000 fde7 	bl	8010a4c <__pow5mult>
 800fe7e:	9b06      	ldr	r3, [sp, #24]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	4604      	mov	r4, r0
 800fe84:	dd7a      	ble.n	800ff7c <_dtoa_r+0x7dc>
 800fe86:	2300      	movs	r3, #0
 800fe88:	930a      	str	r3, [sp, #40]	; 0x28
 800fe8a:	6922      	ldr	r2, [r4, #16]
 800fe8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fe90:	6910      	ldr	r0, [r2, #16]
 800fe92:	f000 fccb 	bl	801082c <__hi0bits>
 800fe96:	f1c0 0020 	rsb	r0, r0, #32
 800fe9a:	9b05      	ldr	r3, [sp, #20]
 800fe9c:	4418      	add	r0, r3
 800fe9e:	f010 001f 	ands.w	r0, r0, #31
 800fea2:	f000 808c 	beq.w	800ffbe <_dtoa_r+0x81e>
 800fea6:	f1c0 0220 	rsb	r2, r0, #32
 800feaa:	2a04      	cmp	r2, #4
 800feac:	f340 8085 	ble.w	800ffba <_dtoa_r+0x81a>
 800feb0:	f1c0 001c 	rsb	r0, r0, #28
 800feb4:	9b04      	ldr	r3, [sp, #16]
 800feb6:	4403      	add	r3, r0
 800feb8:	9304      	str	r3, [sp, #16]
 800feba:	9b05      	ldr	r3, [sp, #20]
 800febc:	4403      	add	r3, r0
 800febe:	4480      	add	r8, r0
 800fec0:	9305      	str	r3, [sp, #20]
 800fec2:	9b04      	ldr	r3, [sp, #16]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	dd05      	ble.n	800fed4 <_dtoa_r+0x734>
 800fec8:	4629      	mov	r1, r5
 800feca:	461a      	mov	r2, r3
 800fecc:	4630      	mov	r0, r6
 800fece:	f000 fe17 	bl	8010b00 <__lshift>
 800fed2:	4605      	mov	r5, r0
 800fed4:	9b05      	ldr	r3, [sp, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	dd05      	ble.n	800fee6 <_dtoa_r+0x746>
 800feda:	4621      	mov	r1, r4
 800fedc:	461a      	mov	r2, r3
 800fede:	4630      	mov	r0, r6
 800fee0:	f000 fe0e 	bl	8010b00 <__lshift>
 800fee4:	4604      	mov	r4, r0
 800fee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d06a      	beq.n	800ffc2 <_dtoa_r+0x822>
 800feec:	4621      	mov	r1, r4
 800feee:	4628      	mov	r0, r5
 800fef0:	f000 fe76 	bl	8010be0 <__mcmp>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	da64      	bge.n	800ffc2 <_dtoa_r+0x822>
 800fef8:	2300      	movs	r3, #0
 800fefa:	4629      	mov	r1, r5
 800fefc:	220a      	movs	r2, #10
 800fefe:	4630      	mov	r0, r6
 800ff00:	f000 fc4e 	bl	80107a0 <__multadd>
 800ff04:	9b07      	ldr	r3, [sp, #28]
 800ff06:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 8191 	beq.w	8010234 <_dtoa_r+0xa94>
 800ff12:	4639      	mov	r1, r7
 800ff14:	2300      	movs	r3, #0
 800ff16:	220a      	movs	r2, #10
 800ff18:	4630      	mov	r0, r6
 800ff1a:	f000 fc41 	bl	80107a0 <__multadd>
 800ff1e:	f1ba 0f00 	cmp.w	sl, #0
 800ff22:	4607      	mov	r7, r0
 800ff24:	f300 808d 	bgt.w	8010042 <_dtoa_r+0x8a2>
 800ff28:	9b06      	ldr	r3, [sp, #24]
 800ff2a:	2b02      	cmp	r3, #2
 800ff2c:	dc50      	bgt.n	800ffd0 <_dtoa_r+0x830>
 800ff2e:	e088      	b.n	8010042 <_dtoa_r+0x8a2>
 800ff30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ff36:	e751      	b.n	800fddc <_dtoa_r+0x63c>
 800ff38:	f109 34ff 	add.w	r4, r9, #4294967295
 800ff3c:	42a3      	cmp	r3, r4
 800ff3e:	bfbf      	itttt	lt
 800ff40:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ff42:	1ae3      	sublt	r3, r4, r3
 800ff44:	18d2      	addlt	r2, r2, r3
 800ff46:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ff48:	bfb6      	itet	lt
 800ff4a:	4623      	movlt	r3, r4
 800ff4c:	1b1c      	subge	r4, r3, r4
 800ff4e:	2400      	movlt	r4, #0
 800ff50:	f1b9 0f00 	cmp.w	r9, #0
 800ff54:	bfb5      	itete	lt
 800ff56:	9a04      	ldrlt	r2, [sp, #16]
 800ff58:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ff5c:	eba2 0809 	sublt.w	r8, r2, r9
 800ff60:	464a      	movge	r2, r9
 800ff62:	bfb8      	it	lt
 800ff64:	2200      	movlt	r2, #0
 800ff66:	e73c      	b.n	800fde2 <_dtoa_r+0x642>
 800ff68:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ff6c:	9f07      	ldr	r7, [sp, #28]
 800ff6e:	461c      	mov	r4, r3
 800ff70:	e744      	b.n	800fdfc <_dtoa_r+0x65c>
 800ff72:	461a      	mov	r2, r3
 800ff74:	e770      	b.n	800fe58 <_dtoa_r+0x6b8>
 800ff76:	9b06      	ldr	r3, [sp, #24]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	dc18      	bgt.n	800ffae <_dtoa_r+0x80e>
 800ff7c:	9b02      	ldr	r3, [sp, #8]
 800ff7e:	b9b3      	cbnz	r3, 800ffae <_dtoa_r+0x80e>
 800ff80:	9b03      	ldr	r3, [sp, #12]
 800ff82:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ff86:	b9a2      	cbnz	r2, 800ffb2 <_dtoa_r+0x812>
 800ff88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ff8c:	0d12      	lsrs	r2, r2, #20
 800ff8e:	0512      	lsls	r2, r2, #20
 800ff90:	b18a      	cbz	r2, 800ffb6 <_dtoa_r+0x816>
 800ff92:	9b04      	ldr	r3, [sp, #16]
 800ff94:	3301      	adds	r3, #1
 800ff96:	9304      	str	r3, [sp, #16]
 800ff98:	9b05      	ldr	r3, [sp, #20]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	9305      	str	r3, [sp, #20]
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	930a      	str	r3, [sp, #40]	; 0x28
 800ffa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f47f af70 	bne.w	800fe8a <_dtoa_r+0x6ea>
 800ffaa:	2001      	movs	r0, #1
 800ffac:	e775      	b.n	800fe9a <_dtoa_r+0x6fa>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	e7f6      	b.n	800ffa0 <_dtoa_r+0x800>
 800ffb2:	9b02      	ldr	r3, [sp, #8]
 800ffb4:	e7f4      	b.n	800ffa0 <_dtoa_r+0x800>
 800ffb6:	920a      	str	r2, [sp, #40]	; 0x28
 800ffb8:	e7f3      	b.n	800ffa2 <_dtoa_r+0x802>
 800ffba:	d082      	beq.n	800fec2 <_dtoa_r+0x722>
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	301c      	adds	r0, #28
 800ffc0:	e778      	b.n	800feb4 <_dtoa_r+0x714>
 800ffc2:	f1b9 0f00 	cmp.w	r9, #0
 800ffc6:	dc37      	bgt.n	8010038 <_dtoa_r+0x898>
 800ffc8:	9b06      	ldr	r3, [sp, #24]
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	dd34      	ble.n	8010038 <_dtoa_r+0x898>
 800ffce:	46ca      	mov	sl, r9
 800ffd0:	f1ba 0f00 	cmp.w	sl, #0
 800ffd4:	d10d      	bne.n	800fff2 <_dtoa_r+0x852>
 800ffd6:	4621      	mov	r1, r4
 800ffd8:	4653      	mov	r3, sl
 800ffda:	2205      	movs	r2, #5
 800ffdc:	4630      	mov	r0, r6
 800ffde:	f000 fbdf 	bl	80107a0 <__multadd>
 800ffe2:	4601      	mov	r1, r0
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f000 fdfa 	bl	8010be0 <__mcmp>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	f73f adeb 	bgt.w	800fbc8 <_dtoa_r+0x428>
 800fff2:	9b08      	ldr	r3, [sp, #32]
 800fff4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fff8:	ea6f 0b03 	mvn.w	fp, r3
 800fffc:	f04f 0900 	mov.w	r9, #0
 8010000:	4621      	mov	r1, r4
 8010002:	4630      	mov	r0, r6
 8010004:	f000 fbaa 	bl	801075c <_Bfree>
 8010008:	2f00      	cmp	r7, #0
 801000a:	f43f aea8 	beq.w	800fd5e <_dtoa_r+0x5be>
 801000e:	f1b9 0f00 	cmp.w	r9, #0
 8010012:	d005      	beq.n	8010020 <_dtoa_r+0x880>
 8010014:	45b9      	cmp	r9, r7
 8010016:	d003      	beq.n	8010020 <_dtoa_r+0x880>
 8010018:	4649      	mov	r1, r9
 801001a:	4630      	mov	r0, r6
 801001c:	f000 fb9e 	bl	801075c <_Bfree>
 8010020:	4639      	mov	r1, r7
 8010022:	4630      	mov	r0, r6
 8010024:	f000 fb9a 	bl	801075c <_Bfree>
 8010028:	e699      	b.n	800fd5e <_dtoa_r+0x5be>
 801002a:	2400      	movs	r4, #0
 801002c:	4627      	mov	r7, r4
 801002e:	e7e0      	b.n	800fff2 <_dtoa_r+0x852>
 8010030:	46bb      	mov	fp, r7
 8010032:	4604      	mov	r4, r0
 8010034:	4607      	mov	r7, r0
 8010036:	e5c7      	b.n	800fbc8 <_dtoa_r+0x428>
 8010038:	9b07      	ldr	r3, [sp, #28]
 801003a:	46ca      	mov	sl, r9
 801003c:	2b00      	cmp	r3, #0
 801003e:	f000 8100 	beq.w	8010242 <_dtoa_r+0xaa2>
 8010042:	f1b8 0f00 	cmp.w	r8, #0
 8010046:	dd05      	ble.n	8010054 <_dtoa_r+0x8b4>
 8010048:	4639      	mov	r1, r7
 801004a:	4642      	mov	r2, r8
 801004c:	4630      	mov	r0, r6
 801004e:	f000 fd57 	bl	8010b00 <__lshift>
 8010052:	4607      	mov	r7, r0
 8010054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010056:	2b00      	cmp	r3, #0
 8010058:	d05d      	beq.n	8010116 <_dtoa_r+0x976>
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	4630      	mov	r0, r6
 801005e:	f000 fb3d 	bl	80106dc <_Balloc>
 8010062:	4680      	mov	r8, r0
 8010064:	b928      	cbnz	r0, 8010072 <_dtoa_r+0x8d2>
 8010066:	4b82      	ldr	r3, [pc, #520]	; (8010270 <_dtoa_r+0xad0>)
 8010068:	4602      	mov	r2, r0
 801006a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801006e:	f7ff bbaf 	b.w	800f7d0 <_dtoa_r+0x30>
 8010072:	693a      	ldr	r2, [r7, #16]
 8010074:	3202      	adds	r2, #2
 8010076:	0092      	lsls	r2, r2, #2
 8010078:	f107 010c 	add.w	r1, r7, #12
 801007c:	300c      	adds	r0, #12
 801007e:	f7fe fc63 	bl	800e948 <memcpy>
 8010082:	2201      	movs	r2, #1
 8010084:	4641      	mov	r1, r8
 8010086:	4630      	mov	r0, r6
 8010088:	f000 fd3a 	bl	8010b00 <__lshift>
 801008c:	9b01      	ldr	r3, [sp, #4]
 801008e:	3301      	adds	r3, #1
 8010090:	9304      	str	r3, [sp, #16]
 8010092:	9b01      	ldr	r3, [sp, #4]
 8010094:	4453      	add	r3, sl
 8010096:	9308      	str	r3, [sp, #32]
 8010098:	9b02      	ldr	r3, [sp, #8]
 801009a:	f003 0301 	and.w	r3, r3, #1
 801009e:	46b9      	mov	r9, r7
 80100a0:	9307      	str	r3, [sp, #28]
 80100a2:	4607      	mov	r7, r0
 80100a4:	9b04      	ldr	r3, [sp, #16]
 80100a6:	4621      	mov	r1, r4
 80100a8:	3b01      	subs	r3, #1
 80100aa:	4628      	mov	r0, r5
 80100ac:	9302      	str	r3, [sp, #8]
 80100ae:	f7ff faeb 	bl	800f688 <quorem>
 80100b2:	4603      	mov	r3, r0
 80100b4:	3330      	adds	r3, #48	; 0x30
 80100b6:	9005      	str	r0, [sp, #20]
 80100b8:	4649      	mov	r1, r9
 80100ba:	4628      	mov	r0, r5
 80100bc:	9309      	str	r3, [sp, #36]	; 0x24
 80100be:	f000 fd8f 	bl	8010be0 <__mcmp>
 80100c2:	463a      	mov	r2, r7
 80100c4:	4682      	mov	sl, r0
 80100c6:	4621      	mov	r1, r4
 80100c8:	4630      	mov	r0, r6
 80100ca:	f000 fda5 	bl	8010c18 <__mdiff>
 80100ce:	68c2      	ldr	r2, [r0, #12]
 80100d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100d2:	4680      	mov	r8, r0
 80100d4:	bb0a      	cbnz	r2, 801011a <_dtoa_r+0x97a>
 80100d6:	4601      	mov	r1, r0
 80100d8:	4628      	mov	r0, r5
 80100da:	f000 fd81 	bl	8010be0 <__mcmp>
 80100de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e0:	4602      	mov	r2, r0
 80100e2:	4641      	mov	r1, r8
 80100e4:	4630      	mov	r0, r6
 80100e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80100ea:	f000 fb37 	bl	801075c <_Bfree>
 80100ee:	9b06      	ldr	r3, [sp, #24]
 80100f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80100f6:	ea43 0102 	orr.w	r1, r3, r2
 80100fa:	9b07      	ldr	r3, [sp, #28]
 80100fc:	430b      	orrs	r3, r1
 80100fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010100:	d10d      	bne.n	801011e <_dtoa_r+0x97e>
 8010102:	2b39      	cmp	r3, #57	; 0x39
 8010104:	d029      	beq.n	801015a <_dtoa_r+0x9ba>
 8010106:	f1ba 0f00 	cmp.w	sl, #0
 801010a:	dd01      	ble.n	8010110 <_dtoa_r+0x970>
 801010c:	9b05      	ldr	r3, [sp, #20]
 801010e:	3331      	adds	r3, #49	; 0x31
 8010110:	9a02      	ldr	r2, [sp, #8]
 8010112:	7013      	strb	r3, [r2, #0]
 8010114:	e774      	b.n	8010000 <_dtoa_r+0x860>
 8010116:	4638      	mov	r0, r7
 8010118:	e7b8      	b.n	801008c <_dtoa_r+0x8ec>
 801011a:	2201      	movs	r2, #1
 801011c:	e7e1      	b.n	80100e2 <_dtoa_r+0x942>
 801011e:	f1ba 0f00 	cmp.w	sl, #0
 8010122:	db06      	blt.n	8010132 <_dtoa_r+0x992>
 8010124:	9906      	ldr	r1, [sp, #24]
 8010126:	ea41 0a0a 	orr.w	sl, r1, sl
 801012a:	9907      	ldr	r1, [sp, #28]
 801012c:	ea5a 0101 	orrs.w	r1, sl, r1
 8010130:	d120      	bne.n	8010174 <_dtoa_r+0x9d4>
 8010132:	2a00      	cmp	r2, #0
 8010134:	ddec      	ble.n	8010110 <_dtoa_r+0x970>
 8010136:	4629      	mov	r1, r5
 8010138:	2201      	movs	r2, #1
 801013a:	4630      	mov	r0, r6
 801013c:	9304      	str	r3, [sp, #16]
 801013e:	f000 fcdf 	bl	8010b00 <__lshift>
 8010142:	4621      	mov	r1, r4
 8010144:	4605      	mov	r5, r0
 8010146:	f000 fd4b 	bl	8010be0 <__mcmp>
 801014a:	2800      	cmp	r0, #0
 801014c:	9b04      	ldr	r3, [sp, #16]
 801014e:	dc02      	bgt.n	8010156 <_dtoa_r+0x9b6>
 8010150:	d1de      	bne.n	8010110 <_dtoa_r+0x970>
 8010152:	07da      	lsls	r2, r3, #31
 8010154:	d5dc      	bpl.n	8010110 <_dtoa_r+0x970>
 8010156:	2b39      	cmp	r3, #57	; 0x39
 8010158:	d1d8      	bne.n	801010c <_dtoa_r+0x96c>
 801015a:	9a02      	ldr	r2, [sp, #8]
 801015c:	2339      	movs	r3, #57	; 0x39
 801015e:	7013      	strb	r3, [r2, #0]
 8010160:	4643      	mov	r3, r8
 8010162:	4698      	mov	r8, r3
 8010164:	3b01      	subs	r3, #1
 8010166:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801016a:	2a39      	cmp	r2, #57	; 0x39
 801016c:	d051      	beq.n	8010212 <_dtoa_r+0xa72>
 801016e:	3201      	adds	r2, #1
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	e745      	b.n	8010000 <_dtoa_r+0x860>
 8010174:	2a00      	cmp	r2, #0
 8010176:	dd03      	ble.n	8010180 <_dtoa_r+0x9e0>
 8010178:	2b39      	cmp	r3, #57	; 0x39
 801017a:	d0ee      	beq.n	801015a <_dtoa_r+0x9ba>
 801017c:	3301      	adds	r3, #1
 801017e:	e7c7      	b.n	8010110 <_dtoa_r+0x970>
 8010180:	9a04      	ldr	r2, [sp, #16]
 8010182:	9908      	ldr	r1, [sp, #32]
 8010184:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010188:	428a      	cmp	r2, r1
 801018a:	d02b      	beq.n	80101e4 <_dtoa_r+0xa44>
 801018c:	4629      	mov	r1, r5
 801018e:	2300      	movs	r3, #0
 8010190:	220a      	movs	r2, #10
 8010192:	4630      	mov	r0, r6
 8010194:	f000 fb04 	bl	80107a0 <__multadd>
 8010198:	45b9      	cmp	r9, r7
 801019a:	4605      	mov	r5, r0
 801019c:	f04f 0300 	mov.w	r3, #0
 80101a0:	f04f 020a 	mov.w	r2, #10
 80101a4:	4649      	mov	r1, r9
 80101a6:	4630      	mov	r0, r6
 80101a8:	d107      	bne.n	80101ba <_dtoa_r+0xa1a>
 80101aa:	f000 faf9 	bl	80107a0 <__multadd>
 80101ae:	4681      	mov	r9, r0
 80101b0:	4607      	mov	r7, r0
 80101b2:	9b04      	ldr	r3, [sp, #16]
 80101b4:	3301      	adds	r3, #1
 80101b6:	9304      	str	r3, [sp, #16]
 80101b8:	e774      	b.n	80100a4 <_dtoa_r+0x904>
 80101ba:	f000 faf1 	bl	80107a0 <__multadd>
 80101be:	4639      	mov	r1, r7
 80101c0:	4681      	mov	r9, r0
 80101c2:	2300      	movs	r3, #0
 80101c4:	220a      	movs	r2, #10
 80101c6:	4630      	mov	r0, r6
 80101c8:	f000 faea 	bl	80107a0 <__multadd>
 80101cc:	4607      	mov	r7, r0
 80101ce:	e7f0      	b.n	80101b2 <_dtoa_r+0xa12>
 80101d0:	f1ba 0f00 	cmp.w	sl, #0
 80101d4:	9a01      	ldr	r2, [sp, #4]
 80101d6:	bfcc      	ite	gt
 80101d8:	46d0      	movgt	r8, sl
 80101da:	f04f 0801 	movle.w	r8, #1
 80101de:	4490      	add	r8, r2
 80101e0:	f04f 0900 	mov.w	r9, #0
 80101e4:	4629      	mov	r1, r5
 80101e6:	2201      	movs	r2, #1
 80101e8:	4630      	mov	r0, r6
 80101ea:	9302      	str	r3, [sp, #8]
 80101ec:	f000 fc88 	bl	8010b00 <__lshift>
 80101f0:	4621      	mov	r1, r4
 80101f2:	4605      	mov	r5, r0
 80101f4:	f000 fcf4 	bl	8010be0 <__mcmp>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	dcb1      	bgt.n	8010160 <_dtoa_r+0x9c0>
 80101fc:	d102      	bne.n	8010204 <_dtoa_r+0xa64>
 80101fe:	9b02      	ldr	r3, [sp, #8]
 8010200:	07db      	lsls	r3, r3, #31
 8010202:	d4ad      	bmi.n	8010160 <_dtoa_r+0x9c0>
 8010204:	4643      	mov	r3, r8
 8010206:	4698      	mov	r8, r3
 8010208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801020c:	2a30      	cmp	r2, #48	; 0x30
 801020e:	d0fa      	beq.n	8010206 <_dtoa_r+0xa66>
 8010210:	e6f6      	b.n	8010000 <_dtoa_r+0x860>
 8010212:	9a01      	ldr	r2, [sp, #4]
 8010214:	429a      	cmp	r2, r3
 8010216:	d1a4      	bne.n	8010162 <_dtoa_r+0x9c2>
 8010218:	f10b 0b01 	add.w	fp, fp, #1
 801021c:	2331      	movs	r3, #49	; 0x31
 801021e:	e778      	b.n	8010112 <_dtoa_r+0x972>
 8010220:	4b14      	ldr	r3, [pc, #80]	; (8010274 <_dtoa_r+0xad4>)
 8010222:	f7ff bb27 	b.w	800f874 <_dtoa_r+0xd4>
 8010226:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010228:	2b00      	cmp	r3, #0
 801022a:	f47f ab03 	bne.w	800f834 <_dtoa_r+0x94>
 801022e:	4b12      	ldr	r3, [pc, #72]	; (8010278 <_dtoa_r+0xad8>)
 8010230:	f7ff bb20 	b.w	800f874 <_dtoa_r+0xd4>
 8010234:	f1ba 0f00 	cmp.w	sl, #0
 8010238:	dc03      	bgt.n	8010242 <_dtoa_r+0xaa2>
 801023a:	9b06      	ldr	r3, [sp, #24]
 801023c:	2b02      	cmp	r3, #2
 801023e:	f73f aec7 	bgt.w	800ffd0 <_dtoa_r+0x830>
 8010242:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010246:	4621      	mov	r1, r4
 8010248:	4628      	mov	r0, r5
 801024a:	f7ff fa1d 	bl	800f688 <quorem>
 801024e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010252:	f808 3b01 	strb.w	r3, [r8], #1
 8010256:	9a01      	ldr	r2, [sp, #4]
 8010258:	eba8 0202 	sub.w	r2, r8, r2
 801025c:	4592      	cmp	sl, r2
 801025e:	ddb7      	ble.n	80101d0 <_dtoa_r+0xa30>
 8010260:	4629      	mov	r1, r5
 8010262:	2300      	movs	r3, #0
 8010264:	220a      	movs	r2, #10
 8010266:	4630      	mov	r0, r6
 8010268:	f000 fa9a 	bl	80107a0 <__multadd>
 801026c:	4605      	mov	r5, r0
 801026e:	e7ea      	b.n	8010246 <_dtoa_r+0xaa6>
 8010270:	08012a97 	.word	0x08012a97
 8010274:	080129f4 	.word	0x080129f4
 8010278:	08012a18 	.word	0x08012a18

0801027c <__sflush_r>:
 801027c:	898a      	ldrh	r2, [r1, #12]
 801027e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010282:	4605      	mov	r5, r0
 8010284:	0710      	lsls	r0, r2, #28
 8010286:	460c      	mov	r4, r1
 8010288:	d458      	bmi.n	801033c <__sflush_r+0xc0>
 801028a:	684b      	ldr	r3, [r1, #4]
 801028c:	2b00      	cmp	r3, #0
 801028e:	dc05      	bgt.n	801029c <__sflush_r+0x20>
 8010290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010292:	2b00      	cmp	r3, #0
 8010294:	dc02      	bgt.n	801029c <__sflush_r+0x20>
 8010296:	2000      	movs	r0, #0
 8010298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801029c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801029e:	2e00      	cmp	r6, #0
 80102a0:	d0f9      	beq.n	8010296 <__sflush_r+0x1a>
 80102a2:	2300      	movs	r3, #0
 80102a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80102a8:	682f      	ldr	r7, [r5, #0]
 80102aa:	602b      	str	r3, [r5, #0]
 80102ac:	d032      	beq.n	8010314 <__sflush_r+0x98>
 80102ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	075a      	lsls	r2, r3, #29
 80102b4:	d505      	bpl.n	80102c2 <__sflush_r+0x46>
 80102b6:	6863      	ldr	r3, [r4, #4]
 80102b8:	1ac0      	subs	r0, r0, r3
 80102ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102bc:	b10b      	cbz	r3, 80102c2 <__sflush_r+0x46>
 80102be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102c0:	1ac0      	subs	r0, r0, r3
 80102c2:	2300      	movs	r3, #0
 80102c4:	4602      	mov	r2, r0
 80102c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102c8:	6a21      	ldr	r1, [r4, #32]
 80102ca:	4628      	mov	r0, r5
 80102cc:	47b0      	blx	r6
 80102ce:	1c43      	adds	r3, r0, #1
 80102d0:	89a3      	ldrh	r3, [r4, #12]
 80102d2:	d106      	bne.n	80102e2 <__sflush_r+0x66>
 80102d4:	6829      	ldr	r1, [r5, #0]
 80102d6:	291d      	cmp	r1, #29
 80102d8:	d82c      	bhi.n	8010334 <__sflush_r+0xb8>
 80102da:	4a2a      	ldr	r2, [pc, #168]	; (8010384 <__sflush_r+0x108>)
 80102dc:	40ca      	lsrs	r2, r1
 80102de:	07d6      	lsls	r6, r2, #31
 80102e0:	d528      	bpl.n	8010334 <__sflush_r+0xb8>
 80102e2:	2200      	movs	r2, #0
 80102e4:	6062      	str	r2, [r4, #4]
 80102e6:	04d9      	lsls	r1, r3, #19
 80102e8:	6922      	ldr	r2, [r4, #16]
 80102ea:	6022      	str	r2, [r4, #0]
 80102ec:	d504      	bpl.n	80102f8 <__sflush_r+0x7c>
 80102ee:	1c42      	adds	r2, r0, #1
 80102f0:	d101      	bne.n	80102f6 <__sflush_r+0x7a>
 80102f2:	682b      	ldr	r3, [r5, #0]
 80102f4:	b903      	cbnz	r3, 80102f8 <__sflush_r+0x7c>
 80102f6:	6560      	str	r0, [r4, #84]	; 0x54
 80102f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102fa:	602f      	str	r7, [r5, #0]
 80102fc:	2900      	cmp	r1, #0
 80102fe:	d0ca      	beq.n	8010296 <__sflush_r+0x1a>
 8010300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010304:	4299      	cmp	r1, r3
 8010306:	d002      	beq.n	801030e <__sflush_r+0x92>
 8010308:	4628      	mov	r0, r5
 801030a:	f7fe fb33 	bl	800e974 <_free_r>
 801030e:	2000      	movs	r0, #0
 8010310:	6360      	str	r0, [r4, #52]	; 0x34
 8010312:	e7c1      	b.n	8010298 <__sflush_r+0x1c>
 8010314:	6a21      	ldr	r1, [r4, #32]
 8010316:	2301      	movs	r3, #1
 8010318:	4628      	mov	r0, r5
 801031a:	47b0      	blx	r6
 801031c:	1c41      	adds	r1, r0, #1
 801031e:	d1c7      	bne.n	80102b0 <__sflush_r+0x34>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d0c4      	beq.n	80102b0 <__sflush_r+0x34>
 8010326:	2b1d      	cmp	r3, #29
 8010328:	d001      	beq.n	801032e <__sflush_r+0xb2>
 801032a:	2b16      	cmp	r3, #22
 801032c:	d101      	bne.n	8010332 <__sflush_r+0xb6>
 801032e:	602f      	str	r7, [r5, #0]
 8010330:	e7b1      	b.n	8010296 <__sflush_r+0x1a>
 8010332:	89a3      	ldrh	r3, [r4, #12]
 8010334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010338:	81a3      	strh	r3, [r4, #12]
 801033a:	e7ad      	b.n	8010298 <__sflush_r+0x1c>
 801033c:	690f      	ldr	r7, [r1, #16]
 801033e:	2f00      	cmp	r7, #0
 8010340:	d0a9      	beq.n	8010296 <__sflush_r+0x1a>
 8010342:	0793      	lsls	r3, r2, #30
 8010344:	680e      	ldr	r6, [r1, #0]
 8010346:	bf08      	it	eq
 8010348:	694b      	ldreq	r3, [r1, #20]
 801034a:	600f      	str	r7, [r1, #0]
 801034c:	bf18      	it	ne
 801034e:	2300      	movne	r3, #0
 8010350:	eba6 0807 	sub.w	r8, r6, r7
 8010354:	608b      	str	r3, [r1, #8]
 8010356:	f1b8 0f00 	cmp.w	r8, #0
 801035a:	dd9c      	ble.n	8010296 <__sflush_r+0x1a>
 801035c:	6a21      	ldr	r1, [r4, #32]
 801035e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010360:	4643      	mov	r3, r8
 8010362:	463a      	mov	r2, r7
 8010364:	4628      	mov	r0, r5
 8010366:	47b0      	blx	r6
 8010368:	2800      	cmp	r0, #0
 801036a:	dc06      	bgt.n	801037a <__sflush_r+0xfe>
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010372:	81a3      	strh	r3, [r4, #12]
 8010374:	f04f 30ff 	mov.w	r0, #4294967295
 8010378:	e78e      	b.n	8010298 <__sflush_r+0x1c>
 801037a:	4407      	add	r7, r0
 801037c:	eba8 0800 	sub.w	r8, r8, r0
 8010380:	e7e9      	b.n	8010356 <__sflush_r+0xda>
 8010382:	bf00      	nop
 8010384:	20400001 	.word	0x20400001

08010388 <_fflush_r>:
 8010388:	b538      	push	{r3, r4, r5, lr}
 801038a:	690b      	ldr	r3, [r1, #16]
 801038c:	4605      	mov	r5, r0
 801038e:	460c      	mov	r4, r1
 8010390:	b913      	cbnz	r3, 8010398 <_fflush_r+0x10>
 8010392:	2500      	movs	r5, #0
 8010394:	4628      	mov	r0, r5
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	b118      	cbz	r0, 80103a2 <_fflush_r+0x1a>
 801039a:	6983      	ldr	r3, [r0, #24]
 801039c:	b90b      	cbnz	r3, 80103a2 <_fflush_r+0x1a>
 801039e:	f000 f887 	bl	80104b0 <__sinit>
 80103a2:	4b14      	ldr	r3, [pc, #80]	; (80103f4 <_fflush_r+0x6c>)
 80103a4:	429c      	cmp	r4, r3
 80103a6:	d11b      	bne.n	80103e0 <_fflush_r+0x58>
 80103a8:	686c      	ldr	r4, [r5, #4]
 80103aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d0ef      	beq.n	8010392 <_fflush_r+0xa>
 80103b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103b4:	07d0      	lsls	r0, r2, #31
 80103b6:	d404      	bmi.n	80103c2 <_fflush_r+0x3a>
 80103b8:	0599      	lsls	r1, r3, #22
 80103ba:	d402      	bmi.n	80103c2 <_fflush_r+0x3a>
 80103bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103be:	f000 f91a 	bl	80105f6 <__retarget_lock_acquire_recursive>
 80103c2:	4628      	mov	r0, r5
 80103c4:	4621      	mov	r1, r4
 80103c6:	f7ff ff59 	bl	801027c <__sflush_r>
 80103ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103cc:	07da      	lsls	r2, r3, #31
 80103ce:	4605      	mov	r5, r0
 80103d0:	d4e0      	bmi.n	8010394 <_fflush_r+0xc>
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	059b      	lsls	r3, r3, #22
 80103d6:	d4dd      	bmi.n	8010394 <_fflush_r+0xc>
 80103d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103da:	f000 f90d 	bl	80105f8 <__retarget_lock_release_recursive>
 80103de:	e7d9      	b.n	8010394 <_fflush_r+0xc>
 80103e0:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <_fflush_r+0x70>)
 80103e2:	429c      	cmp	r4, r3
 80103e4:	d101      	bne.n	80103ea <_fflush_r+0x62>
 80103e6:	68ac      	ldr	r4, [r5, #8]
 80103e8:	e7df      	b.n	80103aa <_fflush_r+0x22>
 80103ea:	4b04      	ldr	r3, [pc, #16]	; (80103fc <_fflush_r+0x74>)
 80103ec:	429c      	cmp	r4, r3
 80103ee:	bf08      	it	eq
 80103f0:	68ec      	ldreq	r4, [r5, #12]
 80103f2:	e7da      	b.n	80103aa <_fflush_r+0x22>
 80103f4:	08012ac8 	.word	0x08012ac8
 80103f8:	08012ae8 	.word	0x08012ae8
 80103fc:	08012aa8 	.word	0x08012aa8

08010400 <std>:
 8010400:	2300      	movs	r3, #0
 8010402:	b510      	push	{r4, lr}
 8010404:	4604      	mov	r4, r0
 8010406:	e9c0 3300 	strd	r3, r3, [r0]
 801040a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801040e:	6083      	str	r3, [r0, #8]
 8010410:	8181      	strh	r1, [r0, #12]
 8010412:	6643      	str	r3, [r0, #100]	; 0x64
 8010414:	81c2      	strh	r2, [r0, #14]
 8010416:	6183      	str	r3, [r0, #24]
 8010418:	4619      	mov	r1, r3
 801041a:	2208      	movs	r2, #8
 801041c:	305c      	adds	r0, #92	; 0x5c
 801041e:	f7fe faa1 	bl	800e964 <memset>
 8010422:	4b05      	ldr	r3, [pc, #20]	; (8010438 <std+0x38>)
 8010424:	6263      	str	r3, [r4, #36]	; 0x24
 8010426:	4b05      	ldr	r3, [pc, #20]	; (801043c <std+0x3c>)
 8010428:	62a3      	str	r3, [r4, #40]	; 0x28
 801042a:	4b05      	ldr	r3, [pc, #20]	; (8010440 <std+0x40>)
 801042c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801042e:	4b05      	ldr	r3, [pc, #20]	; (8010444 <std+0x44>)
 8010430:	6224      	str	r4, [r4, #32]
 8010432:	6323      	str	r3, [r4, #48]	; 0x30
 8010434:	bd10      	pop	{r4, pc}
 8010436:	bf00      	nop
 8010438:	08011125 	.word	0x08011125
 801043c:	08011147 	.word	0x08011147
 8010440:	0801117f 	.word	0x0801117f
 8010444:	080111a3 	.word	0x080111a3

08010448 <_cleanup_r>:
 8010448:	4901      	ldr	r1, [pc, #4]	; (8010450 <_cleanup_r+0x8>)
 801044a:	f000 b8af 	b.w	80105ac <_fwalk_reent>
 801044e:	bf00      	nop
 8010450:	08010389 	.word	0x08010389

08010454 <__sfmoreglue>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	2268      	movs	r2, #104	; 0x68
 8010458:	1e4d      	subs	r5, r1, #1
 801045a:	4355      	muls	r5, r2
 801045c:	460e      	mov	r6, r1
 801045e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010462:	f7fe faf3 	bl	800ea4c <_malloc_r>
 8010466:	4604      	mov	r4, r0
 8010468:	b140      	cbz	r0, 801047c <__sfmoreglue+0x28>
 801046a:	2100      	movs	r1, #0
 801046c:	e9c0 1600 	strd	r1, r6, [r0]
 8010470:	300c      	adds	r0, #12
 8010472:	60a0      	str	r0, [r4, #8]
 8010474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010478:	f7fe fa74 	bl	800e964 <memset>
 801047c:	4620      	mov	r0, r4
 801047e:	bd70      	pop	{r4, r5, r6, pc}

08010480 <__sfp_lock_acquire>:
 8010480:	4801      	ldr	r0, [pc, #4]	; (8010488 <__sfp_lock_acquire+0x8>)
 8010482:	f000 b8b8 	b.w	80105f6 <__retarget_lock_acquire_recursive>
 8010486:	bf00      	nop
 8010488:	200018e5 	.word	0x200018e5

0801048c <__sfp_lock_release>:
 801048c:	4801      	ldr	r0, [pc, #4]	; (8010494 <__sfp_lock_release+0x8>)
 801048e:	f000 b8b3 	b.w	80105f8 <__retarget_lock_release_recursive>
 8010492:	bf00      	nop
 8010494:	200018e5 	.word	0x200018e5

08010498 <__sinit_lock_acquire>:
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <__sinit_lock_acquire+0x8>)
 801049a:	f000 b8ac 	b.w	80105f6 <__retarget_lock_acquire_recursive>
 801049e:	bf00      	nop
 80104a0:	200018e6 	.word	0x200018e6

080104a4 <__sinit_lock_release>:
 80104a4:	4801      	ldr	r0, [pc, #4]	; (80104ac <__sinit_lock_release+0x8>)
 80104a6:	f000 b8a7 	b.w	80105f8 <__retarget_lock_release_recursive>
 80104aa:	bf00      	nop
 80104ac:	200018e6 	.word	0x200018e6

080104b0 <__sinit>:
 80104b0:	b510      	push	{r4, lr}
 80104b2:	4604      	mov	r4, r0
 80104b4:	f7ff fff0 	bl	8010498 <__sinit_lock_acquire>
 80104b8:	69a3      	ldr	r3, [r4, #24]
 80104ba:	b11b      	cbz	r3, 80104c4 <__sinit+0x14>
 80104bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c0:	f7ff bff0 	b.w	80104a4 <__sinit_lock_release>
 80104c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104c8:	6523      	str	r3, [r4, #80]	; 0x50
 80104ca:	4b13      	ldr	r3, [pc, #76]	; (8010518 <__sinit+0x68>)
 80104cc:	4a13      	ldr	r2, [pc, #76]	; (801051c <__sinit+0x6c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80104d2:	42a3      	cmp	r3, r4
 80104d4:	bf04      	itt	eq
 80104d6:	2301      	moveq	r3, #1
 80104d8:	61a3      	streq	r3, [r4, #24]
 80104da:	4620      	mov	r0, r4
 80104dc:	f000 f820 	bl	8010520 <__sfp>
 80104e0:	6060      	str	r0, [r4, #4]
 80104e2:	4620      	mov	r0, r4
 80104e4:	f000 f81c 	bl	8010520 <__sfp>
 80104e8:	60a0      	str	r0, [r4, #8]
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 f818 	bl	8010520 <__sfp>
 80104f0:	2200      	movs	r2, #0
 80104f2:	60e0      	str	r0, [r4, #12]
 80104f4:	2104      	movs	r1, #4
 80104f6:	6860      	ldr	r0, [r4, #4]
 80104f8:	f7ff ff82 	bl	8010400 <std>
 80104fc:	68a0      	ldr	r0, [r4, #8]
 80104fe:	2201      	movs	r2, #1
 8010500:	2109      	movs	r1, #9
 8010502:	f7ff ff7d 	bl	8010400 <std>
 8010506:	68e0      	ldr	r0, [r4, #12]
 8010508:	2202      	movs	r2, #2
 801050a:	2112      	movs	r1, #18
 801050c:	f7ff ff78 	bl	8010400 <std>
 8010510:	2301      	movs	r3, #1
 8010512:	61a3      	str	r3, [r4, #24]
 8010514:	e7d2      	b.n	80104bc <__sinit+0xc>
 8010516:	bf00      	nop
 8010518:	080129e0 	.word	0x080129e0
 801051c:	08010449 	.word	0x08010449

08010520 <__sfp>:
 8010520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010522:	4607      	mov	r7, r0
 8010524:	f7ff ffac 	bl	8010480 <__sfp_lock_acquire>
 8010528:	4b1e      	ldr	r3, [pc, #120]	; (80105a4 <__sfp+0x84>)
 801052a:	681e      	ldr	r6, [r3, #0]
 801052c:	69b3      	ldr	r3, [r6, #24]
 801052e:	b913      	cbnz	r3, 8010536 <__sfp+0x16>
 8010530:	4630      	mov	r0, r6
 8010532:	f7ff ffbd 	bl	80104b0 <__sinit>
 8010536:	3648      	adds	r6, #72	; 0x48
 8010538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801053c:	3b01      	subs	r3, #1
 801053e:	d503      	bpl.n	8010548 <__sfp+0x28>
 8010540:	6833      	ldr	r3, [r6, #0]
 8010542:	b30b      	cbz	r3, 8010588 <__sfp+0x68>
 8010544:	6836      	ldr	r6, [r6, #0]
 8010546:	e7f7      	b.n	8010538 <__sfp+0x18>
 8010548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801054c:	b9d5      	cbnz	r5, 8010584 <__sfp+0x64>
 801054e:	4b16      	ldr	r3, [pc, #88]	; (80105a8 <__sfp+0x88>)
 8010550:	60e3      	str	r3, [r4, #12]
 8010552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010556:	6665      	str	r5, [r4, #100]	; 0x64
 8010558:	f000 f84c 	bl	80105f4 <__retarget_lock_init_recursive>
 801055c:	f7ff ff96 	bl	801048c <__sfp_lock_release>
 8010560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010568:	6025      	str	r5, [r4, #0]
 801056a:	61a5      	str	r5, [r4, #24]
 801056c:	2208      	movs	r2, #8
 801056e:	4629      	mov	r1, r5
 8010570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010574:	f7fe f9f6 	bl	800e964 <memset>
 8010578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801057c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010580:	4620      	mov	r0, r4
 8010582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010584:	3468      	adds	r4, #104	; 0x68
 8010586:	e7d9      	b.n	801053c <__sfp+0x1c>
 8010588:	2104      	movs	r1, #4
 801058a:	4638      	mov	r0, r7
 801058c:	f7ff ff62 	bl	8010454 <__sfmoreglue>
 8010590:	4604      	mov	r4, r0
 8010592:	6030      	str	r0, [r6, #0]
 8010594:	2800      	cmp	r0, #0
 8010596:	d1d5      	bne.n	8010544 <__sfp+0x24>
 8010598:	f7ff ff78 	bl	801048c <__sfp_lock_release>
 801059c:	230c      	movs	r3, #12
 801059e:	603b      	str	r3, [r7, #0]
 80105a0:	e7ee      	b.n	8010580 <__sfp+0x60>
 80105a2:	bf00      	nop
 80105a4:	080129e0 	.word	0x080129e0
 80105a8:	ffff0001 	.word	0xffff0001

080105ac <_fwalk_reent>:
 80105ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b0:	4606      	mov	r6, r0
 80105b2:	4688      	mov	r8, r1
 80105b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105b8:	2700      	movs	r7, #0
 80105ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105be:	f1b9 0901 	subs.w	r9, r9, #1
 80105c2:	d505      	bpl.n	80105d0 <_fwalk_reent+0x24>
 80105c4:	6824      	ldr	r4, [r4, #0]
 80105c6:	2c00      	cmp	r4, #0
 80105c8:	d1f7      	bne.n	80105ba <_fwalk_reent+0xe>
 80105ca:	4638      	mov	r0, r7
 80105cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105d0:	89ab      	ldrh	r3, [r5, #12]
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d907      	bls.n	80105e6 <_fwalk_reent+0x3a>
 80105d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105da:	3301      	adds	r3, #1
 80105dc:	d003      	beq.n	80105e6 <_fwalk_reent+0x3a>
 80105de:	4629      	mov	r1, r5
 80105e0:	4630      	mov	r0, r6
 80105e2:	47c0      	blx	r8
 80105e4:	4307      	orrs	r7, r0
 80105e6:	3568      	adds	r5, #104	; 0x68
 80105e8:	e7e9      	b.n	80105be <_fwalk_reent+0x12>
	...

080105ec <_localeconv_r>:
 80105ec:	4800      	ldr	r0, [pc, #0]	; (80105f0 <_localeconv_r+0x4>)
 80105ee:	4770      	bx	lr
 80105f0:	20001318 	.word	0x20001318

080105f4 <__retarget_lock_init_recursive>:
 80105f4:	4770      	bx	lr

080105f6 <__retarget_lock_acquire_recursive>:
 80105f6:	4770      	bx	lr

080105f8 <__retarget_lock_release_recursive>:
 80105f8:	4770      	bx	lr

080105fa <__swhatbuf_r>:
 80105fa:	b570      	push	{r4, r5, r6, lr}
 80105fc:	460e      	mov	r6, r1
 80105fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010602:	2900      	cmp	r1, #0
 8010604:	b096      	sub	sp, #88	; 0x58
 8010606:	4614      	mov	r4, r2
 8010608:	461d      	mov	r5, r3
 801060a:	da08      	bge.n	801061e <__swhatbuf_r+0x24>
 801060c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	602a      	str	r2, [r5, #0]
 8010614:	061a      	lsls	r2, r3, #24
 8010616:	d410      	bmi.n	801063a <__swhatbuf_r+0x40>
 8010618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061c:	e00e      	b.n	801063c <__swhatbuf_r+0x42>
 801061e:	466a      	mov	r2, sp
 8010620:	f000 fe16 	bl	8011250 <_fstat_r>
 8010624:	2800      	cmp	r0, #0
 8010626:	dbf1      	blt.n	801060c <__swhatbuf_r+0x12>
 8010628:	9a01      	ldr	r2, [sp, #4]
 801062a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801062e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010632:	425a      	negs	r2, r3
 8010634:	415a      	adcs	r2, r3
 8010636:	602a      	str	r2, [r5, #0]
 8010638:	e7ee      	b.n	8010618 <__swhatbuf_r+0x1e>
 801063a:	2340      	movs	r3, #64	; 0x40
 801063c:	2000      	movs	r0, #0
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	b016      	add	sp, #88	; 0x58
 8010642:	bd70      	pop	{r4, r5, r6, pc}

08010644 <__smakebuf_r>:
 8010644:	898b      	ldrh	r3, [r1, #12]
 8010646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010648:	079d      	lsls	r5, r3, #30
 801064a:	4606      	mov	r6, r0
 801064c:	460c      	mov	r4, r1
 801064e:	d507      	bpl.n	8010660 <__smakebuf_r+0x1c>
 8010650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	6123      	str	r3, [r4, #16]
 8010658:	2301      	movs	r3, #1
 801065a:	6163      	str	r3, [r4, #20]
 801065c:	b002      	add	sp, #8
 801065e:	bd70      	pop	{r4, r5, r6, pc}
 8010660:	ab01      	add	r3, sp, #4
 8010662:	466a      	mov	r2, sp
 8010664:	f7ff ffc9 	bl	80105fa <__swhatbuf_r>
 8010668:	9900      	ldr	r1, [sp, #0]
 801066a:	4605      	mov	r5, r0
 801066c:	4630      	mov	r0, r6
 801066e:	f7fe f9ed 	bl	800ea4c <_malloc_r>
 8010672:	b948      	cbnz	r0, 8010688 <__smakebuf_r+0x44>
 8010674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010678:	059a      	lsls	r2, r3, #22
 801067a:	d4ef      	bmi.n	801065c <__smakebuf_r+0x18>
 801067c:	f023 0303 	bic.w	r3, r3, #3
 8010680:	f043 0302 	orr.w	r3, r3, #2
 8010684:	81a3      	strh	r3, [r4, #12]
 8010686:	e7e3      	b.n	8010650 <__smakebuf_r+0xc>
 8010688:	4b0d      	ldr	r3, [pc, #52]	; (80106c0 <__smakebuf_r+0x7c>)
 801068a:	62b3      	str	r3, [r6, #40]	; 0x28
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	6020      	str	r0, [r4, #0]
 8010690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010694:	81a3      	strh	r3, [r4, #12]
 8010696:	9b00      	ldr	r3, [sp, #0]
 8010698:	6163      	str	r3, [r4, #20]
 801069a:	9b01      	ldr	r3, [sp, #4]
 801069c:	6120      	str	r0, [r4, #16]
 801069e:	b15b      	cbz	r3, 80106b8 <__smakebuf_r+0x74>
 80106a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106a4:	4630      	mov	r0, r6
 80106a6:	f000 fde5 	bl	8011274 <_isatty_r>
 80106aa:	b128      	cbz	r0, 80106b8 <__smakebuf_r+0x74>
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	f023 0303 	bic.w	r3, r3, #3
 80106b2:	f043 0301 	orr.w	r3, r3, #1
 80106b6:	81a3      	strh	r3, [r4, #12]
 80106b8:	89a0      	ldrh	r0, [r4, #12]
 80106ba:	4305      	orrs	r5, r0
 80106bc:	81a5      	strh	r5, [r4, #12]
 80106be:	e7cd      	b.n	801065c <__smakebuf_r+0x18>
 80106c0:	08010449 	.word	0x08010449

080106c4 <__malloc_lock>:
 80106c4:	4801      	ldr	r0, [pc, #4]	; (80106cc <__malloc_lock+0x8>)
 80106c6:	f7ff bf96 	b.w	80105f6 <__retarget_lock_acquire_recursive>
 80106ca:	bf00      	nop
 80106cc:	200018e4 	.word	0x200018e4

080106d0 <__malloc_unlock>:
 80106d0:	4801      	ldr	r0, [pc, #4]	; (80106d8 <__malloc_unlock+0x8>)
 80106d2:	f7ff bf91 	b.w	80105f8 <__retarget_lock_release_recursive>
 80106d6:	bf00      	nop
 80106d8:	200018e4 	.word	0x200018e4

080106dc <_Balloc>:
 80106dc:	b570      	push	{r4, r5, r6, lr}
 80106de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106e0:	4604      	mov	r4, r0
 80106e2:	460d      	mov	r5, r1
 80106e4:	b976      	cbnz	r6, 8010704 <_Balloc+0x28>
 80106e6:	2010      	movs	r0, #16
 80106e8:	f7fe f91e 	bl	800e928 <malloc>
 80106ec:	4602      	mov	r2, r0
 80106ee:	6260      	str	r0, [r4, #36]	; 0x24
 80106f0:	b920      	cbnz	r0, 80106fc <_Balloc+0x20>
 80106f2:	4b18      	ldr	r3, [pc, #96]	; (8010754 <_Balloc+0x78>)
 80106f4:	4818      	ldr	r0, [pc, #96]	; (8010758 <_Balloc+0x7c>)
 80106f6:	2166      	movs	r1, #102	; 0x66
 80106f8:	f000 fd6a 	bl	80111d0 <__assert_func>
 80106fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010700:	6006      	str	r6, [r0, #0]
 8010702:	60c6      	str	r6, [r0, #12]
 8010704:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010706:	68f3      	ldr	r3, [r6, #12]
 8010708:	b183      	cbz	r3, 801072c <_Balloc+0x50>
 801070a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010712:	b9b8      	cbnz	r0, 8010744 <_Balloc+0x68>
 8010714:	2101      	movs	r1, #1
 8010716:	fa01 f605 	lsl.w	r6, r1, r5
 801071a:	1d72      	adds	r2, r6, #5
 801071c:	0092      	lsls	r2, r2, #2
 801071e:	4620      	mov	r0, r4
 8010720:	f000 fb60 	bl	8010de4 <_calloc_r>
 8010724:	b160      	cbz	r0, 8010740 <_Balloc+0x64>
 8010726:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801072a:	e00e      	b.n	801074a <_Balloc+0x6e>
 801072c:	2221      	movs	r2, #33	; 0x21
 801072e:	2104      	movs	r1, #4
 8010730:	4620      	mov	r0, r4
 8010732:	f000 fb57 	bl	8010de4 <_calloc_r>
 8010736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010738:	60f0      	str	r0, [r6, #12]
 801073a:	68db      	ldr	r3, [r3, #12]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1e4      	bne.n	801070a <_Balloc+0x2e>
 8010740:	2000      	movs	r0, #0
 8010742:	bd70      	pop	{r4, r5, r6, pc}
 8010744:	6802      	ldr	r2, [r0, #0]
 8010746:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801074a:	2300      	movs	r3, #0
 801074c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010750:	e7f7      	b.n	8010742 <_Balloc+0x66>
 8010752:	bf00      	nop
 8010754:	08012a25 	.word	0x08012a25
 8010758:	08012b08 	.word	0x08012b08

0801075c <_Bfree>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010760:	4605      	mov	r5, r0
 8010762:	460c      	mov	r4, r1
 8010764:	b976      	cbnz	r6, 8010784 <_Bfree+0x28>
 8010766:	2010      	movs	r0, #16
 8010768:	f7fe f8de 	bl	800e928 <malloc>
 801076c:	4602      	mov	r2, r0
 801076e:	6268      	str	r0, [r5, #36]	; 0x24
 8010770:	b920      	cbnz	r0, 801077c <_Bfree+0x20>
 8010772:	4b09      	ldr	r3, [pc, #36]	; (8010798 <_Bfree+0x3c>)
 8010774:	4809      	ldr	r0, [pc, #36]	; (801079c <_Bfree+0x40>)
 8010776:	218a      	movs	r1, #138	; 0x8a
 8010778:	f000 fd2a 	bl	80111d0 <__assert_func>
 801077c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010780:	6006      	str	r6, [r0, #0]
 8010782:	60c6      	str	r6, [r0, #12]
 8010784:	b13c      	cbz	r4, 8010796 <_Bfree+0x3a>
 8010786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010788:	6862      	ldr	r2, [r4, #4]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010790:	6021      	str	r1, [r4, #0]
 8010792:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	08012a25 	.word	0x08012a25
 801079c:	08012b08 	.word	0x08012b08

080107a0 <__multadd>:
 80107a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a4:	690d      	ldr	r5, [r1, #16]
 80107a6:	4607      	mov	r7, r0
 80107a8:	460c      	mov	r4, r1
 80107aa:	461e      	mov	r6, r3
 80107ac:	f101 0c14 	add.w	ip, r1, #20
 80107b0:	2000      	movs	r0, #0
 80107b2:	f8dc 3000 	ldr.w	r3, [ip]
 80107b6:	b299      	uxth	r1, r3
 80107b8:	fb02 6101 	mla	r1, r2, r1, r6
 80107bc:	0c1e      	lsrs	r6, r3, #16
 80107be:	0c0b      	lsrs	r3, r1, #16
 80107c0:	fb02 3306 	mla	r3, r2, r6, r3
 80107c4:	b289      	uxth	r1, r1
 80107c6:	3001      	adds	r0, #1
 80107c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107cc:	4285      	cmp	r5, r0
 80107ce:	f84c 1b04 	str.w	r1, [ip], #4
 80107d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107d6:	dcec      	bgt.n	80107b2 <__multadd+0x12>
 80107d8:	b30e      	cbz	r6, 801081e <__multadd+0x7e>
 80107da:	68a3      	ldr	r3, [r4, #8]
 80107dc:	42ab      	cmp	r3, r5
 80107de:	dc19      	bgt.n	8010814 <__multadd+0x74>
 80107e0:	6861      	ldr	r1, [r4, #4]
 80107e2:	4638      	mov	r0, r7
 80107e4:	3101      	adds	r1, #1
 80107e6:	f7ff ff79 	bl	80106dc <_Balloc>
 80107ea:	4680      	mov	r8, r0
 80107ec:	b928      	cbnz	r0, 80107fa <__multadd+0x5a>
 80107ee:	4602      	mov	r2, r0
 80107f0:	4b0c      	ldr	r3, [pc, #48]	; (8010824 <__multadd+0x84>)
 80107f2:	480d      	ldr	r0, [pc, #52]	; (8010828 <__multadd+0x88>)
 80107f4:	21b5      	movs	r1, #181	; 0xb5
 80107f6:	f000 fceb 	bl	80111d0 <__assert_func>
 80107fa:	6922      	ldr	r2, [r4, #16]
 80107fc:	3202      	adds	r2, #2
 80107fe:	f104 010c 	add.w	r1, r4, #12
 8010802:	0092      	lsls	r2, r2, #2
 8010804:	300c      	adds	r0, #12
 8010806:	f7fe f89f 	bl	800e948 <memcpy>
 801080a:	4621      	mov	r1, r4
 801080c:	4638      	mov	r0, r7
 801080e:	f7ff ffa5 	bl	801075c <_Bfree>
 8010812:	4644      	mov	r4, r8
 8010814:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010818:	3501      	adds	r5, #1
 801081a:	615e      	str	r6, [r3, #20]
 801081c:	6125      	str	r5, [r4, #16]
 801081e:	4620      	mov	r0, r4
 8010820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010824:	08012a97 	.word	0x08012a97
 8010828:	08012b08 	.word	0x08012b08

0801082c <__hi0bits>:
 801082c:	0c03      	lsrs	r3, r0, #16
 801082e:	041b      	lsls	r3, r3, #16
 8010830:	b9d3      	cbnz	r3, 8010868 <__hi0bits+0x3c>
 8010832:	0400      	lsls	r0, r0, #16
 8010834:	2310      	movs	r3, #16
 8010836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801083a:	bf04      	itt	eq
 801083c:	0200      	lsleq	r0, r0, #8
 801083e:	3308      	addeq	r3, #8
 8010840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010844:	bf04      	itt	eq
 8010846:	0100      	lsleq	r0, r0, #4
 8010848:	3304      	addeq	r3, #4
 801084a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801084e:	bf04      	itt	eq
 8010850:	0080      	lsleq	r0, r0, #2
 8010852:	3302      	addeq	r3, #2
 8010854:	2800      	cmp	r0, #0
 8010856:	db05      	blt.n	8010864 <__hi0bits+0x38>
 8010858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801085c:	f103 0301 	add.w	r3, r3, #1
 8010860:	bf08      	it	eq
 8010862:	2320      	moveq	r3, #32
 8010864:	4618      	mov	r0, r3
 8010866:	4770      	bx	lr
 8010868:	2300      	movs	r3, #0
 801086a:	e7e4      	b.n	8010836 <__hi0bits+0xa>

0801086c <__lo0bits>:
 801086c:	6803      	ldr	r3, [r0, #0]
 801086e:	f013 0207 	ands.w	r2, r3, #7
 8010872:	4601      	mov	r1, r0
 8010874:	d00b      	beq.n	801088e <__lo0bits+0x22>
 8010876:	07da      	lsls	r2, r3, #31
 8010878:	d423      	bmi.n	80108c2 <__lo0bits+0x56>
 801087a:	0798      	lsls	r0, r3, #30
 801087c:	bf49      	itett	mi
 801087e:	085b      	lsrmi	r3, r3, #1
 8010880:	089b      	lsrpl	r3, r3, #2
 8010882:	2001      	movmi	r0, #1
 8010884:	600b      	strmi	r3, [r1, #0]
 8010886:	bf5c      	itt	pl
 8010888:	600b      	strpl	r3, [r1, #0]
 801088a:	2002      	movpl	r0, #2
 801088c:	4770      	bx	lr
 801088e:	b298      	uxth	r0, r3
 8010890:	b9a8      	cbnz	r0, 80108be <__lo0bits+0x52>
 8010892:	0c1b      	lsrs	r3, r3, #16
 8010894:	2010      	movs	r0, #16
 8010896:	b2da      	uxtb	r2, r3
 8010898:	b90a      	cbnz	r2, 801089e <__lo0bits+0x32>
 801089a:	3008      	adds	r0, #8
 801089c:	0a1b      	lsrs	r3, r3, #8
 801089e:	071a      	lsls	r2, r3, #28
 80108a0:	bf04      	itt	eq
 80108a2:	091b      	lsreq	r3, r3, #4
 80108a4:	3004      	addeq	r0, #4
 80108a6:	079a      	lsls	r2, r3, #30
 80108a8:	bf04      	itt	eq
 80108aa:	089b      	lsreq	r3, r3, #2
 80108ac:	3002      	addeq	r0, #2
 80108ae:	07da      	lsls	r2, r3, #31
 80108b0:	d403      	bmi.n	80108ba <__lo0bits+0x4e>
 80108b2:	085b      	lsrs	r3, r3, #1
 80108b4:	f100 0001 	add.w	r0, r0, #1
 80108b8:	d005      	beq.n	80108c6 <__lo0bits+0x5a>
 80108ba:	600b      	str	r3, [r1, #0]
 80108bc:	4770      	bx	lr
 80108be:	4610      	mov	r0, r2
 80108c0:	e7e9      	b.n	8010896 <__lo0bits+0x2a>
 80108c2:	2000      	movs	r0, #0
 80108c4:	4770      	bx	lr
 80108c6:	2020      	movs	r0, #32
 80108c8:	4770      	bx	lr
	...

080108cc <__i2b>:
 80108cc:	b510      	push	{r4, lr}
 80108ce:	460c      	mov	r4, r1
 80108d0:	2101      	movs	r1, #1
 80108d2:	f7ff ff03 	bl	80106dc <_Balloc>
 80108d6:	4602      	mov	r2, r0
 80108d8:	b928      	cbnz	r0, 80108e6 <__i2b+0x1a>
 80108da:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <__i2b+0x24>)
 80108dc:	4805      	ldr	r0, [pc, #20]	; (80108f4 <__i2b+0x28>)
 80108de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80108e2:	f000 fc75 	bl	80111d0 <__assert_func>
 80108e6:	2301      	movs	r3, #1
 80108e8:	6144      	str	r4, [r0, #20]
 80108ea:	6103      	str	r3, [r0, #16]
 80108ec:	bd10      	pop	{r4, pc}
 80108ee:	bf00      	nop
 80108f0:	08012a97 	.word	0x08012a97
 80108f4:	08012b08 	.word	0x08012b08

080108f8 <__multiply>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	4691      	mov	r9, r2
 80108fe:	690a      	ldr	r2, [r1, #16]
 8010900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010904:	429a      	cmp	r2, r3
 8010906:	bfb8      	it	lt
 8010908:	460b      	movlt	r3, r1
 801090a:	460c      	mov	r4, r1
 801090c:	bfbc      	itt	lt
 801090e:	464c      	movlt	r4, r9
 8010910:	4699      	movlt	r9, r3
 8010912:	6927      	ldr	r7, [r4, #16]
 8010914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010918:	68a3      	ldr	r3, [r4, #8]
 801091a:	6861      	ldr	r1, [r4, #4]
 801091c:	eb07 060a 	add.w	r6, r7, sl
 8010920:	42b3      	cmp	r3, r6
 8010922:	b085      	sub	sp, #20
 8010924:	bfb8      	it	lt
 8010926:	3101      	addlt	r1, #1
 8010928:	f7ff fed8 	bl	80106dc <_Balloc>
 801092c:	b930      	cbnz	r0, 801093c <__multiply+0x44>
 801092e:	4602      	mov	r2, r0
 8010930:	4b44      	ldr	r3, [pc, #272]	; (8010a44 <__multiply+0x14c>)
 8010932:	4845      	ldr	r0, [pc, #276]	; (8010a48 <__multiply+0x150>)
 8010934:	f240 115d 	movw	r1, #349	; 0x15d
 8010938:	f000 fc4a 	bl	80111d0 <__assert_func>
 801093c:	f100 0514 	add.w	r5, r0, #20
 8010940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010944:	462b      	mov	r3, r5
 8010946:	2200      	movs	r2, #0
 8010948:	4543      	cmp	r3, r8
 801094a:	d321      	bcc.n	8010990 <__multiply+0x98>
 801094c:	f104 0314 	add.w	r3, r4, #20
 8010950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010954:	f109 0314 	add.w	r3, r9, #20
 8010958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801095c:	9202      	str	r2, [sp, #8]
 801095e:	1b3a      	subs	r2, r7, r4
 8010960:	3a15      	subs	r2, #21
 8010962:	f022 0203 	bic.w	r2, r2, #3
 8010966:	3204      	adds	r2, #4
 8010968:	f104 0115 	add.w	r1, r4, #21
 801096c:	428f      	cmp	r7, r1
 801096e:	bf38      	it	cc
 8010970:	2204      	movcc	r2, #4
 8010972:	9201      	str	r2, [sp, #4]
 8010974:	9a02      	ldr	r2, [sp, #8]
 8010976:	9303      	str	r3, [sp, #12]
 8010978:	429a      	cmp	r2, r3
 801097a:	d80c      	bhi.n	8010996 <__multiply+0x9e>
 801097c:	2e00      	cmp	r6, #0
 801097e:	dd03      	ble.n	8010988 <__multiply+0x90>
 8010980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010984:	2b00      	cmp	r3, #0
 8010986:	d05a      	beq.n	8010a3e <__multiply+0x146>
 8010988:	6106      	str	r6, [r0, #16]
 801098a:	b005      	add	sp, #20
 801098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010990:	f843 2b04 	str.w	r2, [r3], #4
 8010994:	e7d8      	b.n	8010948 <__multiply+0x50>
 8010996:	f8b3 a000 	ldrh.w	sl, [r3]
 801099a:	f1ba 0f00 	cmp.w	sl, #0
 801099e:	d024      	beq.n	80109ea <__multiply+0xf2>
 80109a0:	f104 0e14 	add.w	lr, r4, #20
 80109a4:	46a9      	mov	r9, r5
 80109a6:	f04f 0c00 	mov.w	ip, #0
 80109aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80109ae:	f8d9 1000 	ldr.w	r1, [r9]
 80109b2:	fa1f fb82 	uxth.w	fp, r2
 80109b6:	b289      	uxth	r1, r1
 80109b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80109bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80109c0:	f8d9 2000 	ldr.w	r2, [r9]
 80109c4:	4461      	add	r1, ip
 80109c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80109ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109d2:	b289      	uxth	r1, r1
 80109d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109d8:	4577      	cmp	r7, lr
 80109da:	f849 1b04 	str.w	r1, [r9], #4
 80109de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109e2:	d8e2      	bhi.n	80109aa <__multiply+0xb2>
 80109e4:	9a01      	ldr	r2, [sp, #4]
 80109e6:	f845 c002 	str.w	ip, [r5, r2]
 80109ea:	9a03      	ldr	r2, [sp, #12]
 80109ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80109f0:	3304      	adds	r3, #4
 80109f2:	f1b9 0f00 	cmp.w	r9, #0
 80109f6:	d020      	beq.n	8010a3a <__multiply+0x142>
 80109f8:	6829      	ldr	r1, [r5, #0]
 80109fa:	f104 0c14 	add.w	ip, r4, #20
 80109fe:	46ae      	mov	lr, r5
 8010a00:	f04f 0a00 	mov.w	sl, #0
 8010a04:	f8bc b000 	ldrh.w	fp, [ip]
 8010a08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010a0c:	fb09 220b 	mla	r2, r9, fp, r2
 8010a10:	4492      	add	sl, r2
 8010a12:	b289      	uxth	r1, r1
 8010a14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010a18:	f84e 1b04 	str.w	r1, [lr], #4
 8010a1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a20:	f8be 1000 	ldrh.w	r1, [lr]
 8010a24:	0c12      	lsrs	r2, r2, #16
 8010a26:	fb09 1102 	mla	r1, r9, r2, r1
 8010a2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010a2e:	4567      	cmp	r7, ip
 8010a30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a34:	d8e6      	bhi.n	8010a04 <__multiply+0x10c>
 8010a36:	9a01      	ldr	r2, [sp, #4]
 8010a38:	50a9      	str	r1, [r5, r2]
 8010a3a:	3504      	adds	r5, #4
 8010a3c:	e79a      	b.n	8010974 <__multiply+0x7c>
 8010a3e:	3e01      	subs	r6, #1
 8010a40:	e79c      	b.n	801097c <__multiply+0x84>
 8010a42:	bf00      	nop
 8010a44:	08012a97 	.word	0x08012a97
 8010a48:	08012b08 	.word	0x08012b08

08010a4c <__pow5mult>:
 8010a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a50:	4615      	mov	r5, r2
 8010a52:	f012 0203 	ands.w	r2, r2, #3
 8010a56:	4606      	mov	r6, r0
 8010a58:	460f      	mov	r7, r1
 8010a5a:	d007      	beq.n	8010a6c <__pow5mult+0x20>
 8010a5c:	4c25      	ldr	r4, [pc, #148]	; (8010af4 <__pow5mult+0xa8>)
 8010a5e:	3a01      	subs	r2, #1
 8010a60:	2300      	movs	r3, #0
 8010a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a66:	f7ff fe9b 	bl	80107a0 <__multadd>
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	10ad      	asrs	r5, r5, #2
 8010a6e:	d03d      	beq.n	8010aec <__pow5mult+0xa0>
 8010a70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a72:	b97c      	cbnz	r4, 8010a94 <__pow5mult+0x48>
 8010a74:	2010      	movs	r0, #16
 8010a76:	f7fd ff57 	bl	800e928 <malloc>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	6270      	str	r0, [r6, #36]	; 0x24
 8010a7e:	b928      	cbnz	r0, 8010a8c <__pow5mult+0x40>
 8010a80:	4b1d      	ldr	r3, [pc, #116]	; (8010af8 <__pow5mult+0xac>)
 8010a82:	481e      	ldr	r0, [pc, #120]	; (8010afc <__pow5mult+0xb0>)
 8010a84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010a88:	f000 fba2 	bl	80111d0 <__assert_func>
 8010a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a90:	6004      	str	r4, [r0, #0]
 8010a92:	60c4      	str	r4, [r0, #12]
 8010a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a9c:	b94c      	cbnz	r4, 8010ab2 <__pow5mult+0x66>
 8010a9e:	f240 2171 	movw	r1, #625	; 0x271
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff ff12 	bl	80108cc <__i2b>
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8010aae:	4604      	mov	r4, r0
 8010ab0:	6003      	str	r3, [r0, #0]
 8010ab2:	f04f 0900 	mov.w	r9, #0
 8010ab6:	07eb      	lsls	r3, r5, #31
 8010ab8:	d50a      	bpl.n	8010ad0 <__pow5mult+0x84>
 8010aba:	4639      	mov	r1, r7
 8010abc:	4622      	mov	r2, r4
 8010abe:	4630      	mov	r0, r6
 8010ac0:	f7ff ff1a 	bl	80108f8 <__multiply>
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4680      	mov	r8, r0
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f7ff fe47 	bl	801075c <_Bfree>
 8010ace:	4647      	mov	r7, r8
 8010ad0:	106d      	asrs	r5, r5, #1
 8010ad2:	d00b      	beq.n	8010aec <__pow5mult+0xa0>
 8010ad4:	6820      	ldr	r0, [r4, #0]
 8010ad6:	b938      	cbnz	r0, 8010ae8 <__pow5mult+0x9c>
 8010ad8:	4622      	mov	r2, r4
 8010ada:	4621      	mov	r1, r4
 8010adc:	4630      	mov	r0, r6
 8010ade:	f7ff ff0b 	bl	80108f8 <__multiply>
 8010ae2:	6020      	str	r0, [r4, #0]
 8010ae4:	f8c0 9000 	str.w	r9, [r0]
 8010ae8:	4604      	mov	r4, r0
 8010aea:	e7e4      	b.n	8010ab6 <__pow5mult+0x6a>
 8010aec:	4638      	mov	r0, r7
 8010aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010af2:	bf00      	nop
 8010af4:	08012c58 	.word	0x08012c58
 8010af8:	08012a25 	.word	0x08012a25
 8010afc:	08012b08 	.word	0x08012b08

08010b00 <__lshift>:
 8010b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b04:	460c      	mov	r4, r1
 8010b06:	6849      	ldr	r1, [r1, #4]
 8010b08:	6923      	ldr	r3, [r4, #16]
 8010b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b0e:	68a3      	ldr	r3, [r4, #8]
 8010b10:	4607      	mov	r7, r0
 8010b12:	4691      	mov	r9, r2
 8010b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b18:	f108 0601 	add.w	r6, r8, #1
 8010b1c:	42b3      	cmp	r3, r6
 8010b1e:	db0b      	blt.n	8010b38 <__lshift+0x38>
 8010b20:	4638      	mov	r0, r7
 8010b22:	f7ff fddb 	bl	80106dc <_Balloc>
 8010b26:	4605      	mov	r5, r0
 8010b28:	b948      	cbnz	r0, 8010b3e <__lshift+0x3e>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	4b2a      	ldr	r3, [pc, #168]	; (8010bd8 <__lshift+0xd8>)
 8010b2e:	482b      	ldr	r0, [pc, #172]	; (8010bdc <__lshift+0xdc>)
 8010b30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010b34:	f000 fb4c 	bl	80111d0 <__assert_func>
 8010b38:	3101      	adds	r1, #1
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	e7ee      	b.n	8010b1c <__lshift+0x1c>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f100 0114 	add.w	r1, r0, #20
 8010b44:	f100 0210 	add.w	r2, r0, #16
 8010b48:	4618      	mov	r0, r3
 8010b4a:	4553      	cmp	r3, sl
 8010b4c:	db37      	blt.n	8010bbe <__lshift+0xbe>
 8010b4e:	6920      	ldr	r0, [r4, #16]
 8010b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b54:	f104 0314 	add.w	r3, r4, #20
 8010b58:	f019 091f 	ands.w	r9, r9, #31
 8010b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b64:	d02f      	beq.n	8010bc6 <__lshift+0xc6>
 8010b66:	f1c9 0e20 	rsb	lr, r9, #32
 8010b6a:	468a      	mov	sl, r1
 8010b6c:	f04f 0c00 	mov.w	ip, #0
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	fa02 f209 	lsl.w	r2, r2, r9
 8010b76:	ea42 020c 	orr.w	r2, r2, ip
 8010b7a:	f84a 2b04 	str.w	r2, [sl], #4
 8010b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b82:	4298      	cmp	r0, r3
 8010b84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010b88:	d8f2      	bhi.n	8010b70 <__lshift+0x70>
 8010b8a:	1b03      	subs	r3, r0, r4
 8010b8c:	3b15      	subs	r3, #21
 8010b8e:	f023 0303 	bic.w	r3, r3, #3
 8010b92:	3304      	adds	r3, #4
 8010b94:	f104 0215 	add.w	r2, r4, #21
 8010b98:	4290      	cmp	r0, r2
 8010b9a:	bf38      	it	cc
 8010b9c:	2304      	movcc	r3, #4
 8010b9e:	f841 c003 	str.w	ip, [r1, r3]
 8010ba2:	f1bc 0f00 	cmp.w	ip, #0
 8010ba6:	d001      	beq.n	8010bac <__lshift+0xac>
 8010ba8:	f108 0602 	add.w	r6, r8, #2
 8010bac:	3e01      	subs	r6, #1
 8010bae:	4638      	mov	r0, r7
 8010bb0:	612e      	str	r6, [r5, #16]
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	f7ff fdd2 	bl	801075c <_Bfree>
 8010bb8:	4628      	mov	r0, r5
 8010bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	e7c1      	b.n	8010b4a <__lshift+0x4a>
 8010bc6:	3904      	subs	r1, #4
 8010bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bd0:	4298      	cmp	r0, r3
 8010bd2:	d8f9      	bhi.n	8010bc8 <__lshift+0xc8>
 8010bd4:	e7ea      	b.n	8010bac <__lshift+0xac>
 8010bd6:	bf00      	nop
 8010bd8:	08012a97 	.word	0x08012a97
 8010bdc:	08012b08 	.word	0x08012b08

08010be0 <__mcmp>:
 8010be0:	b530      	push	{r4, r5, lr}
 8010be2:	6902      	ldr	r2, [r0, #16]
 8010be4:	690c      	ldr	r4, [r1, #16]
 8010be6:	1b12      	subs	r2, r2, r4
 8010be8:	d10e      	bne.n	8010c08 <__mcmp+0x28>
 8010bea:	f100 0314 	add.w	r3, r0, #20
 8010bee:	3114      	adds	r1, #20
 8010bf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010bf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010bf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010bfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010c00:	42a5      	cmp	r5, r4
 8010c02:	d003      	beq.n	8010c0c <__mcmp+0x2c>
 8010c04:	d305      	bcc.n	8010c12 <__mcmp+0x32>
 8010c06:	2201      	movs	r2, #1
 8010c08:	4610      	mov	r0, r2
 8010c0a:	bd30      	pop	{r4, r5, pc}
 8010c0c:	4283      	cmp	r3, r0
 8010c0e:	d3f3      	bcc.n	8010bf8 <__mcmp+0x18>
 8010c10:	e7fa      	b.n	8010c08 <__mcmp+0x28>
 8010c12:	f04f 32ff 	mov.w	r2, #4294967295
 8010c16:	e7f7      	b.n	8010c08 <__mcmp+0x28>

08010c18 <__mdiff>:
 8010c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	460c      	mov	r4, r1
 8010c1e:	4606      	mov	r6, r0
 8010c20:	4611      	mov	r1, r2
 8010c22:	4620      	mov	r0, r4
 8010c24:	4690      	mov	r8, r2
 8010c26:	f7ff ffdb 	bl	8010be0 <__mcmp>
 8010c2a:	1e05      	subs	r5, r0, #0
 8010c2c:	d110      	bne.n	8010c50 <__mdiff+0x38>
 8010c2e:	4629      	mov	r1, r5
 8010c30:	4630      	mov	r0, r6
 8010c32:	f7ff fd53 	bl	80106dc <_Balloc>
 8010c36:	b930      	cbnz	r0, 8010c46 <__mdiff+0x2e>
 8010c38:	4b3a      	ldr	r3, [pc, #232]	; (8010d24 <__mdiff+0x10c>)
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	f240 2132 	movw	r1, #562	; 0x232
 8010c40:	4839      	ldr	r0, [pc, #228]	; (8010d28 <__mdiff+0x110>)
 8010c42:	f000 fac5 	bl	80111d0 <__assert_func>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c50:	bfa4      	itt	ge
 8010c52:	4643      	movge	r3, r8
 8010c54:	46a0      	movge	r8, r4
 8010c56:	4630      	mov	r0, r6
 8010c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c5c:	bfa6      	itte	ge
 8010c5e:	461c      	movge	r4, r3
 8010c60:	2500      	movge	r5, #0
 8010c62:	2501      	movlt	r5, #1
 8010c64:	f7ff fd3a 	bl	80106dc <_Balloc>
 8010c68:	b920      	cbnz	r0, 8010c74 <__mdiff+0x5c>
 8010c6a:	4b2e      	ldr	r3, [pc, #184]	; (8010d24 <__mdiff+0x10c>)
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c72:	e7e5      	b.n	8010c40 <__mdiff+0x28>
 8010c74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c78:	6926      	ldr	r6, [r4, #16]
 8010c7a:	60c5      	str	r5, [r0, #12]
 8010c7c:	f104 0914 	add.w	r9, r4, #20
 8010c80:	f108 0514 	add.w	r5, r8, #20
 8010c84:	f100 0e14 	add.w	lr, r0, #20
 8010c88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c90:	f108 0210 	add.w	r2, r8, #16
 8010c94:	46f2      	mov	sl, lr
 8010c96:	2100      	movs	r1, #0
 8010c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ca0:	fa1f f883 	uxth.w	r8, r3
 8010ca4:	fa11 f18b 	uxtah	r1, r1, fp
 8010ca8:	0c1b      	lsrs	r3, r3, #16
 8010caa:	eba1 0808 	sub.w	r8, r1, r8
 8010cae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010cb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010cb6:	fa1f f888 	uxth.w	r8, r8
 8010cba:	1419      	asrs	r1, r3, #16
 8010cbc:	454e      	cmp	r6, r9
 8010cbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010cc2:	f84a 3b04 	str.w	r3, [sl], #4
 8010cc6:	d8e7      	bhi.n	8010c98 <__mdiff+0x80>
 8010cc8:	1b33      	subs	r3, r6, r4
 8010cca:	3b15      	subs	r3, #21
 8010ccc:	f023 0303 	bic.w	r3, r3, #3
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	3415      	adds	r4, #21
 8010cd4:	42a6      	cmp	r6, r4
 8010cd6:	bf38      	it	cc
 8010cd8:	2304      	movcc	r3, #4
 8010cda:	441d      	add	r5, r3
 8010cdc:	4473      	add	r3, lr
 8010cde:	469e      	mov	lr, r3
 8010ce0:	462e      	mov	r6, r5
 8010ce2:	4566      	cmp	r6, ip
 8010ce4:	d30e      	bcc.n	8010d04 <__mdiff+0xec>
 8010ce6:	f10c 0203 	add.w	r2, ip, #3
 8010cea:	1b52      	subs	r2, r2, r5
 8010cec:	f022 0203 	bic.w	r2, r2, #3
 8010cf0:	3d03      	subs	r5, #3
 8010cf2:	45ac      	cmp	ip, r5
 8010cf4:	bf38      	it	cc
 8010cf6:	2200      	movcc	r2, #0
 8010cf8:	441a      	add	r2, r3
 8010cfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010cfe:	b17b      	cbz	r3, 8010d20 <__mdiff+0x108>
 8010d00:	6107      	str	r7, [r0, #16]
 8010d02:	e7a3      	b.n	8010c4c <__mdiff+0x34>
 8010d04:	f856 8b04 	ldr.w	r8, [r6], #4
 8010d08:	fa11 f288 	uxtah	r2, r1, r8
 8010d0c:	1414      	asrs	r4, r2, #16
 8010d0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010d12:	b292      	uxth	r2, r2
 8010d14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010d18:	f84e 2b04 	str.w	r2, [lr], #4
 8010d1c:	1421      	asrs	r1, r4, #16
 8010d1e:	e7e0      	b.n	8010ce2 <__mdiff+0xca>
 8010d20:	3f01      	subs	r7, #1
 8010d22:	e7ea      	b.n	8010cfa <__mdiff+0xe2>
 8010d24:	08012a97 	.word	0x08012a97
 8010d28:	08012b08 	.word	0x08012b08

08010d2c <__d2b>:
 8010d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d30:	4689      	mov	r9, r1
 8010d32:	2101      	movs	r1, #1
 8010d34:	ec57 6b10 	vmov	r6, r7, d0
 8010d38:	4690      	mov	r8, r2
 8010d3a:	f7ff fccf 	bl	80106dc <_Balloc>
 8010d3e:	4604      	mov	r4, r0
 8010d40:	b930      	cbnz	r0, 8010d50 <__d2b+0x24>
 8010d42:	4602      	mov	r2, r0
 8010d44:	4b25      	ldr	r3, [pc, #148]	; (8010ddc <__d2b+0xb0>)
 8010d46:	4826      	ldr	r0, [pc, #152]	; (8010de0 <__d2b+0xb4>)
 8010d48:	f240 310a 	movw	r1, #778	; 0x30a
 8010d4c:	f000 fa40 	bl	80111d0 <__assert_func>
 8010d50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010d54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d58:	bb35      	cbnz	r5, 8010da8 <__d2b+0x7c>
 8010d5a:	2e00      	cmp	r6, #0
 8010d5c:	9301      	str	r3, [sp, #4]
 8010d5e:	d028      	beq.n	8010db2 <__d2b+0x86>
 8010d60:	4668      	mov	r0, sp
 8010d62:	9600      	str	r6, [sp, #0]
 8010d64:	f7ff fd82 	bl	801086c <__lo0bits>
 8010d68:	9900      	ldr	r1, [sp, #0]
 8010d6a:	b300      	cbz	r0, 8010dae <__d2b+0x82>
 8010d6c:	9a01      	ldr	r2, [sp, #4]
 8010d6e:	f1c0 0320 	rsb	r3, r0, #32
 8010d72:	fa02 f303 	lsl.w	r3, r2, r3
 8010d76:	430b      	orrs	r3, r1
 8010d78:	40c2      	lsrs	r2, r0
 8010d7a:	6163      	str	r3, [r4, #20]
 8010d7c:	9201      	str	r2, [sp, #4]
 8010d7e:	9b01      	ldr	r3, [sp, #4]
 8010d80:	61a3      	str	r3, [r4, #24]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bf14      	ite	ne
 8010d86:	2202      	movne	r2, #2
 8010d88:	2201      	moveq	r2, #1
 8010d8a:	6122      	str	r2, [r4, #16]
 8010d8c:	b1d5      	cbz	r5, 8010dc4 <__d2b+0x98>
 8010d8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d92:	4405      	add	r5, r0
 8010d94:	f8c9 5000 	str.w	r5, [r9]
 8010d98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d9c:	f8c8 0000 	str.w	r0, [r8]
 8010da0:	4620      	mov	r0, r4
 8010da2:	b003      	add	sp, #12
 8010da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010dac:	e7d5      	b.n	8010d5a <__d2b+0x2e>
 8010dae:	6161      	str	r1, [r4, #20]
 8010db0:	e7e5      	b.n	8010d7e <__d2b+0x52>
 8010db2:	a801      	add	r0, sp, #4
 8010db4:	f7ff fd5a 	bl	801086c <__lo0bits>
 8010db8:	9b01      	ldr	r3, [sp, #4]
 8010dba:	6163      	str	r3, [r4, #20]
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	6122      	str	r2, [r4, #16]
 8010dc0:	3020      	adds	r0, #32
 8010dc2:	e7e3      	b.n	8010d8c <__d2b+0x60>
 8010dc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010dc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010dcc:	f8c9 0000 	str.w	r0, [r9]
 8010dd0:	6918      	ldr	r0, [r3, #16]
 8010dd2:	f7ff fd2b 	bl	801082c <__hi0bits>
 8010dd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010dda:	e7df      	b.n	8010d9c <__d2b+0x70>
 8010ddc:	08012a97 	.word	0x08012a97
 8010de0:	08012b08 	.word	0x08012b08

08010de4 <_calloc_r>:
 8010de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010de6:	fba1 2402 	umull	r2, r4, r1, r2
 8010dea:	b94c      	cbnz	r4, 8010e00 <_calloc_r+0x1c>
 8010dec:	4611      	mov	r1, r2
 8010dee:	9201      	str	r2, [sp, #4]
 8010df0:	f7fd fe2c 	bl	800ea4c <_malloc_r>
 8010df4:	9a01      	ldr	r2, [sp, #4]
 8010df6:	4605      	mov	r5, r0
 8010df8:	b930      	cbnz	r0, 8010e08 <_calloc_r+0x24>
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	b003      	add	sp, #12
 8010dfe:	bd30      	pop	{r4, r5, pc}
 8010e00:	220c      	movs	r2, #12
 8010e02:	6002      	str	r2, [r0, #0]
 8010e04:	2500      	movs	r5, #0
 8010e06:	e7f8      	b.n	8010dfa <_calloc_r+0x16>
 8010e08:	4621      	mov	r1, r4
 8010e0a:	f7fd fdab 	bl	800e964 <memset>
 8010e0e:	e7f4      	b.n	8010dfa <_calloc_r+0x16>

08010e10 <_realloc_r>:
 8010e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e14:	4680      	mov	r8, r0
 8010e16:	4614      	mov	r4, r2
 8010e18:	460e      	mov	r6, r1
 8010e1a:	b921      	cbnz	r1, 8010e26 <_realloc_r+0x16>
 8010e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	4611      	mov	r1, r2
 8010e22:	f7fd be13 	b.w	800ea4c <_malloc_r>
 8010e26:	b92a      	cbnz	r2, 8010e34 <_realloc_r+0x24>
 8010e28:	f7fd fda4 	bl	800e974 <_free_r>
 8010e2c:	4625      	mov	r5, r4
 8010e2e:	4628      	mov	r0, r5
 8010e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e34:	f000 fa6c 	bl	8011310 <_malloc_usable_size_r>
 8010e38:	4284      	cmp	r4, r0
 8010e3a:	4607      	mov	r7, r0
 8010e3c:	d802      	bhi.n	8010e44 <_realloc_r+0x34>
 8010e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e42:	d812      	bhi.n	8010e6a <_realloc_r+0x5a>
 8010e44:	4621      	mov	r1, r4
 8010e46:	4640      	mov	r0, r8
 8010e48:	f7fd fe00 	bl	800ea4c <_malloc_r>
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d0ed      	beq.n	8010e2e <_realloc_r+0x1e>
 8010e52:	42bc      	cmp	r4, r7
 8010e54:	4622      	mov	r2, r4
 8010e56:	4631      	mov	r1, r6
 8010e58:	bf28      	it	cs
 8010e5a:	463a      	movcs	r2, r7
 8010e5c:	f7fd fd74 	bl	800e948 <memcpy>
 8010e60:	4631      	mov	r1, r6
 8010e62:	4640      	mov	r0, r8
 8010e64:	f7fd fd86 	bl	800e974 <_free_r>
 8010e68:	e7e1      	b.n	8010e2e <_realloc_r+0x1e>
 8010e6a:	4635      	mov	r5, r6
 8010e6c:	e7df      	b.n	8010e2e <_realloc_r+0x1e>

08010e6e <__ssputs_r>:
 8010e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e72:	688e      	ldr	r6, [r1, #8]
 8010e74:	429e      	cmp	r6, r3
 8010e76:	4682      	mov	sl, r0
 8010e78:	460c      	mov	r4, r1
 8010e7a:	4690      	mov	r8, r2
 8010e7c:	461f      	mov	r7, r3
 8010e7e:	d838      	bhi.n	8010ef2 <__ssputs_r+0x84>
 8010e80:	898a      	ldrh	r2, [r1, #12]
 8010e82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e86:	d032      	beq.n	8010eee <__ssputs_r+0x80>
 8010e88:	6825      	ldr	r5, [r4, #0]
 8010e8a:	6909      	ldr	r1, [r1, #16]
 8010e8c:	eba5 0901 	sub.w	r9, r5, r1
 8010e90:	6965      	ldr	r5, [r4, #20]
 8010e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	444b      	add	r3, r9
 8010e9e:	106d      	asrs	r5, r5, #1
 8010ea0:	429d      	cmp	r5, r3
 8010ea2:	bf38      	it	cc
 8010ea4:	461d      	movcc	r5, r3
 8010ea6:	0553      	lsls	r3, r2, #21
 8010ea8:	d531      	bpl.n	8010f0e <__ssputs_r+0xa0>
 8010eaa:	4629      	mov	r1, r5
 8010eac:	f7fd fdce 	bl	800ea4c <_malloc_r>
 8010eb0:	4606      	mov	r6, r0
 8010eb2:	b950      	cbnz	r0, 8010eca <__ssputs_r+0x5c>
 8010eb4:	230c      	movs	r3, #12
 8010eb6:	f8ca 3000 	str.w	r3, [sl]
 8010eba:	89a3      	ldrh	r3, [r4, #12]
 8010ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ec0:	81a3      	strh	r3, [r4, #12]
 8010ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eca:	6921      	ldr	r1, [r4, #16]
 8010ecc:	464a      	mov	r2, r9
 8010ece:	f7fd fd3b 	bl	800e948 <memcpy>
 8010ed2:	89a3      	ldrh	r3, [r4, #12]
 8010ed4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010edc:	81a3      	strh	r3, [r4, #12]
 8010ede:	6126      	str	r6, [r4, #16]
 8010ee0:	6165      	str	r5, [r4, #20]
 8010ee2:	444e      	add	r6, r9
 8010ee4:	eba5 0509 	sub.w	r5, r5, r9
 8010ee8:	6026      	str	r6, [r4, #0]
 8010eea:	60a5      	str	r5, [r4, #8]
 8010eec:	463e      	mov	r6, r7
 8010eee:	42be      	cmp	r6, r7
 8010ef0:	d900      	bls.n	8010ef4 <__ssputs_r+0x86>
 8010ef2:	463e      	mov	r6, r7
 8010ef4:	6820      	ldr	r0, [r4, #0]
 8010ef6:	4632      	mov	r2, r6
 8010ef8:	4641      	mov	r1, r8
 8010efa:	f000 f9ef 	bl	80112dc <memmove>
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	1b9b      	subs	r3, r3, r6
 8010f02:	60a3      	str	r3, [r4, #8]
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	4433      	add	r3, r6
 8010f08:	6023      	str	r3, [r4, #0]
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	e7db      	b.n	8010ec6 <__ssputs_r+0x58>
 8010f0e:	462a      	mov	r2, r5
 8010f10:	f7ff ff7e 	bl	8010e10 <_realloc_r>
 8010f14:	4606      	mov	r6, r0
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d1e1      	bne.n	8010ede <__ssputs_r+0x70>
 8010f1a:	6921      	ldr	r1, [r4, #16]
 8010f1c:	4650      	mov	r0, sl
 8010f1e:	f7fd fd29 	bl	800e974 <_free_r>
 8010f22:	e7c7      	b.n	8010eb4 <__ssputs_r+0x46>

08010f24 <_svfiprintf_r>:
 8010f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f28:	4698      	mov	r8, r3
 8010f2a:	898b      	ldrh	r3, [r1, #12]
 8010f2c:	061b      	lsls	r3, r3, #24
 8010f2e:	b09d      	sub	sp, #116	; 0x74
 8010f30:	4607      	mov	r7, r0
 8010f32:	460d      	mov	r5, r1
 8010f34:	4614      	mov	r4, r2
 8010f36:	d50e      	bpl.n	8010f56 <_svfiprintf_r+0x32>
 8010f38:	690b      	ldr	r3, [r1, #16]
 8010f3a:	b963      	cbnz	r3, 8010f56 <_svfiprintf_r+0x32>
 8010f3c:	2140      	movs	r1, #64	; 0x40
 8010f3e:	f7fd fd85 	bl	800ea4c <_malloc_r>
 8010f42:	6028      	str	r0, [r5, #0]
 8010f44:	6128      	str	r0, [r5, #16]
 8010f46:	b920      	cbnz	r0, 8010f52 <_svfiprintf_r+0x2e>
 8010f48:	230c      	movs	r3, #12
 8010f4a:	603b      	str	r3, [r7, #0]
 8010f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f50:	e0d1      	b.n	80110f6 <_svfiprintf_r+0x1d2>
 8010f52:	2340      	movs	r3, #64	; 0x40
 8010f54:	616b      	str	r3, [r5, #20]
 8010f56:	2300      	movs	r3, #0
 8010f58:	9309      	str	r3, [sp, #36]	; 0x24
 8010f5a:	2320      	movs	r3, #32
 8010f5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f64:	2330      	movs	r3, #48	; 0x30
 8010f66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011110 <_svfiprintf_r+0x1ec>
 8010f6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f6e:	f04f 0901 	mov.w	r9, #1
 8010f72:	4623      	mov	r3, r4
 8010f74:	469a      	mov	sl, r3
 8010f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f7a:	b10a      	cbz	r2, 8010f80 <_svfiprintf_r+0x5c>
 8010f7c:	2a25      	cmp	r2, #37	; 0x25
 8010f7e:	d1f9      	bne.n	8010f74 <_svfiprintf_r+0x50>
 8010f80:	ebba 0b04 	subs.w	fp, sl, r4
 8010f84:	d00b      	beq.n	8010f9e <_svfiprintf_r+0x7a>
 8010f86:	465b      	mov	r3, fp
 8010f88:	4622      	mov	r2, r4
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	4638      	mov	r0, r7
 8010f8e:	f7ff ff6e 	bl	8010e6e <__ssputs_r>
 8010f92:	3001      	adds	r0, #1
 8010f94:	f000 80aa 	beq.w	80110ec <_svfiprintf_r+0x1c8>
 8010f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f9a:	445a      	add	r2, fp
 8010f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8010f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f000 80a2 	beq.w	80110ec <_svfiprintf_r+0x1c8>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f04f 32ff 	mov.w	r2, #4294967295
 8010fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fb2:	f10a 0a01 	add.w	sl, sl, #1
 8010fb6:	9304      	str	r3, [sp, #16]
 8010fb8:	9307      	str	r3, [sp, #28]
 8010fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8010fc0:	4654      	mov	r4, sl
 8010fc2:	2205      	movs	r2, #5
 8010fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc8:	4851      	ldr	r0, [pc, #324]	; (8011110 <_svfiprintf_r+0x1ec>)
 8010fca:	f7ef f941 	bl	8000250 <memchr>
 8010fce:	9a04      	ldr	r2, [sp, #16]
 8010fd0:	b9d8      	cbnz	r0, 801100a <_svfiprintf_r+0xe6>
 8010fd2:	06d0      	lsls	r0, r2, #27
 8010fd4:	bf44      	itt	mi
 8010fd6:	2320      	movmi	r3, #32
 8010fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fdc:	0711      	lsls	r1, r2, #28
 8010fde:	bf44      	itt	mi
 8010fe0:	232b      	movmi	r3, #43	; 0x2b
 8010fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8010fea:	2b2a      	cmp	r3, #42	; 0x2a
 8010fec:	d015      	beq.n	801101a <_svfiprintf_r+0xf6>
 8010fee:	9a07      	ldr	r2, [sp, #28]
 8010ff0:	4654      	mov	r4, sl
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	f04f 0c0a 	mov.w	ip, #10
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ffe:	3b30      	subs	r3, #48	; 0x30
 8011000:	2b09      	cmp	r3, #9
 8011002:	d94e      	bls.n	80110a2 <_svfiprintf_r+0x17e>
 8011004:	b1b0      	cbz	r0, 8011034 <_svfiprintf_r+0x110>
 8011006:	9207      	str	r2, [sp, #28]
 8011008:	e014      	b.n	8011034 <_svfiprintf_r+0x110>
 801100a:	eba0 0308 	sub.w	r3, r0, r8
 801100e:	fa09 f303 	lsl.w	r3, r9, r3
 8011012:	4313      	orrs	r3, r2
 8011014:	9304      	str	r3, [sp, #16]
 8011016:	46a2      	mov	sl, r4
 8011018:	e7d2      	b.n	8010fc0 <_svfiprintf_r+0x9c>
 801101a:	9b03      	ldr	r3, [sp, #12]
 801101c:	1d19      	adds	r1, r3, #4
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	9103      	str	r1, [sp, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	bfbb      	ittet	lt
 8011026:	425b      	neglt	r3, r3
 8011028:	f042 0202 	orrlt.w	r2, r2, #2
 801102c:	9307      	strge	r3, [sp, #28]
 801102e:	9307      	strlt	r3, [sp, #28]
 8011030:	bfb8      	it	lt
 8011032:	9204      	strlt	r2, [sp, #16]
 8011034:	7823      	ldrb	r3, [r4, #0]
 8011036:	2b2e      	cmp	r3, #46	; 0x2e
 8011038:	d10c      	bne.n	8011054 <_svfiprintf_r+0x130>
 801103a:	7863      	ldrb	r3, [r4, #1]
 801103c:	2b2a      	cmp	r3, #42	; 0x2a
 801103e:	d135      	bne.n	80110ac <_svfiprintf_r+0x188>
 8011040:	9b03      	ldr	r3, [sp, #12]
 8011042:	1d1a      	adds	r2, r3, #4
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	9203      	str	r2, [sp, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	bfb8      	it	lt
 801104c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011050:	3402      	adds	r4, #2
 8011052:	9305      	str	r3, [sp, #20]
 8011054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011120 <_svfiprintf_r+0x1fc>
 8011058:	7821      	ldrb	r1, [r4, #0]
 801105a:	2203      	movs	r2, #3
 801105c:	4650      	mov	r0, sl
 801105e:	f7ef f8f7 	bl	8000250 <memchr>
 8011062:	b140      	cbz	r0, 8011076 <_svfiprintf_r+0x152>
 8011064:	2340      	movs	r3, #64	; 0x40
 8011066:	eba0 000a 	sub.w	r0, r0, sl
 801106a:	fa03 f000 	lsl.w	r0, r3, r0
 801106e:	9b04      	ldr	r3, [sp, #16]
 8011070:	4303      	orrs	r3, r0
 8011072:	3401      	adds	r4, #1
 8011074:	9304      	str	r3, [sp, #16]
 8011076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801107a:	4826      	ldr	r0, [pc, #152]	; (8011114 <_svfiprintf_r+0x1f0>)
 801107c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011080:	2206      	movs	r2, #6
 8011082:	f7ef f8e5 	bl	8000250 <memchr>
 8011086:	2800      	cmp	r0, #0
 8011088:	d038      	beq.n	80110fc <_svfiprintf_r+0x1d8>
 801108a:	4b23      	ldr	r3, [pc, #140]	; (8011118 <_svfiprintf_r+0x1f4>)
 801108c:	bb1b      	cbnz	r3, 80110d6 <_svfiprintf_r+0x1b2>
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	3307      	adds	r3, #7
 8011092:	f023 0307 	bic.w	r3, r3, #7
 8011096:	3308      	adds	r3, #8
 8011098:	9303      	str	r3, [sp, #12]
 801109a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801109c:	4433      	add	r3, r6
 801109e:	9309      	str	r3, [sp, #36]	; 0x24
 80110a0:	e767      	b.n	8010f72 <_svfiprintf_r+0x4e>
 80110a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80110a6:	460c      	mov	r4, r1
 80110a8:	2001      	movs	r0, #1
 80110aa:	e7a5      	b.n	8010ff8 <_svfiprintf_r+0xd4>
 80110ac:	2300      	movs	r3, #0
 80110ae:	3401      	adds	r4, #1
 80110b0:	9305      	str	r3, [sp, #20]
 80110b2:	4619      	mov	r1, r3
 80110b4:	f04f 0c0a 	mov.w	ip, #10
 80110b8:	4620      	mov	r0, r4
 80110ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110be:	3a30      	subs	r2, #48	; 0x30
 80110c0:	2a09      	cmp	r2, #9
 80110c2:	d903      	bls.n	80110cc <_svfiprintf_r+0x1a8>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d0c5      	beq.n	8011054 <_svfiprintf_r+0x130>
 80110c8:	9105      	str	r1, [sp, #20]
 80110ca:	e7c3      	b.n	8011054 <_svfiprintf_r+0x130>
 80110cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80110d0:	4604      	mov	r4, r0
 80110d2:	2301      	movs	r3, #1
 80110d4:	e7f0      	b.n	80110b8 <_svfiprintf_r+0x194>
 80110d6:	ab03      	add	r3, sp, #12
 80110d8:	9300      	str	r3, [sp, #0]
 80110da:	462a      	mov	r2, r5
 80110dc:	4b0f      	ldr	r3, [pc, #60]	; (801111c <_svfiprintf_r+0x1f8>)
 80110de:	a904      	add	r1, sp, #16
 80110e0:	4638      	mov	r0, r7
 80110e2:	f7fd fdb9 	bl	800ec58 <_printf_float>
 80110e6:	1c42      	adds	r2, r0, #1
 80110e8:	4606      	mov	r6, r0
 80110ea:	d1d6      	bne.n	801109a <_svfiprintf_r+0x176>
 80110ec:	89ab      	ldrh	r3, [r5, #12]
 80110ee:	065b      	lsls	r3, r3, #25
 80110f0:	f53f af2c 	bmi.w	8010f4c <_svfiprintf_r+0x28>
 80110f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110f6:	b01d      	add	sp, #116	; 0x74
 80110f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fc:	ab03      	add	r3, sp, #12
 80110fe:	9300      	str	r3, [sp, #0]
 8011100:	462a      	mov	r2, r5
 8011102:	4b06      	ldr	r3, [pc, #24]	; (801111c <_svfiprintf_r+0x1f8>)
 8011104:	a904      	add	r1, sp, #16
 8011106:	4638      	mov	r0, r7
 8011108:	f7fe f832 	bl	800f170 <_printf_i>
 801110c:	e7eb      	b.n	80110e6 <_svfiprintf_r+0x1c2>
 801110e:	bf00      	nop
 8011110:	08012c64 	.word	0x08012c64
 8011114:	08012c6e 	.word	0x08012c6e
 8011118:	0800ec59 	.word	0x0800ec59
 801111c:	08010e6f 	.word	0x08010e6f
 8011120:	08012c6a 	.word	0x08012c6a

08011124 <__sread>:
 8011124:	b510      	push	{r4, lr}
 8011126:	460c      	mov	r4, r1
 8011128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801112c:	f000 fa52 	bl	80115d4 <_read_r>
 8011130:	2800      	cmp	r0, #0
 8011132:	bfab      	itete	ge
 8011134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011136:	89a3      	ldrhlt	r3, [r4, #12]
 8011138:	181b      	addge	r3, r3, r0
 801113a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801113e:	bfac      	ite	ge
 8011140:	6563      	strge	r3, [r4, #84]	; 0x54
 8011142:	81a3      	strhlt	r3, [r4, #12]
 8011144:	bd10      	pop	{r4, pc}

08011146 <__swrite>:
 8011146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114a:	461f      	mov	r7, r3
 801114c:	898b      	ldrh	r3, [r1, #12]
 801114e:	05db      	lsls	r3, r3, #23
 8011150:	4605      	mov	r5, r0
 8011152:	460c      	mov	r4, r1
 8011154:	4616      	mov	r6, r2
 8011156:	d505      	bpl.n	8011164 <__swrite+0x1e>
 8011158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801115c:	2302      	movs	r3, #2
 801115e:	2200      	movs	r2, #0
 8011160:	f000 f898 	bl	8011294 <_lseek_r>
 8011164:	89a3      	ldrh	r3, [r4, #12]
 8011166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801116a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801116e:	81a3      	strh	r3, [r4, #12]
 8011170:	4632      	mov	r2, r6
 8011172:	463b      	mov	r3, r7
 8011174:	4628      	mov	r0, r5
 8011176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801117a:	f000 b817 	b.w	80111ac <_write_r>

0801117e <__sseek>:
 801117e:	b510      	push	{r4, lr}
 8011180:	460c      	mov	r4, r1
 8011182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011186:	f000 f885 	bl	8011294 <_lseek_r>
 801118a:	1c43      	adds	r3, r0, #1
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	bf15      	itete	ne
 8011190:	6560      	strne	r0, [r4, #84]	; 0x54
 8011192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801119a:	81a3      	strheq	r3, [r4, #12]
 801119c:	bf18      	it	ne
 801119e:	81a3      	strhne	r3, [r4, #12]
 80111a0:	bd10      	pop	{r4, pc}

080111a2 <__sclose>:
 80111a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a6:	f000 b831 	b.w	801120c <_close_r>
	...

080111ac <_write_r>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	4d07      	ldr	r5, [pc, #28]	; (80111cc <_write_r+0x20>)
 80111b0:	4604      	mov	r4, r0
 80111b2:	4608      	mov	r0, r1
 80111b4:	4611      	mov	r1, r2
 80111b6:	2200      	movs	r2, #0
 80111b8:	602a      	str	r2, [r5, #0]
 80111ba:	461a      	mov	r2, r3
 80111bc:	f7f1 f849 	bl	8002252 <_write>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d102      	bne.n	80111ca <_write_r+0x1e>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	b103      	cbz	r3, 80111ca <_write_r+0x1e>
 80111c8:	6023      	str	r3, [r4, #0]
 80111ca:	bd38      	pop	{r3, r4, r5, pc}
 80111cc:	200018e8 	.word	0x200018e8

080111d0 <__assert_func>:
 80111d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111d2:	4614      	mov	r4, r2
 80111d4:	461a      	mov	r2, r3
 80111d6:	4b09      	ldr	r3, [pc, #36]	; (80111fc <__assert_func+0x2c>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	4605      	mov	r5, r0
 80111dc:	68d8      	ldr	r0, [r3, #12]
 80111de:	b14c      	cbz	r4, 80111f4 <__assert_func+0x24>
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <__assert_func+0x30>)
 80111e2:	9100      	str	r1, [sp, #0]
 80111e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111e8:	4906      	ldr	r1, [pc, #24]	; (8011204 <__assert_func+0x34>)
 80111ea:	462b      	mov	r3, r5
 80111ec:	f000 f81e 	bl	801122c <fiprintf>
 80111f0:	f000 fa0f 	bl	8011612 <abort>
 80111f4:	4b04      	ldr	r3, [pc, #16]	; (8011208 <__assert_func+0x38>)
 80111f6:	461c      	mov	r4, r3
 80111f8:	e7f3      	b.n	80111e2 <__assert_func+0x12>
 80111fa:	bf00      	nop
 80111fc:	200011c4 	.word	0x200011c4
 8011200:	08012c75 	.word	0x08012c75
 8011204:	08012c82 	.word	0x08012c82
 8011208:	08012cb0 	.word	0x08012cb0

0801120c <_close_r>:
 801120c:	b538      	push	{r3, r4, r5, lr}
 801120e:	4d06      	ldr	r5, [pc, #24]	; (8011228 <_close_r+0x1c>)
 8011210:	2300      	movs	r3, #0
 8011212:	4604      	mov	r4, r0
 8011214:	4608      	mov	r0, r1
 8011216:	602b      	str	r3, [r5, #0]
 8011218:	f7f1 f837 	bl	800228a <_close>
 801121c:	1c43      	adds	r3, r0, #1
 801121e:	d102      	bne.n	8011226 <_close_r+0x1a>
 8011220:	682b      	ldr	r3, [r5, #0]
 8011222:	b103      	cbz	r3, 8011226 <_close_r+0x1a>
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	bd38      	pop	{r3, r4, r5, pc}
 8011228:	200018e8 	.word	0x200018e8

0801122c <fiprintf>:
 801122c:	b40e      	push	{r1, r2, r3}
 801122e:	b503      	push	{r0, r1, lr}
 8011230:	4601      	mov	r1, r0
 8011232:	ab03      	add	r3, sp, #12
 8011234:	4805      	ldr	r0, [pc, #20]	; (801124c <fiprintf+0x20>)
 8011236:	f853 2b04 	ldr.w	r2, [r3], #4
 801123a:	6800      	ldr	r0, [r0, #0]
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	f000 f899 	bl	8011374 <_vfiprintf_r>
 8011242:	b002      	add	sp, #8
 8011244:	f85d eb04 	ldr.w	lr, [sp], #4
 8011248:	b003      	add	sp, #12
 801124a:	4770      	bx	lr
 801124c:	200011c4 	.word	0x200011c4

08011250 <_fstat_r>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	4d07      	ldr	r5, [pc, #28]	; (8011270 <_fstat_r+0x20>)
 8011254:	2300      	movs	r3, #0
 8011256:	4604      	mov	r4, r0
 8011258:	4608      	mov	r0, r1
 801125a:	4611      	mov	r1, r2
 801125c:	602b      	str	r3, [r5, #0]
 801125e:	f7f1 f820 	bl	80022a2 <_fstat>
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	d102      	bne.n	801126c <_fstat_r+0x1c>
 8011266:	682b      	ldr	r3, [r5, #0]
 8011268:	b103      	cbz	r3, 801126c <_fstat_r+0x1c>
 801126a:	6023      	str	r3, [r4, #0]
 801126c:	bd38      	pop	{r3, r4, r5, pc}
 801126e:	bf00      	nop
 8011270:	200018e8 	.word	0x200018e8

08011274 <_isatty_r>:
 8011274:	b538      	push	{r3, r4, r5, lr}
 8011276:	4d06      	ldr	r5, [pc, #24]	; (8011290 <_isatty_r+0x1c>)
 8011278:	2300      	movs	r3, #0
 801127a:	4604      	mov	r4, r0
 801127c:	4608      	mov	r0, r1
 801127e:	602b      	str	r3, [r5, #0]
 8011280:	f7f1 f81f 	bl	80022c2 <_isatty>
 8011284:	1c43      	adds	r3, r0, #1
 8011286:	d102      	bne.n	801128e <_isatty_r+0x1a>
 8011288:	682b      	ldr	r3, [r5, #0]
 801128a:	b103      	cbz	r3, 801128e <_isatty_r+0x1a>
 801128c:	6023      	str	r3, [r4, #0]
 801128e:	bd38      	pop	{r3, r4, r5, pc}
 8011290:	200018e8 	.word	0x200018e8

08011294 <_lseek_r>:
 8011294:	b538      	push	{r3, r4, r5, lr}
 8011296:	4d07      	ldr	r5, [pc, #28]	; (80112b4 <_lseek_r+0x20>)
 8011298:	4604      	mov	r4, r0
 801129a:	4608      	mov	r0, r1
 801129c:	4611      	mov	r1, r2
 801129e:	2200      	movs	r2, #0
 80112a0:	602a      	str	r2, [r5, #0]
 80112a2:	461a      	mov	r2, r3
 80112a4:	f7f1 f818 	bl	80022d8 <_lseek>
 80112a8:	1c43      	adds	r3, r0, #1
 80112aa:	d102      	bne.n	80112b2 <_lseek_r+0x1e>
 80112ac:	682b      	ldr	r3, [r5, #0]
 80112ae:	b103      	cbz	r3, 80112b2 <_lseek_r+0x1e>
 80112b0:	6023      	str	r3, [r4, #0]
 80112b2:	bd38      	pop	{r3, r4, r5, pc}
 80112b4:	200018e8 	.word	0x200018e8

080112b8 <__ascii_mbtowc>:
 80112b8:	b082      	sub	sp, #8
 80112ba:	b901      	cbnz	r1, 80112be <__ascii_mbtowc+0x6>
 80112bc:	a901      	add	r1, sp, #4
 80112be:	b142      	cbz	r2, 80112d2 <__ascii_mbtowc+0x1a>
 80112c0:	b14b      	cbz	r3, 80112d6 <__ascii_mbtowc+0x1e>
 80112c2:	7813      	ldrb	r3, [r2, #0]
 80112c4:	600b      	str	r3, [r1, #0]
 80112c6:	7812      	ldrb	r2, [r2, #0]
 80112c8:	1e10      	subs	r0, r2, #0
 80112ca:	bf18      	it	ne
 80112cc:	2001      	movne	r0, #1
 80112ce:	b002      	add	sp, #8
 80112d0:	4770      	bx	lr
 80112d2:	4610      	mov	r0, r2
 80112d4:	e7fb      	b.n	80112ce <__ascii_mbtowc+0x16>
 80112d6:	f06f 0001 	mvn.w	r0, #1
 80112da:	e7f8      	b.n	80112ce <__ascii_mbtowc+0x16>

080112dc <memmove>:
 80112dc:	4288      	cmp	r0, r1
 80112de:	b510      	push	{r4, lr}
 80112e0:	eb01 0402 	add.w	r4, r1, r2
 80112e4:	d902      	bls.n	80112ec <memmove+0x10>
 80112e6:	4284      	cmp	r4, r0
 80112e8:	4623      	mov	r3, r4
 80112ea:	d807      	bhi.n	80112fc <memmove+0x20>
 80112ec:	1e43      	subs	r3, r0, #1
 80112ee:	42a1      	cmp	r1, r4
 80112f0:	d008      	beq.n	8011304 <memmove+0x28>
 80112f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112fa:	e7f8      	b.n	80112ee <memmove+0x12>
 80112fc:	4402      	add	r2, r0
 80112fe:	4601      	mov	r1, r0
 8011300:	428a      	cmp	r2, r1
 8011302:	d100      	bne.n	8011306 <memmove+0x2a>
 8011304:	bd10      	pop	{r4, pc}
 8011306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801130a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801130e:	e7f7      	b.n	8011300 <memmove+0x24>

08011310 <_malloc_usable_size_r>:
 8011310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011314:	1f18      	subs	r0, r3, #4
 8011316:	2b00      	cmp	r3, #0
 8011318:	bfbc      	itt	lt
 801131a:	580b      	ldrlt	r3, [r1, r0]
 801131c:	18c0      	addlt	r0, r0, r3
 801131e:	4770      	bx	lr

08011320 <__sfputc_r>:
 8011320:	6893      	ldr	r3, [r2, #8]
 8011322:	3b01      	subs	r3, #1
 8011324:	2b00      	cmp	r3, #0
 8011326:	b410      	push	{r4}
 8011328:	6093      	str	r3, [r2, #8]
 801132a:	da08      	bge.n	801133e <__sfputc_r+0x1e>
 801132c:	6994      	ldr	r4, [r2, #24]
 801132e:	42a3      	cmp	r3, r4
 8011330:	db01      	blt.n	8011336 <__sfputc_r+0x16>
 8011332:	290a      	cmp	r1, #10
 8011334:	d103      	bne.n	801133e <__sfputc_r+0x1e>
 8011336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801133a:	f7fe b8e5 	b.w	800f508 <__swbuf_r>
 801133e:	6813      	ldr	r3, [r2, #0]
 8011340:	1c58      	adds	r0, r3, #1
 8011342:	6010      	str	r0, [r2, #0]
 8011344:	7019      	strb	r1, [r3, #0]
 8011346:	4608      	mov	r0, r1
 8011348:	f85d 4b04 	ldr.w	r4, [sp], #4
 801134c:	4770      	bx	lr

0801134e <__sfputs_r>:
 801134e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011350:	4606      	mov	r6, r0
 8011352:	460f      	mov	r7, r1
 8011354:	4614      	mov	r4, r2
 8011356:	18d5      	adds	r5, r2, r3
 8011358:	42ac      	cmp	r4, r5
 801135a:	d101      	bne.n	8011360 <__sfputs_r+0x12>
 801135c:	2000      	movs	r0, #0
 801135e:	e007      	b.n	8011370 <__sfputs_r+0x22>
 8011360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011364:	463a      	mov	r2, r7
 8011366:	4630      	mov	r0, r6
 8011368:	f7ff ffda 	bl	8011320 <__sfputc_r>
 801136c:	1c43      	adds	r3, r0, #1
 801136e:	d1f3      	bne.n	8011358 <__sfputs_r+0xa>
 8011370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011374 <_vfiprintf_r>:
 8011374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011378:	460d      	mov	r5, r1
 801137a:	b09d      	sub	sp, #116	; 0x74
 801137c:	4614      	mov	r4, r2
 801137e:	4698      	mov	r8, r3
 8011380:	4606      	mov	r6, r0
 8011382:	b118      	cbz	r0, 801138c <_vfiprintf_r+0x18>
 8011384:	6983      	ldr	r3, [r0, #24]
 8011386:	b90b      	cbnz	r3, 801138c <_vfiprintf_r+0x18>
 8011388:	f7ff f892 	bl	80104b0 <__sinit>
 801138c:	4b89      	ldr	r3, [pc, #548]	; (80115b4 <_vfiprintf_r+0x240>)
 801138e:	429d      	cmp	r5, r3
 8011390:	d11b      	bne.n	80113ca <_vfiprintf_r+0x56>
 8011392:	6875      	ldr	r5, [r6, #4]
 8011394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011396:	07d9      	lsls	r1, r3, #31
 8011398:	d405      	bmi.n	80113a6 <_vfiprintf_r+0x32>
 801139a:	89ab      	ldrh	r3, [r5, #12]
 801139c:	059a      	lsls	r2, r3, #22
 801139e:	d402      	bmi.n	80113a6 <_vfiprintf_r+0x32>
 80113a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113a2:	f7ff f928 	bl	80105f6 <__retarget_lock_acquire_recursive>
 80113a6:	89ab      	ldrh	r3, [r5, #12]
 80113a8:	071b      	lsls	r3, r3, #28
 80113aa:	d501      	bpl.n	80113b0 <_vfiprintf_r+0x3c>
 80113ac:	692b      	ldr	r3, [r5, #16]
 80113ae:	b9eb      	cbnz	r3, 80113ec <_vfiprintf_r+0x78>
 80113b0:	4629      	mov	r1, r5
 80113b2:	4630      	mov	r0, r6
 80113b4:	f7fe f8fa 	bl	800f5ac <__swsetup_r>
 80113b8:	b1c0      	cbz	r0, 80113ec <_vfiprintf_r+0x78>
 80113ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113bc:	07dc      	lsls	r4, r3, #31
 80113be:	d50e      	bpl.n	80113de <_vfiprintf_r+0x6a>
 80113c0:	f04f 30ff 	mov.w	r0, #4294967295
 80113c4:	b01d      	add	sp, #116	; 0x74
 80113c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ca:	4b7b      	ldr	r3, [pc, #492]	; (80115b8 <_vfiprintf_r+0x244>)
 80113cc:	429d      	cmp	r5, r3
 80113ce:	d101      	bne.n	80113d4 <_vfiprintf_r+0x60>
 80113d0:	68b5      	ldr	r5, [r6, #8]
 80113d2:	e7df      	b.n	8011394 <_vfiprintf_r+0x20>
 80113d4:	4b79      	ldr	r3, [pc, #484]	; (80115bc <_vfiprintf_r+0x248>)
 80113d6:	429d      	cmp	r5, r3
 80113d8:	bf08      	it	eq
 80113da:	68f5      	ldreq	r5, [r6, #12]
 80113dc:	e7da      	b.n	8011394 <_vfiprintf_r+0x20>
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	0598      	lsls	r0, r3, #22
 80113e2:	d4ed      	bmi.n	80113c0 <_vfiprintf_r+0x4c>
 80113e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113e6:	f7ff f907 	bl	80105f8 <__retarget_lock_release_recursive>
 80113ea:	e7e9      	b.n	80113c0 <_vfiprintf_r+0x4c>
 80113ec:	2300      	movs	r3, #0
 80113ee:	9309      	str	r3, [sp, #36]	; 0x24
 80113f0:	2320      	movs	r3, #32
 80113f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80113fa:	2330      	movs	r3, #48	; 0x30
 80113fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80115c0 <_vfiprintf_r+0x24c>
 8011400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011404:	f04f 0901 	mov.w	r9, #1
 8011408:	4623      	mov	r3, r4
 801140a:	469a      	mov	sl, r3
 801140c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011410:	b10a      	cbz	r2, 8011416 <_vfiprintf_r+0xa2>
 8011412:	2a25      	cmp	r2, #37	; 0x25
 8011414:	d1f9      	bne.n	801140a <_vfiprintf_r+0x96>
 8011416:	ebba 0b04 	subs.w	fp, sl, r4
 801141a:	d00b      	beq.n	8011434 <_vfiprintf_r+0xc0>
 801141c:	465b      	mov	r3, fp
 801141e:	4622      	mov	r2, r4
 8011420:	4629      	mov	r1, r5
 8011422:	4630      	mov	r0, r6
 8011424:	f7ff ff93 	bl	801134e <__sfputs_r>
 8011428:	3001      	adds	r0, #1
 801142a:	f000 80aa 	beq.w	8011582 <_vfiprintf_r+0x20e>
 801142e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011430:	445a      	add	r2, fp
 8011432:	9209      	str	r2, [sp, #36]	; 0x24
 8011434:	f89a 3000 	ldrb.w	r3, [sl]
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 80a2 	beq.w	8011582 <_vfiprintf_r+0x20e>
 801143e:	2300      	movs	r3, #0
 8011440:	f04f 32ff 	mov.w	r2, #4294967295
 8011444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011448:	f10a 0a01 	add.w	sl, sl, #1
 801144c:	9304      	str	r3, [sp, #16]
 801144e:	9307      	str	r3, [sp, #28]
 8011450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011454:	931a      	str	r3, [sp, #104]	; 0x68
 8011456:	4654      	mov	r4, sl
 8011458:	2205      	movs	r2, #5
 801145a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801145e:	4858      	ldr	r0, [pc, #352]	; (80115c0 <_vfiprintf_r+0x24c>)
 8011460:	f7ee fef6 	bl	8000250 <memchr>
 8011464:	9a04      	ldr	r2, [sp, #16]
 8011466:	b9d8      	cbnz	r0, 80114a0 <_vfiprintf_r+0x12c>
 8011468:	06d1      	lsls	r1, r2, #27
 801146a:	bf44      	itt	mi
 801146c:	2320      	movmi	r3, #32
 801146e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011472:	0713      	lsls	r3, r2, #28
 8011474:	bf44      	itt	mi
 8011476:	232b      	movmi	r3, #43	; 0x2b
 8011478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801147c:	f89a 3000 	ldrb.w	r3, [sl]
 8011480:	2b2a      	cmp	r3, #42	; 0x2a
 8011482:	d015      	beq.n	80114b0 <_vfiprintf_r+0x13c>
 8011484:	9a07      	ldr	r2, [sp, #28]
 8011486:	4654      	mov	r4, sl
 8011488:	2000      	movs	r0, #0
 801148a:	f04f 0c0a 	mov.w	ip, #10
 801148e:	4621      	mov	r1, r4
 8011490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011494:	3b30      	subs	r3, #48	; 0x30
 8011496:	2b09      	cmp	r3, #9
 8011498:	d94e      	bls.n	8011538 <_vfiprintf_r+0x1c4>
 801149a:	b1b0      	cbz	r0, 80114ca <_vfiprintf_r+0x156>
 801149c:	9207      	str	r2, [sp, #28]
 801149e:	e014      	b.n	80114ca <_vfiprintf_r+0x156>
 80114a0:	eba0 0308 	sub.w	r3, r0, r8
 80114a4:	fa09 f303 	lsl.w	r3, r9, r3
 80114a8:	4313      	orrs	r3, r2
 80114aa:	9304      	str	r3, [sp, #16]
 80114ac:	46a2      	mov	sl, r4
 80114ae:	e7d2      	b.n	8011456 <_vfiprintf_r+0xe2>
 80114b0:	9b03      	ldr	r3, [sp, #12]
 80114b2:	1d19      	adds	r1, r3, #4
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	9103      	str	r1, [sp, #12]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	bfbb      	ittet	lt
 80114bc:	425b      	neglt	r3, r3
 80114be:	f042 0202 	orrlt.w	r2, r2, #2
 80114c2:	9307      	strge	r3, [sp, #28]
 80114c4:	9307      	strlt	r3, [sp, #28]
 80114c6:	bfb8      	it	lt
 80114c8:	9204      	strlt	r2, [sp, #16]
 80114ca:	7823      	ldrb	r3, [r4, #0]
 80114cc:	2b2e      	cmp	r3, #46	; 0x2e
 80114ce:	d10c      	bne.n	80114ea <_vfiprintf_r+0x176>
 80114d0:	7863      	ldrb	r3, [r4, #1]
 80114d2:	2b2a      	cmp	r3, #42	; 0x2a
 80114d4:	d135      	bne.n	8011542 <_vfiprintf_r+0x1ce>
 80114d6:	9b03      	ldr	r3, [sp, #12]
 80114d8:	1d1a      	adds	r2, r3, #4
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	9203      	str	r2, [sp, #12]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	bfb8      	it	lt
 80114e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80114e6:	3402      	adds	r4, #2
 80114e8:	9305      	str	r3, [sp, #20]
 80114ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115d0 <_vfiprintf_r+0x25c>
 80114ee:	7821      	ldrb	r1, [r4, #0]
 80114f0:	2203      	movs	r2, #3
 80114f2:	4650      	mov	r0, sl
 80114f4:	f7ee feac 	bl	8000250 <memchr>
 80114f8:	b140      	cbz	r0, 801150c <_vfiprintf_r+0x198>
 80114fa:	2340      	movs	r3, #64	; 0x40
 80114fc:	eba0 000a 	sub.w	r0, r0, sl
 8011500:	fa03 f000 	lsl.w	r0, r3, r0
 8011504:	9b04      	ldr	r3, [sp, #16]
 8011506:	4303      	orrs	r3, r0
 8011508:	3401      	adds	r4, #1
 801150a:	9304      	str	r3, [sp, #16]
 801150c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011510:	482c      	ldr	r0, [pc, #176]	; (80115c4 <_vfiprintf_r+0x250>)
 8011512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011516:	2206      	movs	r2, #6
 8011518:	f7ee fe9a 	bl	8000250 <memchr>
 801151c:	2800      	cmp	r0, #0
 801151e:	d03f      	beq.n	80115a0 <_vfiprintf_r+0x22c>
 8011520:	4b29      	ldr	r3, [pc, #164]	; (80115c8 <_vfiprintf_r+0x254>)
 8011522:	bb1b      	cbnz	r3, 801156c <_vfiprintf_r+0x1f8>
 8011524:	9b03      	ldr	r3, [sp, #12]
 8011526:	3307      	adds	r3, #7
 8011528:	f023 0307 	bic.w	r3, r3, #7
 801152c:	3308      	adds	r3, #8
 801152e:	9303      	str	r3, [sp, #12]
 8011530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011532:	443b      	add	r3, r7
 8011534:	9309      	str	r3, [sp, #36]	; 0x24
 8011536:	e767      	b.n	8011408 <_vfiprintf_r+0x94>
 8011538:	fb0c 3202 	mla	r2, ip, r2, r3
 801153c:	460c      	mov	r4, r1
 801153e:	2001      	movs	r0, #1
 8011540:	e7a5      	b.n	801148e <_vfiprintf_r+0x11a>
 8011542:	2300      	movs	r3, #0
 8011544:	3401      	adds	r4, #1
 8011546:	9305      	str	r3, [sp, #20]
 8011548:	4619      	mov	r1, r3
 801154a:	f04f 0c0a 	mov.w	ip, #10
 801154e:	4620      	mov	r0, r4
 8011550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011554:	3a30      	subs	r2, #48	; 0x30
 8011556:	2a09      	cmp	r2, #9
 8011558:	d903      	bls.n	8011562 <_vfiprintf_r+0x1ee>
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0c5      	beq.n	80114ea <_vfiprintf_r+0x176>
 801155e:	9105      	str	r1, [sp, #20]
 8011560:	e7c3      	b.n	80114ea <_vfiprintf_r+0x176>
 8011562:	fb0c 2101 	mla	r1, ip, r1, r2
 8011566:	4604      	mov	r4, r0
 8011568:	2301      	movs	r3, #1
 801156a:	e7f0      	b.n	801154e <_vfiprintf_r+0x1da>
 801156c:	ab03      	add	r3, sp, #12
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	462a      	mov	r2, r5
 8011572:	4b16      	ldr	r3, [pc, #88]	; (80115cc <_vfiprintf_r+0x258>)
 8011574:	a904      	add	r1, sp, #16
 8011576:	4630      	mov	r0, r6
 8011578:	f7fd fb6e 	bl	800ec58 <_printf_float>
 801157c:	4607      	mov	r7, r0
 801157e:	1c78      	adds	r0, r7, #1
 8011580:	d1d6      	bne.n	8011530 <_vfiprintf_r+0x1bc>
 8011582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011584:	07d9      	lsls	r1, r3, #31
 8011586:	d405      	bmi.n	8011594 <_vfiprintf_r+0x220>
 8011588:	89ab      	ldrh	r3, [r5, #12]
 801158a:	059a      	lsls	r2, r3, #22
 801158c:	d402      	bmi.n	8011594 <_vfiprintf_r+0x220>
 801158e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011590:	f7ff f832 	bl	80105f8 <__retarget_lock_release_recursive>
 8011594:	89ab      	ldrh	r3, [r5, #12]
 8011596:	065b      	lsls	r3, r3, #25
 8011598:	f53f af12 	bmi.w	80113c0 <_vfiprintf_r+0x4c>
 801159c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801159e:	e711      	b.n	80113c4 <_vfiprintf_r+0x50>
 80115a0:	ab03      	add	r3, sp, #12
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	462a      	mov	r2, r5
 80115a6:	4b09      	ldr	r3, [pc, #36]	; (80115cc <_vfiprintf_r+0x258>)
 80115a8:	a904      	add	r1, sp, #16
 80115aa:	4630      	mov	r0, r6
 80115ac:	f7fd fde0 	bl	800f170 <_printf_i>
 80115b0:	e7e4      	b.n	801157c <_vfiprintf_r+0x208>
 80115b2:	bf00      	nop
 80115b4:	08012ac8 	.word	0x08012ac8
 80115b8:	08012ae8 	.word	0x08012ae8
 80115bc:	08012aa8 	.word	0x08012aa8
 80115c0:	08012c64 	.word	0x08012c64
 80115c4:	08012c6e 	.word	0x08012c6e
 80115c8:	0800ec59 	.word	0x0800ec59
 80115cc:	0801134f 	.word	0x0801134f
 80115d0:	08012c6a 	.word	0x08012c6a

080115d4 <_read_r>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	4d07      	ldr	r5, [pc, #28]	; (80115f4 <_read_r+0x20>)
 80115d8:	4604      	mov	r4, r0
 80115da:	4608      	mov	r0, r1
 80115dc:	4611      	mov	r1, r2
 80115de:	2200      	movs	r2, #0
 80115e0:	602a      	str	r2, [r5, #0]
 80115e2:	461a      	mov	r2, r3
 80115e4:	f7f0 fe18 	bl	8002218 <_read>
 80115e8:	1c43      	adds	r3, r0, #1
 80115ea:	d102      	bne.n	80115f2 <_read_r+0x1e>
 80115ec:	682b      	ldr	r3, [r5, #0]
 80115ee:	b103      	cbz	r3, 80115f2 <_read_r+0x1e>
 80115f0:	6023      	str	r3, [r4, #0]
 80115f2:	bd38      	pop	{r3, r4, r5, pc}
 80115f4:	200018e8 	.word	0x200018e8

080115f8 <__ascii_wctomb>:
 80115f8:	b149      	cbz	r1, 801160e <__ascii_wctomb+0x16>
 80115fa:	2aff      	cmp	r2, #255	; 0xff
 80115fc:	bf85      	ittet	hi
 80115fe:	238a      	movhi	r3, #138	; 0x8a
 8011600:	6003      	strhi	r3, [r0, #0]
 8011602:	700a      	strbls	r2, [r1, #0]
 8011604:	f04f 30ff 	movhi.w	r0, #4294967295
 8011608:	bf98      	it	ls
 801160a:	2001      	movls	r0, #1
 801160c:	4770      	bx	lr
 801160e:	4608      	mov	r0, r1
 8011610:	4770      	bx	lr

08011612 <abort>:
 8011612:	b508      	push	{r3, lr}
 8011614:	2006      	movs	r0, #6
 8011616:	f000 f82b 	bl	8011670 <raise>
 801161a:	2001      	movs	r0, #1
 801161c:	f7f0 fdf2 	bl	8002204 <_exit>

08011620 <_raise_r>:
 8011620:	291f      	cmp	r1, #31
 8011622:	b538      	push	{r3, r4, r5, lr}
 8011624:	4604      	mov	r4, r0
 8011626:	460d      	mov	r5, r1
 8011628:	d904      	bls.n	8011634 <_raise_r+0x14>
 801162a:	2316      	movs	r3, #22
 801162c:	6003      	str	r3, [r0, #0]
 801162e:	f04f 30ff 	mov.w	r0, #4294967295
 8011632:	bd38      	pop	{r3, r4, r5, pc}
 8011634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011636:	b112      	cbz	r2, 801163e <_raise_r+0x1e>
 8011638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801163c:	b94b      	cbnz	r3, 8011652 <_raise_r+0x32>
 801163e:	4620      	mov	r0, r4
 8011640:	f000 f830 	bl	80116a4 <_getpid_r>
 8011644:	462a      	mov	r2, r5
 8011646:	4601      	mov	r1, r0
 8011648:	4620      	mov	r0, r4
 801164a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801164e:	f000 b817 	b.w	8011680 <_kill_r>
 8011652:	2b01      	cmp	r3, #1
 8011654:	d00a      	beq.n	801166c <_raise_r+0x4c>
 8011656:	1c59      	adds	r1, r3, #1
 8011658:	d103      	bne.n	8011662 <_raise_r+0x42>
 801165a:	2316      	movs	r3, #22
 801165c:	6003      	str	r3, [r0, #0]
 801165e:	2001      	movs	r0, #1
 8011660:	e7e7      	b.n	8011632 <_raise_r+0x12>
 8011662:	2400      	movs	r4, #0
 8011664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011668:	4628      	mov	r0, r5
 801166a:	4798      	blx	r3
 801166c:	2000      	movs	r0, #0
 801166e:	e7e0      	b.n	8011632 <_raise_r+0x12>

08011670 <raise>:
 8011670:	4b02      	ldr	r3, [pc, #8]	; (801167c <raise+0xc>)
 8011672:	4601      	mov	r1, r0
 8011674:	6818      	ldr	r0, [r3, #0]
 8011676:	f7ff bfd3 	b.w	8011620 <_raise_r>
 801167a:	bf00      	nop
 801167c:	200011c4 	.word	0x200011c4

08011680 <_kill_r>:
 8011680:	b538      	push	{r3, r4, r5, lr}
 8011682:	4d07      	ldr	r5, [pc, #28]	; (80116a0 <_kill_r+0x20>)
 8011684:	2300      	movs	r3, #0
 8011686:	4604      	mov	r4, r0
 8011688:	4608      	mov	r0, r1
 801168a:	4611      	mov	r1, r2
 801168c:	602b      	str	r3, [r5, #0]
 801168e:	f7f0 fda9 	bl	80021e4 <_kill>
 8011692:	1c43      	adds	r3, r0, #1
 8011694:	d102      	bne.n	801169c <_kill_r+0x1c>
 8011696:	682b      	ldr	r3, [r5, #0]
 8011698:	b103      	cbz	r3, 801169c <_kill_r+0x1c>
 801169a:	6023      	str	r3, [r4, #0]
 801169c:	bd38      	pop	{r3, r4, r5, pc}
 801169e:	bf00      	nop
 80116a0:	200018e8 	.word	0x200018e8

080116a4 <_getpid_r>:
 80116a4:	f7f0 bd96 	b.w	80021d4 <_getpid>

080116a8 <with_errnof>:
 80116a8:	b513      	push	{r0, r1, r4, lr}
 80116aa:	4604      	mov	r4, r0
 80116ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 80116b0:	f7fd f910 	bl	800e8d4 <__errno>
 80116b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80116b8:	6004      	str	r4, [r0, #0]
 80116ba:	b002      	add	sp, #8
 80116bc:	bd10      	pop	{r4, pc}

080116be <xflowf>:
 80116be:	b130      	cbz	r0, 80116ce <xflowf+0x10>
 80116c0:	eef1 7a40 	vneg.f32	s15, s0
 80116c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80116c8:	2022      	movs	r0, #34	; 0x22
 80116ca:	f7ff bfed 	b.w	80116a8 <with_errnof>
 80116ce:	eef0 7a40 	vmov.f32	s15, s0
 80116d2:	e7f7      	b.n	80116c4 <xflowf+0x6>

080116d4 <__math_uflowf>:
 80116d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80116dc <__math_uflowf+0x8>
 80116d8:	f7ff bff1 	b.w	80116be <xflowf>
 80116dc:	10000000 	.word	0x10000000

080116e0 <__math_may_uflowf>:
 80116e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80116e8 <__math_may_uflowf+0x8>
 80116e4:	f7ff bfeb 	b.w	80116be <xflowf>
 80116e8:	1a200000 	.word	0x1a200000

080116ec <__math_oflowf>:
 80116ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80116f4 <__math_oflowf+0x8>
 80116f0:	f7ff bfe5 	b.w	80116be <xflowf>
 80116f4:	70000000 	.word	0x70000000

080116f8 <__math_divzerof>:
 80116f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80116fc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011700:	2800      	cmp	r0, #0
 8011702:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8011706:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011714 <__math_divzerof+0x1c>
 801170a:	2022      	movs	r0, #34	; 0x22
 801170c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011710:	f7ff bfca 	b.w	80116a8 <with_errnof>
 8011714:	00000000 	.word	0x00000000

08011718 <__math_invalidf>:
 8011718:	eef0 7a40 	vmov.f32	s15, s0
 801171c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011720:	eef4 7a67 	vcmp.f32	s15, s15
 8011724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011728:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801172c:	d602      	bvs.n	8011734 <__math_invalidf+0x1c>
 801172e:	2021      	movs	r0, #33	; 0x21
 8011730:	f7ff bfba 	b.w	80116a8 <with_errnof>
 8011734:	4770      	bx	lr
	...

08011738 <expf>:
 8011738:	ee10 2a10 	vmov	r2, s0
 801173c:	f240 412a 	movw	r1, #1066	; 0x42a
 8011740:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8011744:	428b      	cmp	r3, r1
 8011746:	b430      	push	{r4, r5}
 8011748:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801174c:	d92a      	bls.n	80117a4 <expf+0x6c>
 801174e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8011752:	d058      	beq.n	8011806 <expf+0xce>
 8011754:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8011758:	d303      	bcc.n	8011762 <expf+0x2a>
 801175a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801175e:	bc30      	pop	{r4, r5}
 8011760:	4770      	bx	lr
 8011762:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801180c <expf+0xd4>
 8011766:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176e:	dd03      	ble.n	8011778 <expf+0x40>
 8011770:	bc30      	pop	{r4, r5}
 8011772:	2000      	movs	r0, #0
 8011774:	f7ff bfba 	b.w	80116ec <__math_oflowf>
 8011778:	eddf 7a25 	vldr	s15, [pc, #148]	; 8011810 <expf+0xd8>
 801177c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011784:	d503      	bpl.n	801178e <expf+0x56>
 8011786:	bc30      	pop	{r4, r5}
 8011788:	2000      	movs	r0, #0
 801178a:	f7ff bfa3 	b.w	80116d4 <__math_uflowf>
 801178e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011814 <expf+0xdc>
 8011792:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179a:	d503      	bpl.n	80117a4 <expf+0x6c>
 801179c:	bc30      	pop	{r4, r5}
 801179e:	2000      	movs	r0, #0
 80117a0:	f7ff bf9e 	b.w	80116e0 <__math_may_uflowf>
 80117a4:	4b1c      	ldr	r3, [pc, #112]	; (8011818 <expf+0xe0>)
 80117a6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80117aa:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 80117ae:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 80117b2:	eeb0 7b44 	vmov.f64	d7, d4
 80117b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80117ba:	ee17 0a10 	vmov	r0, s14
 80117be:	ee37 7b44 	vsub.f64	d7, d7, d4
 80117c2:	f000 021f 	and.w	r2, r0, #31
 80117c6:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80117ca:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 80117ce:	ee27 4b07 	vmul.f64	d4, d7, d7
 80117d2:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 80117d6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80117da:	eea5 6b07 	vfma.f64	d6, d5, d7
 80117de:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80117e2:	684d      	ldr	r5, [r1, #4]
 80117e4:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 80117e8:	2100      	movs	r1, #0
 80117ea:	190a      	adds	r2, r1, r4
 80117ec:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80117f0:	eea5 0b07 	vfma.f64	d0, d5, d7
 80117f4:	ec43 2b17 	vmov	d7, r2, r3
 80117f8:	eea6 0b04 	vfma.f64	d0, d6, d4
 80117fc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011800:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011804:	e7ab      	b.n	801175e <expf+0x26>
 8011806:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801181c <expf+0xe4>
 801180a:	e7a8      	b.n	801175e <expf+0x26>
 801180c:	42b17217 	.word	0x42b17217
 8011810:	c2cff1b4 	.word	0xc2cff1b4
 8011814:	c2ce8ecf 	.word	0xc2ce8ecf
 8011818:	08012dc0 	.word	0x08012dc0
 801181c:	00000000 	.word	0x00000000

08011820 <checkint>:
 8011820:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011824:	2b7e      	cmp	r3, #126	; 0x7e
 8011826:	dd10      	ble.n	801184a <checkint+0x2a>
 8011828:	2b96      	cmp	r3, #150	; 0x96
 801182a:	dc0c      	bgt.n	8011846 <checkint+0x26>
 801182c:	2201      	movs	r2, #1
 801182e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011832:	fa02 f303 	lsl.w	r3, r2, r3
 8011836:	1e5a      	subs	r2, r3, #1
 8011838:	4202      	tst	r2, r0
 801183a:	d106      	bne.n	801184a <checkint+0x2a>
 801183c:	4203      	tst	r3, r0
 801183e:	bf0c      	ite	eq
 8011840:	2002      	moveq	r0, #2
 8011842:	2001      	movne	r0, #1
 8011844:	4770      	bx	lr
 8011846:	2002      	movs	r0, #2
 8011848:	4770      	bx	lr
 801184a:	2000      	movs	r0, #0
 801184c:	4770      	bx	lr
	...

08011850 <powf>:
 8011850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011852:	ee10 1a10 	vmov	r1, s0
 8011856:	ee10 4a90 	vmov	r4, s1
 801185a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801185e:	0062      	lsls	r2, r4, #1
 8011860:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011864:	eef0 7a40 	vmov.f32	s15, s0
 8011868:	f102 30ff 	add.w	r0, r2, #4294967295
 801186c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8011870:	d252      	bcs.n	8011918 <powf+0xc8>
 8011872:	4298      	cmp	r0, r3
 8011874:	d252      	bcs.n	801191c <powf+0xcc>
 8011876:	2000      	movs	r0, #0
 8011878:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801187c:	4ca0      	ldr	r4, [pc, #640]	; (8011b00 <powf+0x2b0>)
 801187e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8011882:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8011886:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801188a:	0dd2      	lsrs	r2, r2, #23
 801188c:	05d2      	lsls	r2, r2, #23
 801188e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8011892:	1a8b      	subs	r3, r1, r2
 8011894:	ed95 6b00 	vldr	d6, [r5]
 8011898:	ee07 3a90 	vmov	s15, r3
 801189c:	15d2      	asrs	r2, r2, #23
 801189e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80118a2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80118a6:	ed95 6b02 	vldr	d6, [r5, #8]
 80118aa:	ee25 2b05 	vmul.f64	d2, d5, d5
 80118ae:	ee22 1b02 	vmul.f64	d1, d2, d2
 80118b2:	ee07 2a90 	vmov	s15, r2
 80118b6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80118ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80118c2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80118c6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80118ca:	eea5 3b06 	vfma.f64	d3, d5, d6
 80118ce:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80118d2:	eea5 6b04 	vfma.f64	d6, d5, d4
 80118d6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80118da:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80118de:	eea5 7b04 	vfma.f64	d7, d5, d4
 80118e2:	eea2 7b06 	vfma.f64	d7, d2, d6
 80118e6:	eea3 7b01 	vfma.f64	d7, d3, d1
 80118ea:	ee20 0b07 	vmul.f64	d0, d0, d7
 80118ee:	ee10 3a90 	vmov	r3, s1
 80118f2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80118f6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80118fa:	429a      	cmp	r2, r3
 80118fc:	f0c0 80b1 	bcc.w	8011a62 <powf+0x212>
 8011900:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8011ae0 <powf+0x290>
 8011904:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190c:	dd79      	ble.n	8011a02 <powf+0x1b2>
 801190e:	b003      	add	sp, #12
 8011910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011914:	f7ff beea 	b.w	80116ec <__math_oflowf>
 8011918:	4298      	cmp	r0, r3
 801191a:	d32d      	bcc.n	8011978 <powf+0x128>
 801191c:	b952      	cbnz	r2, 8011934 <powf+0xe4>
 801191e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8011928:	f240 80c9 	bls.w	8011abe <powf+0x26e>
 801192c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8011930:	b003      	add	sp, #12
 8011932:	bd30      	pop	{r4, r5, pc}
 8011934:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8011938:	d105      	bne.n	8011946 <powf+0xf6>
 801193a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801193e:	0064      	lsls	r4, r4, #1
 8011940:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011944:	e7f0      	b.n	8011928 <powf+0xd8>
 8011946:	004b      	lsls	r3, r1, #1
 8011948:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801194c:	d8ee      	bhi.n	801192c <powf+0xdc>
 801194e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8011952:	d1eb      	bne.n	801192c <powf+0xdc>
 8011954:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011958:	f000 80b1 	beq.w	8011abe <powf+0x26e>
 801195c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011960:	ea6f 0404 	mvn.w	r4, r4
 8011964:	bf34      	ite	cc
 8011966:	2300      	movcc	r3, #0
 8011968:	2301      	movcs	r3, #1
 801196a:	0fe4      	lsrs	r4, r4, #31
 801196c:	42a3      	cmp	r3, r4
 801196e:	f040 80a9 	bne.w	8011ac4 <powf+0x274>
 8011972:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8011976:	e7db      	b.n	8011930 <powf+0xe0>
 8011978:	004d      	lsls	r5, r1, #1
 801197a:	1e6a      	subs	r2, r5, #1
 801197c:	429a      	cmp	r2, r3
 801197e:	d31c      	bcc.n	80119ba <powf+0x16a>
 8011980:	2900      	cmp	r1, #0
 8011982:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011986:	da0f      	bge.n	80119a8 <powf+0x158>
 8011988:	ee10 0a90 	vmov	r0, s1
 801198c:	f7ff ff48 	bl	8011820 <checkint>
 8011990:	2801      	cmp	r0, #1
 8011992:	d109      	bne.n	80119a8 <powf+0x158>
 8011994:	eeb1 0a40 	vneg.f32	s0, s0
 8011998:	b945      	cbnz	r5, 80119ac <powf+0x15c>
 801199a:	2c00      	cmp	r4, #0
 801199c:	dac8      	bge.n	8011930 <powf+0xe0>
 801199e:	b003      	add	sp, #12
 80119a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119a4:	f7ff bea8 	b.w	80116f8 <__math_divzerof>
 80119a8:	2000      	movs	r0, #0
 80119aa:	e7f5      	b.n	8011998 <powf+0x148>
 80119ac:	2c00      	cmp	r4, #0
 80119ae:	dabf      	bge.n	8011930 <powf+0xe0>
 80119b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80119b4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80119b8:	e7ba      	b.n	8011930 <powf+0xe0>
 80119ba:	2900      	cmp	r1, #0
 80119bc:	da1f      	bge.n	80119fe <powf+0x1ae>
 80119be:	ee10 0a90 	vmov	r0, s1
 80119c2:	f7ff ff2d 	bl	8011820 <checkint>
 80119c6:	b920      	cbnz	r0, 80119d2 <powf+0x182>
 80119c8:	b003      	add	sp, #12
 80119ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119ce:	f7ff bea3 	b.w	8011718 <__math_invalidf>
 80119d2:	2801      	cmp	r0, #1
 80119d4:	bf14      	ite	ne
 80119d6:	2000      	movne	r0, #0
 80119d8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80119dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80119e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80119e4:	f4bf af48 	bcs.w	8011878 <powf+0x28>
 80119e8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8011b04 <powf+0x2b4>
 80119ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80119f0:	ee10 3a10 	vmov	r3, s0
 80119f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119f8:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80119fc:	e73c      	b.n	8011878 <powf+0x28>
 80119fe:	2000      	movs	r0, #0
 8011a00:	e7ee      	b.n	80119e0 <powf+0x190>
 8011a02:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8011ae8 <powf+0x298>
 8011a06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0e:	dd10      	ble.n	8011a32 <powf+0x1e2>
 8011a10:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d158      	bne.n	8011aca <powf+0x27a>
 8011a18:	9300      	str	r3, [sp, #0]
 8011a1a:	eddd 7a00 	vldr	s15, [sp]
 8011a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a26:	eef4 7a47 	vcmp.f32	s15, s14
 8011a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2e:	f47f af6e 	bne.w	801190e <powf+0xbe>
 8011a32:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011af0 <powf+0x2a0>
 8011a36:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a3e:	d804      	bhi.n	8011a4a <powf+0x1fa>
 8011a40:	b003      	add	sp, #12
 8011a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a46:	f7ff be45 	b.w	80116d4 <__math_uflowf>
 8011a4a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8011af8 <powf+0x2a8>
 8011a4e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a56:	d504      	bpl.n	8011a62 <powf+0x212>
 8011a58:	b003      	add	sp, #12
 8011a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a5e:	f7ff be3f 	b.w	80116e0 <__math_may_uflowf>
 8011a62:	4b29      	ldr	r3, [pc, #164]	; (8011b08 <powf+0x2b8>)
 8011a64:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8011a68:	ee30 6b07 	vadd.f64	d6, d0, d7
 8011a6c:	ee16 2a10 	vmov	r2, s12
 8011a70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011a74:	f002 011f 	and.w	r1, r2, #31
 8011a78:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8011a7c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011a80:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a84:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8011a88:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011a8c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8011a90:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8011a94:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011a98:	686d      	ldr	r5, [r5, #4]
 8011a9a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8011a9e:	1882      	adds	r2, r0, r2
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	1918      	adds	r0, r3, r4
 8011aa4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8011aa8:	eea7 0b05 	vfma.f64	d0, d7, d5
 8011aac:	ec41 0b17 	vmov	d7, r0, r1
 8011ab0:	eea6 0b04 	vfma.f64	d0, d6, d4
 8011ab4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ab8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011abc:	e738      	b.n	8011930 <powf+0xe0>
 8011abe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011ac2:	e735      	b.n	8011930 <powf+0xe0>
 8011ac4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8011b0c <powf+0x2bc>
 8011ac8:	e732      	b.n	8011930 <powf+0xe0>
 8011aca:	9301      	str	r3, [sp, #4]
 8011acc:	eddd 7a01 	vldr	s15, [sp, #4]
 8011ad0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ad8:	e7a5      	b.n	8011a26 <powf+0x1d6>
 8011ada:	bf00      	nop
 8011adc:	f3af 8000 	nop.w
 8011ae0:	ffd1d571 	.word	0xffd1d571
 8011ae4:	405fffff 	.word	0x405fffff
 8011ae8:	ffa3aae2 	.word	0xffa3aae2
 8011aec:	405fffff 	.word	0x405fffff
 8011af0:	00000000 	.word	0x00000000
 8011af4:	c062c000 	.word	0xc062c000
 8011af8:	00000000 	.word	0x00000000
 8011afc:	c062a000 	.word	0xc062a000
 8011b00:	08012f08 	.word	0x08012f08
 8011b04:	4b000000 	.word	0x4b000000
 8011b08:	08012dc0 	.word	0x08012dc0
 8011b0c:	00000000 	.word	0x00000000

08011b10 <_init>:
 8011b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b12:	bf00      	nop
 8011b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b16:	bc08      	pop	{r3}
 8011b18:	469e      	mov	lr, r3
 8011b1a:	4770      	bx	lr

08011b1c <_fini>:
 8011b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b1e:	bf00      	nop
 8011b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b22:	bc08      	pop	{r3}
 8011b24:	469e      	mov	lr, r3
 8011b26:	4770      	bx	lr
